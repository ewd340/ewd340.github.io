{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#code-sample","title":"Code sample","text":"<pre><code>#include &lt;stdio.h&gt;\nint main(int argc, char **argv)\n{\nprintf(\"hello, world!\\n\");\n}\n</code></pre>"},{"location":"notes/misc/libreoffice/","title":"LibreOffice tips","text":""},{"location":"notes/misc/libreoffice/#lookup","title":"Lookup","text":"<p>LibreOffice calc lookup</p> <p>=INDEX(WhereToGetData, MATCH(CellWeWantToFind,WHEREToFindCellValue,0),WhichColumnTOReturn)</p> <p>Example:</p> <p>=INDEX(\\(work.\\)A\\(3:\\)E\\(111, MATCH(A3,\\)work.\\(A\\)3:\\(A\\)111,0),5)</p>"},{"location":"notes/programming-languages/","title":"Programming languages","text":"<p>Original content by: Nikita</p> <p>There is a great article that goes over how one program can be written in different languages from the most abstract level of Math to Haskell to C to Assembly to actual machine code.</p> <p>Effects bibliography is a nice read.</p> <p>Lady Deirdre is interesting for making IDE for your language.</p>"},{"location":"notes/programming-languages/#notes","title":"Notes","text":"<ul> <li>I have a very concrete approach for creating categorical models/semantics for PLs. I express the syntax as a GADT, wrap it with a free(r) monad, then work with the resulting kleisli category.</li> <li>In general, our software benefits when we use as few languages as possible, because programming languages have such powerful network effects. Embedded DSLs are usually strongly preferable to freestanding ones because we get to reuse so much knowledge and infrastructure.</li> </ul>"},{"location":"notes/programming-languages/#links","title":"Links","text":"<ul> <li>Awesome programming languages</li> <li>Tour de Babel - Funny de tour of programming languages.</li> <li>Programming Language Theory</li> <li>Conal Elliott - Teaching New Tricks to Old Programs (2017)</li> <li>Awesome static analysis - Static analysis tools for all programming languages, build tools, config files and more.</li> <li>Lists of most popular repositories for most favored programming languages</li> <li>Rockstar - Idiomatic Rockstar FizzBuzz implementation is the best thing ever.</li> <li>Twelf - Language used to specify, implement, and prove properties of deductive systems such as programming languages and logics.</li> <li>GitHut - Place to discover languages on GitHub.</li> <li>Type inference (2018)</li> <li>Little Languages - (Lobsters)</li> <li>Course page Types and Semantics for Programming Languages (2018)</li> <li>Smallest possible syntactically valid files of different types</li> <li>History of Programming Languages course (GitHub repo)</li> <li>The Programming Language I\u2019m Looking For (2018)</li> <li>Go, Tooling, and New Languages (2016)</li> <li>Programming paradigms for dummies: what every programmer should know (2019)</li> <li>What, if anything, is a programming paradigm? (2017)</li> <li>Programming Languages Zoo - Collection of implementations of miniature programming languages. (Web)</li> <li>Thinking in a Language (2019)</li> <li>What are some niche features you'd like to see in more languages? (2019)</li> <li>Ask HN: What programming language should I learn next? (2019)</li> <li>Next-Paradigm Programming Languages: What Will They Look Like and What Changes Will They Bring? (HN)</li> <li>Semantic - Haskell library and command line tool for parsing, analyzing, and comparing source code.</li> <li>DSLs for non-programmers are a hoax (2019) (HN)</li> <li>Comparing the Same Project in Rust, Haskell, C++, Python, Scala and OCaml (2019) (HN)</li> <li>Hello, World! - Hello world in every computer language.</li> <li>Exercism Language Tracks</li> <li>TabNine - All-language ML autocompleter.</li> <li>Say something you dislike about a language you love (2019)</li> <li>Say something nice about a programming language you dislike (2019)</li> <li>comby - Tool for changing code across many languages.</li> <li>On the Expressive Power of Programming Languages by Shriram Krishnamurthi [PWLConf 2019] (Web) (HN)</li> <li>The Rise of 'Worse is Better' by Richard Gabriel</li> <li>\"All the Languages Together\" by Amal Ahmed (2018)</li> <li>Co - Programming language and optimizing compiler written in TypeScript. (Doc)</li> <li>User Interfaces for Programming Languages course (2019)</li> <li>User Interfaces for Programming Languages: The Compendium</li> <li>Advanced Programming Languages Cornell Course (2018)</li> <li>A Programmable Programming Language (2018) (HN)</li> <li>Panel: the Future of Languages (2019)</li> <li>Programming Language Tourism: Leave Python and see the world (2019)</li> <li>A programming language by Kenneth E. Iverson book (1962)</li> <li>Factor - Practical stack language. (HN)</li> <li>Factor: a dynamic stack-based programming language paper</li> <li>Quine - Self-referential program that can, without any external access, output its own source.</li> <li>Comby - Structural code search and replace for every language. (Web) (Lobsters) (HN)</li> <li>Lobsters: What would a programming language designed from the ground-up for a multi-core world look like? (2020)</li> <li>Practical Foundations for Programming Languages</li> <li>What language do you prefer for new project starts? (2020)</li> <li>Flow-Charts of Programming Language Constructs (2020) (HN)</li> <li>Bestiary of Single-File Implementations of Programming Languages</li> <li>NEAL - Language-independent code analysis tool that aims to enable more people to write quality enforcement rules.</li> <li>Most(ly dead) Influential Programming Languages (2020) (HN)</li> <li>Sam Tobin-Hochstadt's research</li> <li>Mu - Minimal-dependency hobbyist computing stack (everything above the processor and OS kernel). (Mu's neighborhood) (Lobsters)</li> <li>Mu: A minimal hobbyist computing stack (2019)</li> <li>Bitsy - Best language to implement when writing your first compiler or interpreter.</li> <li>codespan-reporting - Beautiful diagnostic reporting for text-based programming languages.</li> <li>What language to learn during quarantine? (2020)</li> <li>Language designers, use <code>ident: Type</code>, not <code>Type ident</code> (2017) (Lobsters)</li> <li>Row Polymorphism without the Jargon (2020) (Lobsters)</li> <li>Zero-cost Effect Handlers by Staging (Technical Report) (2019)</li> <li>A generic imperative language for polynomial time (2020)</li> <li>Designing flexible, modular linguistic abstractions (2019)</li> <li>An abstract domain for objects in dynamic programming languages (2019)</li> <li>A Simple Differentiable Programming Language (2020)</li> <li>The Hard Part of Learning a Language (2020) (Lobsters) (HN)</li> <li>Hoist - Visual programming language inspired by Excel &amp; Datalog.</li> <li>Esoteric.Codes - Languages, platforms, and systems that break from the norms of computing.</li> <li>Resources for the working programmer to learn more about the fundamentals and theory of programming languages</li> <li>Call-By-Push-Value - New programming language paradigm, based on the slogan \u201ca value is, a computation does\".</li> <li>Semgrep - Tool for easily detecting and preventing bugs and anti-patterns in your codebase. (Web) (HN)</li> <li>Algol 60 implementation (1964)</li> <li>Code Search - Tool for indexing and then performing regular expression searches over large bodies of source code. (Lobsters)</li> <li>Zoekt - Fast text search engine, intended for use with source code.</li> <li>10 more programming languages worth checking out (2018)</li> <li>A Beginner's Guide to Amiga E (Lobsters)</li> <li>Create your own programming language with Rust (Code)</li> <li>History of Programming Languages, Vol 4 (2020) (Lobsters)</li> <li>PLaST research group - Focuses on applied programming languages and software engineering.</li> <li>Piranha: An Open Source Tool to Automatically Delete Stale Code (2020) (HN)</li> <li>Performance improvements in precise code intel (2020)</li> <li>An Introduction to Efficient and Safe Implementations of Dynamic Languages (2020)</li> <li>What's your favorite programming language and what feature makes it your favorite? (2020)</li> <li>All about Modelica: An equation-based language for modeling physical systems (2020) (HN)</li> <li>Writing a VM for a Small Stack-Base Language in Pointless (Lobsters)</li> <li>Principles of Programming Languages \u2013 Graham Hutton</li> <li>Principles of Programming Languages (POPL) 2021 Videos</li> <li>Dijkstra: On the foolishness of \"natural language programming\" (Tweet)</li> <li>Semantics with Applications: A Formal Introduction</li> <li>The Formal Semantics of Programming Languages: An Introduction (1993)</li> <li>Semantics of Programming Languages in Agda</li> <li>The Fatal Flaw of Ownership Semantics (2020)</li> <li>The Pyret Code; or A Rationale for the Pyret Programming Language (Lobsters)</li> <li>Statically Sized Higher-kinded Polymorphism (2020) (Lobsters)</li> <li>The language strangeness budget (2015)</li> <li>Family spaghetti of programming languages (2019)</li> <li>Continuations by example: Exceptions, time-traveling search, threads, and more (2020) (HN)</li> <li>People of Programming Languages</li> <li>People of Language Design and Implementation</li> <li>Hindley-Milner Type Inference (2012) (HN)</li> <li>Deep learning to translate between programming languages (2020) (HN)</li> <li>Ask HN: What are you using new programming languages for? (2020)</li> <li>Build your own programming language (2020)</li> <li>A Foundation for Typed Concatenative Languages (2017) - Presents a sound and complete type inference algorithm.</li> <li>What Is The Minimal Set Of Optimizations Needed For Zero-Cost Abstraction? (2020)</li> <li>Kicking Off the Repl.it Programming Language Jam (2020) (HN)</li> <li>Structure and Interpretation of Computer Programs with Hal Abelson (2019)</li> <li>Collection of papers on modules</li> <li>Analysis Tools - Most Popular Analysis Tools by Programming Language. (Code)</li> <li>What's the Deal with Message Passing, Anyway (2020) (Lobsters)</li> <li>Things that are not strings (2020) (Lobsters)</li> <li>ICFP 2020</li> <li>Essentials of Programming Languages (Code) (HN) (Code in Racket) (Solutions in Scheme)</li> <li>UW PLSE - University of Washington Programming Languages and Software Engineering. (GitHub)</li> <li>Your Language Sucks, It Doesn\u2019t Matter (2020) (Lobsters)</li> <li>Energy Efficiency across Programming Languages (2017) (HN)</li> <li>Deep learning to translate between programming languages (2020)</li> <li>Increasing the Impact of PL Research (2020)</li> <li>Programming Languages course by Dan Grossman (Answers)</li> <li>Polygott - Base Docker image for the Repl.it evaluation server.</li> <li>Chris Lattner: The Future of Computing and Programming Languages (2020) (Web) (HN)</li> <li>History of Programming Language Topics (Code)</li> <li>Language Design with Leo White (2020) (Lobsters) (HN)</li> <li>Make a Language Using Rust (HN)</li> <li>Turing Incomplete Languages (2020)</li> <li>Semantics-Guided Synthesis (2020)</li> <li>We need less powerful languages (2015) (HN)</li> <li>Learn languages that are not Java, Python and C++ (2020)</li> <li>PLIERS: A Process that Integrates User-Centered Methods into Programming Language Design (2020)</li> <li>Liquid information flow control</li> <li>teaberry - Learning project to implement a typed functional programming language/dialect of ML, which aims to be accessible and usable like Python is.</li> <li>Langkit - Tool whose purpose is to make it easy to create syntactic and semantic analysis engines. Language creation framework.</li> <li>remark-prism - Syntax highlighter for markdown code blocks using Prism.</li> <li>JIT compiler and runtime for a toy language, using Cranelift</li> <li>PhD Thesis: Greybox Automatic Exploit Generation for Heap Overflows (2020)</li> <li>Programming languages genealogical tree</li> <li>Q&amp;A with Programming Language Beta Users (2020)</li> <li>Write You a Programming Language (Code)</li> <li>PLT research - Collection of PLT researching.</li> <li>History of programming languages concepts</li> <li>Programming Languages Study</li> <li>ALGT - Abstract Language Generation Tool.</li> <li>Stack Based Virtual Machines (2015) (Lobsters) (HN)</li> <li>How to design a new programming language from scratch (2020) (Lobsters)</li> <li>Automatic Language Bindings (2020) (Lobsters)</li> <li>Language resources - Links on how to learn how to create programming languages.</li> <li>Reflections on the Lack of Adoption of Domain Specific Languages (HN)</li> <li>Lobsters: What \"glue\" lanugages do you use/like? (2021)</li> <li>Build your own programming language in C++ (HN)</li> <li>Interactive Tutorials for programming languages</li> <li>Pygments - Generic syntax highlighter written in Python. (Code)</li> <li>Models of Programming Languages</li> <li>Designing an actor-based programming language (2020)</li> <li>CodeIntellify - Adds code intelligence to code views on the web.</li> <li>go-enry - Faster file programming language detector.</li> <li>Scriptometer - Measuring the ease of SOP (Script-Oriented Programming) of programming languages.</li> <li>FeOFu - Compiler Seminar - Ideas that would lead to better compilers for existing languages, better future programming languages, better APIs and better performance software solutions in the future.</li> <li>Theory and Practice of Programming Languages (Racket implementation)</li> <li>Quine Relay - Ruby program that generates Rust program that generates Scala program that generates.</li> <li>Language Graph - Shows a graph where the nodes are programming languages and the edges are compilers. (Code)</li> <li>GumTree - Complete framework to deal with source code as trees and compute differences between them.</li> <li>Linguist - Library is used on GitHub.com to create languages used breakdowns.</li> <li>Joern - Open-Source Code Querying Engine. (Code)</li> <li>ATS or Why Linear Types are the Future of Systems Programming (2021)</li> <li>Enclosure: Language-Based Restriction of Untrusted Libraries</li> <li>Programming Languages Group @ Penn</li> <li>SICP Book Notes</li> <li>Language Explorer - Explore 650+ programming languages, visualized based on paradigm influence relationships between languages.</li> <li>Brown University PLT (GitHub)</li> <li>DSL might be the answer (2021)</li> <li>PL Funding Panel with the Creators of Elm, Elixir, and Julia (2021)</li> <li>#PLTalk - YouTube</li> <li>Programming Languages for Enthusiasts</li> <li>Mathematically Structured Programming Group @ University of Strathclyde</li> <li>Women in Programming Languages and Software Engineering Research</li> <li>I don't want to learn your query language (2018) (HN)</li> <li>Lobsters: What's your experience been writing language tools? (2021)</li> <li>Performance comparison: counting words in Python, Go, C++, C, AWK, Forth, and Rust (2021) (HN) (Lobsters) (HN)</li> <li>What Programming Language Would Yoko Ono Create? (2021)</li> <li>20 Intriguing, Unusual, and Goofy Programming Languages (2019)</li> <li>FSL.tools - Programming language to make complex Finite State Machines easy to create and maintain.</li> <li>Language evangelists, why should I use [language]? (2021)</li> <li>A history of ALGOL 68</li> <li>The BNF Dream (2021)</li> <li>Ask HN: How to study programming language theory as a non CS student? (2021)</li> <li>Wuffs the Language (Lobsters) (HN)</li> <li>Introducing Dawn (Part 1) (2021) (Lobsters)</li> <li>Dawn languagea</li> <li>Why concatenative programming matters (2012)</li> <li>PLTalk links</li> <li>Crash Course on Notation in Programming Language Theory (2012)</li> <li>Reflection for the Masses (Code)</li> <li>The end of history for programming (2021)</li> <li>Langs In Rust - List of programming languages implemented in Rust, for inspiration.</li> <li>Demystifying interpreters (2020)</li> <li>PLDI 2021</li> <li>treefmt - One CLI to format the code tree.</li> <li>Implementing Co, a Small Interpreted Language With Coroutines #1: The Parser (2021)</li> <li>Playground for PL ideas</li> <li>A Gentle Introduction to Ted Nelson's ZigZag Structure (2002) (HN)</li> <li>Recent Advances in Programming Language Pre-Trained Models (PL-PTMs)</li> <li>Sereal - Fast, compact, schema-less, binary serialization and deserialization oriented towards dynamic languages.</li> <li>Compilation as Multi-Language Semantics</li> <li>Domain-Specific Languages Syllabus (2016)</li> <li>Schr\u00f6dinger's Code: Undefined behavior in theory and practice (2021)</li> <li>Riju - Fast online playground for every programming language. (Code)</li> <li>plyg - Playground to safely try out different programming languages in a single file.</li> <li>Principles of Programming Languages Course Notes</li> <li>Ask HN: Projects for learning a language? (2021)</li> <li>Langium - Language engineering tool with built-in support for the Language Server Protocol.</li> <li>Programming Language Memory Models (HN)</li> <li>The next 700 programming languages (1966) (Lobsters)</li> <li>Creating the Golfcart Programming Language (2021)</li> <li>Sham: A DSL for Fast DSLs (2021)</li> <li>Beautiful ideas in programming: generators and continuations (2021) (HN)</li> <li>Lizard - Code complexity analyser without caring about the C/C++ header files or Java imports, supports most of the popular languages.</li> <li>Abstracting Definitional Interpreters: Functional Pearl (Code)</li> <li>Lang Jam - Create a programming language in a weekend. (HN)</li> <li>flex - Tool for generating scanners: programs which recognize lexical patterns in text.</li> <li>Programming languages where you define control flow in terms of state machines</li> <li>Implicit ordering in relational languages (2021)</li> <li>Imba - Friendly full-stack programming language for the web that compiles to performant JavaScript. (Code) (HN) (Vite template)</li> <li>Shisho - Lightweight static analyzer for several programming languages.</li> <li>Hell Is Other REPLs (2021) (HN)</li> <li>Weird Languages (2021) (HN)</li> <li>Glean - System for collecting, deriving and working with facts about source code. (Web) (HN)</li> <li>Guesslang - Detects the programming language of a given source code. (Docs)</li> <li>Dispatch Techniques (Lobsters)</li> <li>A defense of boring languages (2015) (Lobsters)</li> <li>How to Rapidly Improve at Any Programming Language (2016) (HN)</li> <li>First-class Names for Effect Handlers (2021)</li> <li>Is it better to teach beginner coders a low level or a high level language as their first language? (2021)</li> <li>Cuddly, Octo-Palm Tree: Cheap interpreter, part 1: overview (2021)</li> <li>Code2flow - Generates call graphs for dynamic programming language.</li> <li>The seven programming ur-languages (2021) (Lobsters)</li> <li>Programming languages resources</li> <li>Implicit Overflow Considered Harmful (and how to fix it) (2021) (Lobsters)</li> <li>Project Verona - Research programming language for concurrent ownership. (Web) (Lobsters)</li> <li>Beyond ProgrammingLanguages (1979) (Lobsters)</li> <li>tree-sitter-graph - Construct graphs from parsed source code.</li> <li>Correct by Construction Language Implementations (2021) (Tweet)</li> <li>How do you write code in statically-typed functional programming languages (2021)</li> <li>LangSandbox - Project to illustrate how to build a programming language.</li> <li>Toward a Theory of Programming Language and Reasoning Assistant Design: Minimizing Cognitive Load (2021)</li> <li>Comparison of enumerations and similar features in different languages</li> <li>Static Analysis: An Introduction (2021)</li> <li>Static Analysis at GitHub (2021)</li> <li>Static Analysis at GitHub (2022)</li> <li>Most accessible programming language (2021)</li> <li>Ask HN: If you designed a new programming language, what would its features be? (2021)</li> <li>glot.io - Open source pastebin with runnable snippets and API. (Code)</li> <li>1001 Representations of Syntax with Binding (2021) (Reddit)</li> <li>Chigraph - Visual systems language for beginners compiled using LLVM. (Code)</li> <li>Which programming language is fastest? - Website that shows toy-program performance measurements for ~24 language implementations. (Code)</li> <li>What's your favorite GC-based language? (2021)</li> <li>Selecting a programming language can be a form of premature optimization (2021)</li> <li>Shawn Wang - Growing a Meta-Language (2021)</li> <li>Kindly Bent to Free Us (2019)</li> <li>Microsoft Power Fx - Low-code general purpose programming language based on spreadsheet-like formulas. (Article) (HN)</li> <li>Undefined Behavior deserves a better reputation (2021) (Lobsters)</li> <li>Runno - Helps you make runnable code examples that can be embedded in web pages. (Code)</li> <li>Pattern matching in concatenative programming languages (2009)</li> <li>Static Value-Flow Analysis Framework for Source Code</li> <li>Dynamic Languages Strike Back (2008)</li> <li>Are there any ML style languages with no runtime? (2021)</li> <li>Tao - Statically-typed functional programming language.</li> <li>Do we really need Undefined Behavior? (2021) (HN)</li> <li>Shepherd - Utility for applying code changes across many repositories.</li> <li>\"Incremental, zero-config Code Nav using stack graphs\" by Douglas Creager (2021) (Web)</li> <li>How I wrote my own \"proper\" programming language (2020)</li> <li>Awesome Program Analysis</li> <li>Code Generation for Higher Inductive Types (2018)</li> <li>Ask HN: How would a programming language look if designed by non-programmer (2021)</li> <li>Nice esoteric compilers (2021)</li> <li>A Brief Introduction to Esoteric Languages (2021) (Video)</li> <li>Awesome Alt Languages</li> <li>Go Static or Go Home (2015) - In the end, dynamic systems are simply less secure.</li> <li>Features of a dream programming language (2021) (HN)</li> <li>Ask HN: What is your favorite programming language and why? (2021)</li> <li>Programing Language Documentations</li> <li>Profile Guided Optimization without Profiles: A Machine Learning Approach (2021)</li> <li>Automated Code Optimization with E-Graphs (2021) (HN)</li> <li>Tencent Cloud Code Analysis (TCA) - Code comprehensive analysis platform, which includes three components: server, web and client.</li> <li>What you can learn by merely writing a programming language changelog (2022)</li> <li>SQRL - Safe, Stateful Rules Language for Event Streams.</li> <li>Rethinking errors, warnings, and lints (2022)</li> <li>C++ Concepts vs Rust Traits vs Haskell Typeclasses vs Swift Protocols - Conor Hoekstra - ACCU 2021 (Slides)</li> <li>Following the programming language evolution, and taking it personally (2022) (Lobsters)</li> <li>Destroy All Values: Designing Deinitialization in Programming Languages (2022)</li> <li>Why Static Languages Suffer From Complexity (2022) (Lobsters)</li> <li>In defense of complicated programming languages (2022) (HN)</li> <li>Bagel - Programming language designed for JavaScript programmers to write reactive UIs, using a paradigm where stateful procedures and pure functions are mutually exclusive categories. (Article) (Update) (Bagel Bites: Type Refinement)</li> <li>The complete guide to (external) Domain Specific Languages</li> <li>SAPP - Post Processor for Facebook Static Analysis Tools.</li> <li>Concise language to write an interpreter for? (2022)</li> <li>Awesome programming languages</li> <li>Have you found side-effects a problem by increasing complexity in your code bases? (2022)</li> <li>Graphene - Create and share beautiful code snippets. (Code)</li> <li>crie - Using a mix of other tools and libraries to create a dead simple meta-linter and formatter.</li> <li>CodeshiftCommunity - Community-owned global registry and documentation hub for codemods. (Code)</li> <li>Programming Language and compiler Benchmarks (Code)</li> <li>Benchmarks of different languages</li> <li>Kcov - Code coverage tester for compiled languages, Python and Bash.</li> <li>CS 152: Programming Languages Course (2022) (Code)</li> <li>Returning Values and Errors (2022) (HN) (Lobsters)</li> <li>flamegraph.com - Upload and Share Interactive Flamegraphs.</li> <li>So you want to design a programming language (2017) (HN)</li> <li>Esolang Park - Online visual debugger for esoteric languages. (Code) (HN)</li> <li>Practical Normalization by Evaluation for EDSLs</li> <li>Advanced Programming Languages</li> <li>complexity - Calculate an approximation of code complexity per file in a language-agnostic way.</li> <li>Hare - Systems programming language designed to be simple, stable, and robust. (Code)</li> <li>Why am I building a programming language in private? (2022) (HN)</li> <li>Eclectica - Unifies management of any language under one cohesive and minimalistic interface.</li> <li>ABI-Checker - Automate testing that two languages/compilers agree on ABIs for the purposes of.</li> <li>Gistit - Quick and easy code snippet sharing tool. (Web)</li> <li>Languages with native support for tables</li> <li>List of new budding programming languages and their interesting features (2022)</li> <li>Generics syntax in different languages (2022)</li> <li>Ask HN: Are you using actors in production? Why/Why not? (2022)</li> <li>A Typed Programming Language: The Semantics of Rank Polymorphism (2020) (Paper)</li> <li>OneLinerHub - Open source code library. (Code)</li> <li>Uniform Structured Syntax, Metaprogramming and Run-time Compilation</li> <li>Most interesting languages to learn (from)? (2022)</li> <li>Surprising Weak-Ref Implementations: Swift, Obj-C, C++, Rust, and Vale (2022)</li> <li>Programming Languages Design: Ultimate Bundle</li> <li>It-Depends - Tool to automatically build a dependency graph and Software Bill of Materials (SBOM) for packages and arbitrary source code repositories.</li> <li>treequery - Run Tree-sitter queries on source code.</li> <li>Awesome Codemods - Curated list of tools that can fix your code for you.</li> <li>Spoofax - Open-source language designer's workbench with everything you need for designing your next textual (domain-specific) programming language. (Code)</li> <li>Codestat.dev - Stats from 2M open-source repositories. (HN) (Code)</li> <li>Copybara - Tool for transforming and moving code between repositories. Used at Google.</li> <li>Ott - Tool for writing definitions of programming languages and calculi.</li> <li>PL Papers You Might Love Newsletter</li> <li>ogma - Scripting language focused on processing tabular data.</li> <li>massCode - Free and open source code snippets manager for developers. (Web)</li> <li>CodeImage - Create elegant screenshots of your source code. (Code) (Tweet)</li> <li>Course on Metaprogramming</li> <li>Germanium - Generate image from source code.</li> <li>10 papers that all PhD students in programming languages ought to know</li> <li>LanguageTool - Style and Grammar Checker for 25+ Languages.</li> <li>Compile time evaluation in Nim, Zig, Rust and C++ (2022) (Reddit) (HN)</li> <li>Prybar - Universal interpreter front-end. Same interface, same REPL, different languages.</li> <li>Copy-and-Patch Compilation: A fast compilation algorithm for high-level languages and bytecode (2020)</li> <li>Reple - \"Replay-based\" REPLs for compiled languages.</li> <li>Sphinx - Dynamically typed programming language that is inspired by Lua and Python, and implemented entirely in Rust. (HN)</li> <li>What's a good general-purpose programming language? (2022) (Reddit)</li> <li>Inform 7 - Programming language for creating interactive fiction, using natural language syntax. (HN) (OSS release post)</li> <li>Scopes - Retargetable programming language &amp; infrastructure.</li> <li>Scope Sets as a Pi\u00f1ata for Name Resolution (2021)</li> <li>Principled Ad-Hoc Polymorphism (2018)</li> <li>Langbot - Run code from many programming languages.</li> <li>Effekt - Research language with effect handlers and lightweight effect polymorphism. (Web)</li> <li>Worst Design Decisions You've Ever Seen in Programming Languages (2022)</li> <li>Exercism - Develop fluency in over 55 programming languages with our unique blend of learning, practice and mentoring. (Twitter) (GitHub)</li> <li>Starry Night - Syntax highlighting, like GitHub.</li> <li>Wrong by Default (2022)</li> <li>Code to Image Converter (Code)</li> <li>MLscript - Principal Type Inference for Object-Oriented Programming in a Boolean Algebra of Types.</li> <li>Can you have too many programming language features? (2022)</li> <li>Programming Languages and Theory of Computation</li> <li>Modern programming languages require generics (2022) (HN)</li> <li>Passerine - Small extensible programming language designed for concise expression with little code. (Lobsters)</li> <li>StackOverflow trends</li> <li>The appeal of bidirectional type-checking (2022) (Lobsters)</li> <li>A Pattern Language for the LIMITS Community (2022)</li> <li>Awesome low level programming languages</li> <li>Inko - Statically-typed, safe, object-oriented programming languages for writing concurrent programs.</li> <li>wastebin - Minimal pastebin shamelessly copied from bin. (Code)</li> <li>Well Done: A Sentinel Value (2013)</li> <li>Emerge - Code analysis tool to gather insights about source code structure, metrics, dependencies and complexity of software projects.</li> <li>What's a condition system and why do you want one? (2011) (Lobsters)</li> <li>Thoughts on infectious systems: async/await and pure (Lobsters)</li> <li>Jai vs Odin systems programming languages (Non-spicy takes!) (2022)</li> <li>Multimethods, Global Scope, and Monkey-Patching (2012)</li> <li>Almost Rules (2022) (Lobsters)</li> <li>Six Programming Languages I'd Like to See (2022) (Lobsters) (HN)</li> <li>Ask HN: What do you code when learning a new language/framework? (2022)</li> <li>Concatenation is composition (HN)</li> <li>Languages with Rust's eums</li> <li>Quicksort implemented in different languages</li> <li>Language Incubator - Learning compilers, interpreters, code generation, virtual machines, assemblers, JITs, etc.</li> <li>ipso - Functional scripting language.</li> <li>Ask HN: How to make a native GUI with a modern language? (2022)</li> <li>Scopes - Retargetable programming language &amp; infrastructure. (Lobsters)</li> <li>ASTGrep - Fast and easy tool for code searching, linting, rewriting at large scale. Written in Rust. (Web) (GitHub)</li> <li>Awesome Actor Model</li> <li>Roc - Language for making delightful software.</li> <li>KavaScript - Minimalistic dynamically-typed programming language for didactic purposes.</li> <li>Peacock | Bind Patterns (Lobsters)</li> <li>Jank - Clojure/LLVM/Gradual Typing language. (Code) (Lobsters)</li> <li>PLDB - Programming Language Database. (Code) (HN)</li> <li>Book recommendations after reading \"crafting interpreters\" (2022)</li> <li>Programming Language Research</li> <li>Acutis - Declarative, type-safe template language.</li> <li>ICFP Contest 2022 (Twitter)</li> <li>Language garden - Some toy programming language implementations, mostly implemented in OCaml.</li> <li>Prettify - Code beautification tool for formatting HTML, Liquid, JavaScript, TypeScript, CSS/SCSS and more. (Code)</li> <li>Odin - General-purpose programming language with distinct typing, built for high performance, modern systems, and built-in data-oriented data types. (Review)</li> <li>What would be your \u201cperfect\u201d programming language? (2022)</li> <li>Ask HN: What is the coding exercise you use to explore a new language? (2022)</li> <li>The Golden Age of PL Research (2022)</li> <li>Brown CS: Programming Languages Course (2012)</li> <li>Val - Research programming language to explore the concepts of mutable value semantics and generic programming for high-level systems programming. (Code)</li> <li>Program Analysis (an Appetizer) (2020)</li> <li>Useful lesser-used languages? (2022)</li> <li>SIGPLAN: Special Interest Group on Programming Languages (Code)</li> <li>Introduction to the Theory of Programming Languages (1991) (Lobsters)</li> <li>Code Language Converter - Convert code to other languages using AI.</li> <li>Melang - Script language of preemptive scheduling coroutine in single thread.</li> <li>Duo - Research language focused on the combination of subtyping, type inference and type-theoretic dualities.</li> <li>CodeGeeX - Open Multilingual Code Generation Model.</li> <li>Adventures in Dynamic Software, Visualisations, Creating a JVM Language, UI, and More (2022)</li> <li>CMSC 430: Design and Implementation of Programming Languages (2022) (HN)</li> <li>So you're using a weird language (2022) (HN)</li> <li>Technical exercises and experiments</li> <li>SCIP Code Intelligence Protocol - Language-agnostic protocol for indexing source code, which can be used to power code navigation functionality such as Go to definition, Find references, and Find implementations.</li> <li>codestrings - Extracts all the strings from your source code.</li> <li>The Hundred-Year Programming Language (2022)</li> <li>Simplified Piet interpreter written in Python</li> <li>Why is it hard to learn another programming language? (2022) (Lobsters)</li> <li>When to Use Memory Safe Languages (2022) (Lobsters)</li> <li>\"Stop Writing Dead Programs\" by Jack Rusher (Strange Loop 2022) (HN) (HN) (Lobsters)</li> <li>Syntax Design (HN) (Lobsters)</li> <li>Concatenative Programming: From Ivory to Metal (2017) (Lobsters)</li> <li>[What Operators Do You WISH Programming Languages Had? (2022)(https://www.reddit.com/r/ProgrammingLanguages/comments/ya87l1/what_operators_do_you_wish_programming_languages/)</li> <li>Tips on performance when building programming language in Rust (2022)</li> <li>Programming language comparison by reimplementing the same transit data app (HN)</li> <li>Which programming paradigm had the most impact on you as an engineer and why? (2022)</li> <li>System level language considerations (2022)</li> <li>Mica - Simple, human-friendly, embeddable scripting language.</li> <li>Om - Novel, maximally-simple concatenative language. (HN)</li> <li>Jakt - Memory-safe systems programming language.</li> <li>Dropcode - Simple and lightweight code snippet manager.</li> <li>Amber - Language for High-Level Programming with Self-Extension.</li> <li>Singeli - Domain-specific language for building SIMD algorithms with flexible abstractions and control over every instruction emitted.</li> <li>Designing a programming system/language to never break backwards compatibility while allowing the system to evolve</li> <li>Frank - Strict functional programming language with a bidirectional effect type system designed from the ground up around a novel variant of Plotkin and Pretnar's effect handler abstraction.</li> <li>Malbolge - Self-modifying programming language that is made to be deliberately difficult to program in and close to impossible to read.</li> <li>P4 Compiler</li> <li>Elvish - Expressive Programming Language + Versatile Interactive Shell.</li> <li>The Cost of Exception Handling (2022) (HN)</li> <li>go.vm - Simple virtual machine - compiler &amp; interpreter - written in Go.</li> <li>Millet - ML-like pure functional language that can be used as a template for creating your own language.</li> <li>Certified Interpreter for ML with Structural Polymorphism</li> <li>Tamarin - Fun and pragmatic scripting language written in Go. May be used as a CLI or embedded as a library.</li> <li>Plunder - Programming model that makes it possible to have programs that \"run forever\", eliminating the need for a separate storage abstraction.</li> <li>Buzz - Strongly typed scripting language written in Zig. (HN)</li> <li>Little Languages Are The Future Of Programming (2022) (Lobsters) (HN)</li> <li>AutoTransform - Framework for large-scale, automated code modification in a production environment.</li> <li>(Re)writing an interpreter in Rust (2022) (HN)</li> <li>languagetool-code-comments - Integrates the LanguageTool API to parse, spell check, and correct the grammar of your code comments.</li> <li>Eclipse OMR - Cross platform components for building reliable, high performance language runtimes.</li> <li>Simple Refinement of Anonymous Sum Types in Pattern Matches (2022)</li> <li>Writing Interpreters in Rust: a Guide (HN)</li> <li>Rune - Programming language developed to test ideas for improving security and efficiency. (HN)</li> <li>A review of elementary data types : numbers and strings (2022)</li> <li>Need for speed: static analysis version (2022)</li> <li>Higher-orderness is first-order interaction (2022)</li> <li>Building an interpreter for my programming language with ChatGPT (2022) (HN)</li> <li>Create a programming language in ChatGPT</li> <li>DreamBerd - Perfect programming language.</li> <li>Right and wrong: ten choices in language design (2022) (Lobsters)</li> <li>Noulith - Pareto-optimal choice for quick-and-dirty scripts. (HN) (Lobsters)</li> <li>CSpell - Spell Checker for Code.</li> <li>gprof2dot - Converts profiling output to a dot graph.</li> <li>Programming Languages: Application and Interpretation (HN)</li> <li>Vyxal - Golfing language that has aspects of traditional programming languages - terse, elegant, readable.</li> <li>Garnet: The Generics Problem (Lobsters)</li> <li>Coroutines As Threads (2018)</li> <li>Ten influential programming languages (2020) (HN)</li> <li>Jonathan Blow - Programming Language Q&amp;A (2022)</li> <li>SantaCoder: New 1.1B code model for generation and infilling</li> <li>Language design: providing guarantees (Rust) vs communicating intent (Raku) (Reddit)</li> <li>Cyber - Fast, efficient, and concurrent scripting language. (Web) (Lobsters) (HN)</li> <li>Compilation Speed discussed (2022)</li> <li>Vox - Small and fast JIT/AOT compiler with zero dependencies.</li> <li>APScript - Speedy interpreter for the AP Computer Science Principles pseudocode language built in Rust.</li> <li>Tomas Petricek's teaching on programming language design</li> <li>Anzen - General purpose programming language that aims to make assignments easier to understand and manipulate.</li> <li>Cara - Programming language aiming to be pleasant to use and maintain while staying safe and dependable.</li> <li>What features would you want in a new programming language? (2023)</li> <li>Microfeatures I'd like to see in more languages (2023) (HN) (Lobsters) (Reddit)</li> <li>Vel - Language for verified low-level software.</li> <li>Compiled and Interpreted Languages: Two Ways of Saying Tomato (2023)</li> <li>Faster virtual machines: Speeding up programming language execution (2023) (HN)</li> <li>Type Checking If Expressions (2023)</li> <li>Adding For Loops to an Interpreter (2023) (Lobsters)</li> <li>Squirrel - High level imperative, object-oriented programming language. (Code)</li> <li>What does it mean to have an \"algebraic\" type system? (2023)</li> <li>Troupe - Programming language based on the actor model for concurrent and distributed programming that provides dynamic information flow control.</li> <li>Sylver - Language agnostic source code exploration and analysis. (Lobsters)</li> <li>duckscript - Simple, extendable and embeddable scripting language.</li> <li>rtx - Polyglot runtime manager. (Lobsters)</li> <li>Garble - Turing-Incomplete Programming Language for Multi-Party Computation with Garbled Circuits.</li> <li>Inpla: Interaction nets as a programming language</li> <li>Bog - Small, strongly typed, embeddable language. (HN)</li> <li>Aocla - Advent of Code toy language. (Lobsters)</li> <li>FLAME: A small language model for spreadsheet formulas (2023) (HN)</li> <li>UwU - Next generation esoteric language.</li> <li>Compis - Contemporary systems programming language in the spirit of C.</li> <li>Volar.js - Embedded Language Tooling Framework. (Code) (Article)</li> <li>A Wishlist of Zero-Cost Abstractions (2017)</li> <li>Tiger - Small imperative language that I'm writing while reading the Modern Compiler Implementation in ML.</li> <li>Free Variables and Free Effects</li> <li>The unsafe language doom principle (2023) (Lobsters)</li> <li>Implementing Co, a Small Language With Coroutines #3: Adding Coroutines (2023) (Lobsters)</li> <li>Coping with nontermination: some thoughts on stopping loops (2023)</li> <li>Why Aren't Programming Language Specifications Comprehensive? (2023) (Lobsters)</li> <li>C-rusted: The Advantages of Rust, in C, without the Disadvantages (2023) (Lobsters) (HN)</li> <li>voxu - Strongly and statically typed, memory-efficient functional programming language.</li> <li>Cotton - Simple functional programming language built with Rust.</li> <li>Lobsters: Killer libraries (2023) (HN)</li> <li>The Usability of Advanced Type Systems: Rust as a Case Study (2023) (HN)</li> <li>Writing high-performance clients for TigerBeetle (2023)</li> <li>Give Me Flexibility and Give Me Types (2023)</li> <li>Stdout Buffering (2016)</li> <li>Architecting Asynchronous Schedulers (2020)</li> <li>Adventures in REPL Implementation (2023) (HN)</li> <li>Letlang - Functional language with a powerful type system.</li> <li>Codeverter - Convert code to your programming language of choice. (Code)</li> <li>What conlangs should be \"required reading\" for someone thinking about making their own? And why? (2023)</li> <li>Alumina - Imperative, general-purpose, statically typed, compiled system programming language.</li> <li>Advanced Topics in Programming Languages (2023)</li> <li>What are the issues with algebraic effects? (2023)</li> <li>Mamba - Compiles to Python.</li> <li>What features have you seen in a PL that helped encourage code re-use? (2023)</li> <li>Decreasing the number of memory accesses (2023) (HN)</li> <li>Type system of Fortnite's Verse language (2023) (HN)</li> <li>proto - Multi-language version and dependency manager.</li> <li>AI Code Translator - Use AI to translate code from one language to another.</li> <li>Admissibility graphs</li> <li>Can PL theory make you a better software engineer? (2023)</li> <li>Designing a Programming Language to Speedrun Advent of Code (2023)</li> </ul>"},{"location":"notes/programming-languages/assembly/","title":"Assembly","text":"<p>Original content by: Nikita</p> <p>Gentle Introduction to Assembly Language Programming is nice.</p>"},{"location":"notes/programming-languages/assembly/#links","title":"Links","text":"<ul> <li>Assembly Language for Beginners</li> <li>Programmed Introduction to MIPS Assembly Language</li> <li>MIPS Assembly Programming</li> <li>Assembly Language Programming: Still Relevant Today (2015) (HN)</li> <li>Davis - x86 assembly debugger. (Code)</li> <li>Ask HN: What's the best resource for learning modern x64 assembly? (2020)</li> <li>ARM GCC Inline Assembler Cookbook</li> <li>Getting started with bare-metal assembly (2020) (HN)</li> <li>Compiling to Assembly from Scratch (2020) (Code) (In Haskell) (Haskell Code)</li> <li>Interactive shell of assembly language(X86/X64) based on unicorn and keystone</li> <li>Let's Learn x86-64 Assembly! (2020) (HN)</li> <li>int 80h - Learn Assembly using OpenBSD as base OS.</li> <li>Assembly\u2019s Perspective (2020)</li> <li>ASM Swift - Playground for learning Assembly language through Swift.</li> <li>Little Computer 3 - Learn how to program in assembly on the web. (Code)</li> <li>How x86_64 addresses memory (2020)</li> <li>Hello \"Hello world!\" (2020) (Lobsters)</li> <li>Art of Assembly Language</li> <li>8086 microcode disassembled (2020) (HN)</li> <li>Learn Assembly by Writing Entirely Too Many Brainfuck Compilers in Rust (2020)</li> <li>Wrote some ARM (2019)</li> <li>Assembly Tutorials - Learn Z80 Assembly Programming.</li> <li>ARM and Thumb-2 Instruction Set Quick Reference</li> <li>Advanced 6502 Assembly Programming for the Apple II (2020) (Web)</li> <li>ARM Cortex-M33 Instruction Tracing Without a Debugger (2020)</li> <li>Apple M1 Assembly Language Hello World (2021) (HN)</li> <li>AMIE - Minimalist Instruction Extender for the ARM architecture and IDA Pro.</li> <li>PLASMA - Medium level programming language targeting the 8-bit 6502 processor.</li> <li>Babbage was a true genius (2006) (HN)</li> <li>Why no one should use the AT&amp;T syntax ever, for any reason, under any circumstances (2021) (Lobsters)</li> <li>Learning to Read x86 Assembly Language (2016)</li> <li>Wiz - High-level assembly language for writing homebrew software for retro console platforms.</li> <li>How do computers work? (2021)</li> <li>How to Read Assembly Language (2021) (HN)</li> <li>Top 10 Craziest Assembly Language Instructions (2021)</li> <li>A fundamental introduction to x86 assembly programming</li> <li>How to Read ARM64 Assembly Language (2021)</li> <li>Easy 6502 - One-stop accessible tutorial on 6502 assembly language programming. (Code)</li> <li>swiftdasm - arm64 disassembler written in Swift.</li> <li>Haruspex - Exploration of x86-64 ISA using speculative execution.</li> <li>Avoiding instruction cache misses (2019)</li> <li>Assembly vs. intrinsics (2014) (HN)</li> <li>How many x86 instructions are there? (2016) (HN)</li> <li>X86 Opcode and Instruction Reference (Code)</li> <li>Branch predictor: How many \"if\"s are too many? Including x86 and M1 benchmarks! (2021) (Tweet)</li> <li>Don't Use Inline Assembly</li> <li>Commodore\u2019s Assemblers: Part 1: MOS Cross-Assembler</li> <li>Code in ARM Assembly: Registers explained (2021) (HN)</li> <li>Code in ARM Assembly: Working with pointers (2021)</li> <li>Writing ARM64 Code for Apple Platforms (HN)</li> <li>Code in ARM Assembly: Conditional Loops (2021)</li> <li>Programming with 64-Bit ARM Assembly Language (2020) (Code) (HN)</li> <li>Down to the silicon: how the Z80's registers are implemented (2014)</li> <li>Assembly Language and Computer Architecture (2018)</li> <li>Reversing for dummies - x86 assembly and C code (2021)</li> <li>Uxn - 8-bit virtual computer inspired by forth-machines, capable of running simple tools and games programmable in its own unique assembly language. (Tutorial) (Tweet) (Awesome) (Tweet) (Web) (Learn Uxn) (HN)</li> <li>Three fundamental flaws of SIMD (2021)</li> <li>iced - Blazing fast and correct x86/x64 disassembler, assembler, decoder, encoder for .NET, Rust, Python, JavaScript.</li> <li>All about Global Offset Table (2021)</li> <li>Generating a QR code with only ARM Assembly (HN)</li> <li>Arm AArch64 Adds Memcpy() Instructions (2021) (HN)</li> <li>Sail - Language for describing the instruction-set architecture (ISA) semantics of processors. (Code)</li> <li>Isla - Symbolic execution tool for Sail ISA specifications.</li> <li>Art of Assembly Language Programming and HLA by Randall Hyde</li> <li>Zen of Assembly Language (1990)</li> <li>x86 assembly doesn\u2019t have to be scary (2018) (HN)</li> <li>Minias - Mini x86-64 assembler for fun and learning. (HN)</li> <li>Binja Arm64 Disassembler</li> <li>Rappel - Linux-based assembly REPL for x86, amd64, armv7, and armv8.</li> <li>opv86 - Opcode / Instruction finder for x86_64. (Code)</li> <li>Comparing SIMD on x86-64 and arm64 (2021)</li> <li>Cheat sheet for x86-64 Unix systems programming</li> <li>Famicom Party: Making NES Games in Assembly (HN)</li> <li>ELF Science Part 1 (2021)</li> <li>BLASFEO - Basic linear algebra subroutines for embedded optimization.</li> <li>NASM - Cross-platform x86 assembler with an Intel-like syntax. (Web)</li> <li>ASMREPL - REPL for x86 assembly language. (HN)</li> <li>The Fastest FizzBuzz Implementation (2021) (HN) (Tweet)</li> <li>High throughput Fizz Buzz (Tweet)</li> <li>Fast CSV Processing with SIMD (2021) (HN)</li> <li>Program analysis for machine code</li> <li>asmase - REPL for assembly language using an LLVM backend.</li> <li>Writing a self-modifying x86 factorial program (2021) (HN)</li> <li>NASM Assembly Language Tutorials (HN)</li> <li>Jumping into the middle of an instruction is not as strange as it sounds (2022)</li> <li>strop Stochastically generates assembly language programs that compute a given function.</li> <li>x86-64 - Runtime code generation for x86 64 bit machine code.</li> <li>The Art of Assembly Language Programming (1996) (HN)</li> <li>pclmulqdq Tricks (2020)</li> <li>Guide to CPUs and assembly</li> <li>Assembly instructions distribution (2022) (Lobsters)</li> <li>elf.js - Project to learn ELF format.</li> <li>The curious tale of a fake Carrier.app (2022)</li> <li>Some Assembly Required - Approachable introduction to assembly</li> <li>Creating a language using only assembly language (Lobsters)</li> <li>Intel Microcode Decryptor (HN) (Code) (HN)</li> <li>Understanding the X64 Code Models (2012)</li> <li>Stack frame layout on x86-64 (2022)</li> <li>Apple AMX instruction set (M1/M2 matrix coprocessor) (HN)</li> <li>Stratified Synthesis: Automatically Learning the x86-64 Instruction Set (2016)</li> <li>Contrasting Intel AMX and Apple AMX (2022)</li> <li>Undefined Isn\u2019t Unpredictable (2022)</li> <li>Inverting a binary tree using x64 assembly (2022) (HN)</li> <li>asmcfg - Assembly control flow graph/basic block visualizer for the web.</li> <li>Gentle Introduction to Assembly Language Programming</li> <li>CEMU - Cheap EMUlator: lightweight multi-architecture assembly playground.</li> <li>Intro to x86 Assembly Language - YouTube (Code)</li> <li>x86 is Turing-complete with no registers (2014)</li> <li>yaxpeax-eval - Batch eval tool for machine code. eval() but for asm.</li> <li>The faker's guide to reading (x86) assembly language (2023) (HN)</li> <li>Simple examples of Assembly code for the Apple Silicon (M1) CPU</li> <li>Small VMs &amp; Coroutines (2023) (Lobsters)</li> <li>Easy 6502, an assembly language tutorial (2015) (Code)</li> <li>ARM Assembly: \u221e Ways to Return (2017)</li> <li>Famicom Party - Making NES Games in Assembly</li> <li>Disambiguating Arm, Arm ARM, Armv9, ARM9, ARM64, Aarch64, A64, A78 (2023) (HN)</li> <li>The Basics of Arm64 Assembly (2023) (HN)</li> <li>ASM. - Extensible Python framework for building a fast, zero-copy assembler.</li> <li>scare - Multi-arch assembly REPL and emulator for your command line.</li> <li>Even if you can't write assembly, you can read disassembly (HN)</li> </ul>"},{"location":"notes/programming-languages/bash/","title":"Bash","text":"<p>Original content by: Nikita</p> <p>It's useful to use ShellCheck to check any shell code you write.</p>"},{"location":"notes/programming-languages/bash/#notes","title":"Notes","text":"<ul> <li>The proper she-bang for Bash is <code>#!/usr/bin/env bash</code>.</li> </ul>"},{"location":"notes/programming-languages/bash/#code","title":"Code","text":"<pre><code># Check if command is in PATH\ncheckDep() {\npath=`command -v ${1}` &amp;&amp; echo \"${1} found at ${path}\" || { echo \"${1} not found\" &gt;&amp;2 ; exit 1; }\n}\n</code></pre> <pre><code># Get output of command. https://www.cyberciti.biz/faq/unix-linux-bsd-appleosx-bash-assign-variable-command-output/\n# i.e. save output of date to var now\nnow=$(date)\n</code></pre> <pre><code>File testing\n\n![](https://i.imgur.com/QGkHbPm.png)\n</code></pre> <pre><code># Pipe output to file.\n# i.e. pipe output of ls to output.txt\nls &gt; output.txt\n</code></pre> <pre><code># Check if no arguments passed\nif [ $# -eq 0 ] then ... fi\n</code></pre> <pre><code># Check if file does not exist\n# Putting ! before makes it a not statement. Spaces before and after [] are important.\nif [ ! -f ~/Desktop/file.txt ]; then\necho \"File not found!\"\nfi\n</code></pre> <pre><code># Source vs ./\n# Runs the script as an executable file, launching a new shell to run it\n./script\n\n# Reads and executes commands from filename in the current shell environment\nsource script\n</code></pre> <pre><code># need to wrap the cd command inside () to run it in scope of the cd\n# i.e. pod install will be run inside ios dir\n(cd ios &amp;&amp; pod install)\n</code></pre>"},{"location":"notes/programming-languages/bash/#links","title":"Links","text":"<ul> <li>Parameter expansion</li> <li>Defensive BASH Programming</li> <li>Safe ways to do things in Bash (HN)</li> <li>Pure Bash Bible - Collection of pure bash alternatives to external processes. (HN) (HN)</li> <li>Bash Infinity - Modern boilerplate / framework / standard library for Bash.</li> <li>Funky - Takes shell functions to the next level by making them easier to define, more flexible, and more interactive.</li> <li>create-bash-script - Bash script designed to create other bash scripts with argument parsing.</li> <li>Bash-LSP - Language server for Bash. (HN)</li> <li>Bash Reference Manual</li> <li>Bash Guide (Lobsters)</li> <li>How To Automate Basic Development Tasks with Bash</li> <li>Mini Gitbook for a presentation about BASH (Code)</li> <li>[Bash \\(\\* and \\(@ (2017)](https://eklitzke.org/bash-\\)%2A-and-\\)@) (HN)</li> <li>Understanding Bash: Elements of Programming (2018) (HN)</li> <li>Bash tricks - Simple bash tricks which will make your life easier. (Reddit)</li> <li>Anybody can write good bash (with a little effort) (2020) (Lobsters)</li> <li>Bash Quick References</li> <li>critic.sh - Dead simple testing framework for Bash with coverage.</li> <li>Bash Hackers Wiki (HN)</li> <li>Bats - Bash Automated Testing System.</li> <li>HN: Renaming files with mv without typing the name two times</li> <li>The first two statements of your BASH script should be.. (2020) (Lobsters)</li> <li>Use Bash Strict Mode (Unless You Love Debugging)</li> <li>Bash code</li> <li>Some Relatively Obscure Bash Tips (2020) (HN)</li> <li>A Bash Cheat Sheet: Top 25 most-used commands, and how to create custom commands (2020)</li> <li>Bash Env Variable Defaults</li> <li>Using Bash traps in your scripts (2020)</li> <li>Help message for shell scripts (2020) (HN) (Lobsters)</li> <li>Supercharge Your Bash History (2020) (Lobsters)</li> <li>Import - Simple and Fast Module System for Bash and Other Unix Shells. (HN)</li> <li>Intelligent Bash (ibash)</li> <li>Functional programming in bash (Slides)</li> <li>Bash Pitfalls (Lobsters)</li> <li>argbash - Bash argument parsing code generator. (HN) (HN)</li> <li>Bash Bracket Cheat Sheet</li> <li>Bash Error Handling (HN)</li> <li>ctypes.sh - Foreign function interface for bash. (HN)</li> <li>DevHints Bash Cheat Sheet</li> <li>sbang - Run scripts with very long shebang lines. (Lobsters)</li> <li>Oh My Bash - Open source, community-driven framework for managing your bash configuration.</li> <li>An Awful Edge Case in Bash's set -e (2020)</li> <li>Variant - Turn your bash scripts into a modern, single-executable CLI app.</li> <li>Even faster bash startup (2020)</li> <li>How To Use Bash Parameter Substitution Like A Pro (2020)</li> <li>Introduction to Bash Scripting Book</li> <li>Bash Snippets - Collection of small bash scripts for heavy terminal users with no dependencies.</li> <li>Minimal safe Bash script template (2020) (Lobsters) (HN)</li> <li>Bash 5.1 (HN)</li> <li>Batsh - Language that compiles to Bash and Windows Batch. (Code)</li> <li>Bash HTTP monitoring dashboard</li> <li>Parallel bash - Parallel processing of commands in pure bash along with the support of functions.</li> <li>Learn Bash in 27 minutes</li> <li>Better BASHing Through Technology (2020)</li> <li>bashful - Use a yaml file to stitch together commands and bash snippets and run them with a bit of style.</li> <li>bash_unit - Bash unit testing.</li> <li>Elegant bash conditionals (2021) (Lobsters)</li> <li>Bash lambda - Anonymous functions and FP stuff for bash.</li> <li>How to navigate directories faster with bash (2015) (HN)</li> <li>Your <code>~/.bashrc</code> doesn't have to be a mess (2021) (Lobsters)</li> <li>Bash Function Names Can Be Almost Anything (2021) (HN)</li> <li>Writing a Bash Builtin in C to Parse INI Configs (2021) (Lobsters)</li> <li>Bashly - Create beautiful bash scripts from simple YAML configuration. (HN) (Docs)</li> <li>tree-sitter-bash - Bash grammar for tree-sitter.</li> <li>Bash Boilerplate - Collection of Bash scripts for creating safe and useful command line programs.</li> <li>Bash-TPL - Smart, lightweight shell script templating engine, written in Bash.</li> <li>Bash functions are better than I thought (2021) (Reddit) (HN)</li> <li>bash-completion - Programmable completion functions for bash.</li> <li>Bash patterns I use weekly (HN)</li> <li>How to write idempotent Bash scripts (2019) (HN) (Lobsters)</li> <li>Mastering Bash and Terminal (2017) (HN)</li> <li>bish - Language that compiles to Bash. Shell scripting with a modern feel.</li> <li>Sherver - Pure Bash lightweight web server. (HN)</li> <li>Modern Bash (Zsh) Scripting (Lobsters)</li> <li>NL2Bash: A Corpus and Semantic Parser for Natural Language Interface to the Linux Operating System (2018) (Code)</li> <li>Ask HN: Let's build Check style for Bash? (2022)</li> <li>Replicating Bash Argument Splitting (2021)</li> <li>Creating a bash completion script (2018) (HN)</li> <li>5 Modern Bash Scripting Techniques That Only A Few Programmers Know (2022)</li> <li>bpkg - Lightweight bash package manager. (Web)</li> <li>Bash One liners - Collection of handy Bash One-Liners and terminal tricks. (HN)</li> <li>CLI argument parser for Bash scripts and functions</li> <li>Type-ish - Runtime type checker for bash functions, implemented entirely in bash.</li> <li>Bash, Pipes, &amp; Socket SDK (2022)</li> <li>Vercel Bash - Bash Runtime for Vercel serverless functions.</li> <li>Beautysh - Bash beautifier for the masses.</li> <li>Bash 5.2 released (Lobsters)</li> <li>Why doesn't Bash's <code>set -e</code> do what I expected? (HN)</li> <li>Bash Style Guide</li> <li>bashew - Bash script micro-framework - from small stand-alone script to complex projects with CI/CD and testing.</li> <li>Using ChatGPT to make Bash palatable (2022)</li> <li>GPT-3 Powered Shell (2022) (HN) (Code)</li> <li>Bash retry function with exponential backoff (HN)</li> </ul>"},{"location":"notes/programming-languages/language-server-protocol/","title":"Language Server Protocol","text":"<p>Original content by: Nikita</p> <p>Langoustine with its VSCode extension seem nice for writing new LSPs.</p>"},{"location":"notes/programming-languages/language-server-protocol/#links","title":"Links","text":"<ul> <li>A LSP client maintainer's view of the LSP protocol (2019)</li> <li>lsp-types - Types for communicating with a language server.</li> <li>Kryzystof Cieslak - LSP: the magic behind your IDE (2019)</li> <li>lsp-server - Language server scaffold exposing a crossbeam-channel API.</li> <li>LSIF development and testing utilities</li> <li>LSIF protocol utilities for Go</li> <li>lsp-test - Functional testing framework for Language Server Protocol servers.</li> <li>algocodesearch - Index symbols from a language server (LSP), for code search.</li> <li>LSIF.dev - Community-driven source of knowledge for Language Server Index Format implementations.</li> <li>Language Server Manager (LSM) - Aims to be a simple and cross platform installation manager for Language Server.</li> <li>lspower - Rust library for the Language Server Protocol (LSP).</li> <li>vscode-json-languageservice - JSON language service extracted from VSCode to be reused, e.g in the Monaco editor.</li> <li>Minimalistic language server (LSP) implementation</li> <li>null-ls.nvim - Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.</li> <li>efm-langserver - General purpose Language Server.</li> <li>LanguageClient - Language Server Protocol (LSP) client for Swift.</li> <li>A simple tool kit helping you create language server with Rust (2022)</li> <li>Boilerplate for a rust language server powered by tower-lsp</li> <li>pygls - Pythonic generic implementation of the Language Server Protocol.</li> <li>Linol - Wrapper around the OCaml <code>lsp</code> library to make it easier to write LSP servers.</li> <li>Why LSP? (2022) (HN)</li> <li>Monorepo of packages related to LSP</li> <li>Minimal browser-hosted WASM demo for tower-lsp</li> <li>LSPService - Use local LSP servers via WebSockets.</li> <li>Langoustine VS Code extension - VS code extension intended for people interested in writing Language Servers.</li> <li>Langoustine - Write Language Servers in Scala 3.</li> <li>Minimal browser-hosted WASM demo for tower-lsp</li> <li>FFI Navigator</li> <li>Embedded Language Tools based on Volar Framework</li> <li>Multi LSP Proxy - LSP proxy to multiple language servers.</li> <li>Language Server implementation for SQL written in Rust</li> <li>Language Server Index Format (LSIF) - Define an index format for Language Servers.</li> </ul>"},{"location":"notes/programming-languages/lua/","title":"Lua","text":"<p>Original content by: Nikita</p> <p>Fennel is interesting.</p>"},{"location":"notes/programming-languages/lua/#notes","title":"Notes","text":"<ul> <li>Lua was created explicitly to be an embedded scripting language. It's evolution has very tightly focused on that usage, and that continues to be the most common way it is used. It's language as library, a small, pure ANSI C library with no external dependencies. It's easy to include in a project and extend, while remaining a powerful, expressive language that performs well. It's fantastic for that purpose.</li> <li>Lua is a language I really want to love. I like the emphasis on simplicity and minimalism, and the Scheme-like semantics, which mix imperative and functional styles, really hits a sweet spot IMO. LuaJIT is a crazy impressive feat of software engineering. However, there are some specific issues which hold Lua back IMO. First, as LuaJIT author Mike Pall famously noted, the Lua authors constantly break compatibility between releases. Lua is really several different, incompatible languages (Lua 5.1, 5.2, etc). LuaJIT is still at Lua 5.1, IIRC. Second, there are a bunch of minor nitpicks (1-based-indexing, anyone?) which turn off a bunch of people. Lastly, because Lua is so minimal and focused on portability, people end up reimplementing their own abstractions (such as object systems) from scratch, further fracturing the ecosystem. I think there's a space for a new project, which takes LuaJIT as a starting point and addresses some of the issues I described. It would also be great if this hypothetical new language had better support for Unicode and concurrency.</li> </ul>"},{"location":"notes/programming-languages/lua/#links","title":"Links","text":"<ul> <li>Luau - Fast, small, safe, gradually typed embeddable scripting language derived from Lua. (Code) (HN)</li> <li>Luacheck - Tool for linting and static analysis of Lua code.</li> <li>Fennel - Programming language that brings together the speed, simplicity, and reach of Lua with the flexibility of a lisp syntax and macro system. (Code) (Rationale) (Lobsters) (HN) (FennelConf) (Fennel: The Practical Lisp)</li> <li>rlua - High level bindings between Rust and Lua.</li> <li>How to Lua and C - a short novel (2018)</li> <li>Code Formatter for Lua - Pretty-printer for Lua code, written in TypeScript and deeply inspired by prettier.</li> <li>Lua VM in pure Go</li> <li>GopherLua - VM and compiler for Lua in Go.</li> <li>Awesome Lua</li> <li>Awesome Lua 2</li> <li>Embedding Lua Tutorial</li> <li>Lunatic Python - Two-way bridge between Python and Lua.</li> <li>Interesting things about the Lua interpreter (2020)</li> <li>Interactive Lua development with Fennel (2018) (Lobsters)</li> <li>LuaJIT - Just-In-Time (JIT) compiler for the Lua programming language. (Web)</li> <li>LuaJIT Bytecode Optimizations</li> <li>Lua in Rust - Pure Rust implementation of Lua compiler.</li> <li>Typed Lua - Optional Type System for Lua.</li> <li>Teal - Compiler for Teal, a typed dialect of Lua.</li> <li>pprint.lua - Lua pretty printer.</li> <li>Using Lua As A Serialization Format (2020) (HN) (Lobsters)</li> <li>Lua Integration (2020)</li> <li>LuaJIT Language Toolkit - Implementation of the Lua programming language written in Lua itself.</li> <li>Antifennel - Turn Lua code into Fennel code.</li> <li>HN: Lua 5.4.0 (2020)</li> <li>Languages that compile to Lua</li> <li>Making the Fennel compiler self-hosting with another compiler (2020)</li> <li>How to Plan a Luau: Augmenting Lua\u2019s Syntax With Types (2020) (HN)</li> <li>Croissant - Lua REPL and debugger implemented in Lua.</li> <li>Fengari - Lua for the Browser. (Web) (HN)</li> <li>Lua Style Guide</li> <li>busted - Elegant Lua unit testing.</li> <li>RxLua - Reactive Extensions for Lua.</li> <li>LTUI - Cross-platform terminal ui library based on Lua.</li> <li>Raymarching with Fennel and L\u00d6VE (2020)</li> <li>Moonshine - Lightweight Lua VM for the browser.</li> <li>A Look at the Design of Lua (2018) (HN)</li> <li>lua-fsm - Simple finite-state machine implementation for Lua.</li> <li>plenary.nvim - All the lua functions I don't want to write twice.</li> <li>LuaUnit - Popular unit-testing framework for Lua, with an interface typical of xUnit libraries.</li> <li>LuaFormatter - Reformats your Lua source code.</li> <li>Heart - High performance Lua web server with a simple, powerful API.</li> <li>Lua, a misunderstood language (2021) (Lobsters) (HN) (HN)</li> <li>Lua and Python (2020) (HN) (Lobsters)</li> <li>luapower - LuaJIT distribution. (GitHub)</li> <li>Penlight - Useful pure Lua modules, focusing on input data handling, functional programming and OS path management.</li> <li>StyLua - Opinionated Lua code formatter.</li> <li>Full Moon - Lossless Lua 5.1 parser.</li> <li>Ravi - Dialect of Lua, featuring limited optional static typing, JIT and AOT compilers. (Web)</li> <li>LuaJIT compiler explorer (Code)</li> <li>LadyLua - Batteries-included static Lua 5.1 interpreter. (HN)</li> <li>TypeScriptToLua - Write Lua with TypeScript. (Web)</li> <li>debugger.lua - Simple, embedabble CLI debugger for Lua.</li> <li>Terra - Low-level system programming language meta-programmed from Lua. (HN) (Code)</li> <li>Lua Language Server</li> <li>Lua Patterns Viewer - Tool for inspecting, analyzing and learning Lua patterns. (Code)</li> <li>liter - Powerful Luau library for enhanced Rust-like iterators.</li> <li>lua-lru - LRU cache in Lua.</li> <li>utf8.lua - Pure Lua 5.3 regex library.</li> <li>Lua-QuickCheck - Property based testing in Lua, inspired by the original QuickCheck.</li> <li>MoonScript - Language that compiles to Lua. (Code)</li> <li>Lua Code</li> <li>Concurrent LUA Executor - Concurrent LUA executor that is designed to keep running a same (but updateable) set of scripts over a long period of time.</li> <li>Zua - Implementation of Lua 5.1 in Zig, for learning purposes.</li> <li>lua-resty-lrucache - Lua-land LRU Cache based on LuaJIT FFI.</li> <li>Python and Lua (2019) (HN)</li> <li>Lua Functional - High-performance functional programming library for Lua designed with LuaJIT's trace compiler in mind. (Docs)</li> <li>LuaJIT Unix syscall FFI</li> <li>Hematita Da Lua - Memory safe Lua interpreter.</li> <li>LuaJIT Garbage Collector Design Doc</li> <li>f-strings - String interpolation for Lua.</li> <li>Lua Filters - Collection of lua filters for pandoc.</li> <li>StackTracePlus - Provides enhanced stack traces for Lua.</li> <li>Teliva - Fork of Lua 5.1 to encourage end-user programming. (HN)</li> <li>checks - Runtime argument type checking API for Lua.</li> <li>Lua Async Await - Async Await in 90 lines of code.</li> <li>luastatic - Build a standalone executable from a Lua program.</li> <li>Links on how Lua works behind the scenes</li> <li>Lua Finite State Machine - Finite state machine lua micro framework.</li> <li>lua2c - Converts Lua 5.1 source code to C code.</li> <li>Lua in Rust - Lua programming language, implemented in Rust.</li> <li>Lua: Good, bad, and ugly parts (2012) (HN)</li> <li>Luerl - Implementation of Lua in Erlang. (HN)</li> <li>Writing a minimal Lua implementation with a virtual machine from scratch in Rust (2021) (Lobsters) (Code) (HN)</li> <li>lua-ts - TypeScript implementation of minimal Lua.</li> <li>lua-yaml - LUA YAML parser.</li> <li>JSON.lua - JSON encoder/decoder.</li> <li>lua-feels - Lua REPL that gives you a feel for its internals.</li> <li>Lua in 100 Seconds (2022)</li> <li>Fullmoon - Fast and minimalistic web framework based on Redbean web server.</li> <li>lua-pb - Lua Protocol Buffers.</li> <li>Catwell's Lua playground - Store the various Open Source tools, algorithms and libraries I write in Lua.</li> <li>Luar - Lua interpreter / JIT compiler.</li> <li>Lua Devirtualization (2022) (HN)</li> <li>luna - Node.js bindings to Lua.</li> <li>Why Python is more popular than Lua (2022)</li> <li>NattLua - Superset of LuaJIT that adds a structural typesystem.</li> <li>Luar - Lua reflection bindings for Go.</li> <li>RapidJSON bindings for Lua</li> <li>GoLua - Lua compiler / runtime in Go.</li> <li>WebAssembly Lua - Write and compile WebAssembly code with Lua.</li> <li>binser - Customizable Lua Serializer.</li> <li>JSON.lua - Lightweight JSON library for Lua.</li> <li>Lua HTTP - HTTP Library for Lua. Supports HTTP(S) 1.0, 1.1 and 2.0; client and server.</li> <li>LOOM - Easier to read LuaJIT dumps.</li> <li>wasm2lua - Converting WASM into Lua.</li> <li>lua.go - Toy Lua 5.3 implementation written in Go.</li> <li>inspect.lua - Human-readable representation of Lua tables.</li> <li>Luacheck - Tool for linting and static analysis of Lua code.</li> <li>MiniLua - Lua contained in a single header to be bundled in C/C++ applications with ease.</li> <li>Lume - Lua functions geared towards game dev.</li> <li>LDoc - Lua Documentation Tool.</li> <li>Hive - Lua microservices framework written in Rust.</li> <li>lua-graph - Graph algorithms in Lua.</li> <li>Clue - C/Rust like programming language that compiles into Lua code.</li> <li>Standalone tree sitter bindings for the Lua language</li> <li>Gooa - Lua Preprocessor written in Go.</li> <li>LuaSocket - Network support for the Lua language.</li> <li>Eva - Basic defold module for mobile games.</li> <li>Druid - Defold UI component library.</li> <li>Lua C API manual pages</li> <li>Lua grammar for tree-sitter</li> <li>A History of Lua (HN)</li> <li>jsonschema - Pure Lua JSON schema validator for Lua/LuaJIT.</li> <li>lua-resty-radixtree - Adaptive Radix Trees implemented in Lua / LuaJIT.</li> <li>Baton - Input library for L\u00d6VE that bridges the gap between keyboard and joystick controls.</li> <li>promise-async - Promise &amp; Async in Lua.</li> <li>Go Lua Compiler and VM</li> <li>Lua 5.3 in Rust</li> <li>Structured concurrency and Lua (HN)</li> <li>Selene - Blazing-fast modern Lua linter written in Rust.</li> <li>Lua Scripts for Roblox</li> <li>Racket-Lua - Implementation of Lua 5.4 for Racket. (Article) (HN)</li> <li>Lua Standard Library - Implement popular data structures &amp; algorithms into your Lua applications.</li> <li>Building the fastest Lua interpreter automatically (2022) (HN)</li> <li>LuaJIT Remake - Implement a multi-tier method-JIT for Lua.</li> <li>Xeus Lua - Jupyter kernel for Lua based on the native implementation of the Jupyter protocol xeus.</li> <li>HsLua - Haskell bindings to Lua, an embeddable scripting language.</li> <li>Lua performance guide</li> <li>t - Runtime Typechecker for Roblox.</li> <li>cwtest - Tiny Lua test helper.</li> <li>Lua Programming Gems (PDF)</li> <li>Using Lua with C++ (2023) (HN)</li> <li>Yuescript - Moonscript dialect compiles to Lua. (Docs)</li> <li>g3d - Simple and easy 3D engine for L\u00d6VE.</li> <li>LuaFileSystem - File System Library for Lua.</li> <li>luzer - Coverage-guided, native Lua fuzzing engine.</li> <li>Wasynth - WebAssembly to Lua translation library and tool.</li> </ul>"},{"location":"notes/programming-languages/perl/","title":"Perl","text":"<p>Original content by: Nikita</p> <p>Higher-Order Perl is a nice book.</p>"},{"location":"notes/programming-languages/perl/#links","title":"Links","text":"<ul> <li>Announcing Perl 7 (2020) (HN) (Reddit) (Lobsters)</li> <li>Thinking about a New Type System for Perl/Cor (HN)</li> <li>Demonstrating PERL with Tic-Tac-Toe (2020) (Lobsters)</li> <li>Perl7 is a fork of values (2020) (HN) (Lobsters)</li> <li>perlres - List of resources about Perl.</li> <li>Try Perl - Learn the basics of the Perl language in your browser. (Code)</li> <li>RFC 188, by Damian Conway: Objects: Private keys and methods (2020)</li> <li>The Perl Ambassador: Damian Conway (2020)</li> <li>Perl.com - Programming news, code and culture.</li> <li>Perl, the first postmodern computer language</li> <li>Perl 5 code</li> <li>Raku - Newest member of the family of languages known as Perl.</li> <li>Raku GitHub projects</li> <li>Perl One-Liners Cookbook (HN)</li> <li>Learn Perl in about 2 hours 30 minutes (2011)</li> <li>Porting from Go to Raku (2020)</li> <li>Sparrow - Raku Automation Framework.</li> <li>SparrowHub - Sparrow Plugins Repository.</li> <li>Functional Perl: Programming with Recursion Schemes in Python</li> <li>What\u2019s the point of pointfree programming? (2020) (Lobsters)</li> <li>Why Perl Didn't Win (2020)</li> <li>Complete Course of Raku programming language (Code)</li> <li>The Trouble with Reference Counting (2021)</li> <li>The Course of Raku</li> <li>Roles as Algebraic Data Types in Raku (2020)</li> <li>Perl Cheat Sheet</li> <li>The Future of Perl (2021) (HN)</li> <li>Perl / Unix One-liner Cage Match (2021)</li> <li>Perl Data Language - Scientific Computing with Perl. (HN)</li> <li>Perl &amp; Raku Conference review (2021)</li> <li>The four noisy horsemen of Perl hate (2021) (Lobsters)</li> <li>93% of Paint Splatters are Valid Perl Programs (2019)</li> <li>Read The Fantastic Manual: How to get the most out of Perl documentation (2021)</li> <li>Better Perl: Four list processing best practices with map, grep, and more (2021)</li> <li>Rakudo - Raku on MoarVM, JVM, and JS. Most mature, production-ready implementation of the Raku language. (Web)</li> <li>mi6 - Minimal authoring tool for Raku.</li> <li>Self-contained, portable perl binaries</li> <li>Avoid Yoda conditions in Perl you should (2021) (Lobsters)</li> <li>Venus - OO Standard Library for Perl 5. (Lobsters)</li> <li>Perl Saved the Human Genome Project (1996) (HN)</li> <li>Higher-Order Perl: Transforming Programs with Programs</li> <li>Higher-Order Perl Book (HN)</li> <li>What Happened to Perl 7? (2022) (HN)</li> <li>This is not your grandfather's Perl (2022)</li> <li>What's wrong with Perl</li> <li>Perl is Actually Portable (2022)</li> <li>Actually Portable Perl (HN)</li> <li>Perl Weekly</li> <li>Perl Power Tools</li> <li>The Future of Perl (2023)</li> </ul>"},{"location":"notes/programming-languages/standard-ml/","title":"Standard ML","text":"<p>Original content by: Nikita</p> <p>CakeML is neat.</p>"},{"location":"notes/programming-languages/standard-ml/#links","title":"Links","text":"<ul> <li>SOSML - Interpreter for Standard ML written in TypeScript. (Reddit)</li> <li>MLton - Whole-program optimizing compiler for the Standard ML programming language.</li> <li>ML for the Working Programmer, 2nd Edition book (1996)</li> <li>WebML - Standard ML compiler for the Web.</li> <li>Ponyo - Comprehensive high-level library and toolkit for Standard ML.</li> <li>Tour of Standard ML  (HN) (Code)</li> <li>Unix System Programming with Standard ML (HN)</li> <li>smlpkg - Generic package manager for Standard ML libraries and programs.</li> <li>Compiling Pattern Guards - Prototype code that accompanies the paper \"Compiling Successor ML Pattern Guards\".</li> <li>The History of Standard ML (2020) (Lobsters) (Talk) (HN)</li> <li>Standard ML in 2020 (HN)</li> <li>Morel - Standard ML interpreter, with relational extensions, implemented in Java.</li> <li>Successor ML - Effort to evolve the Standard ML language while keeping true to its clean and elegant design.</li> <li>Standard ML Basis Library</li> <li>Moscow ML - Light-weight implementation of Standard ML (SML), a strict functional language widely used in teaching and research.</li> <li>Poly/ML - Standard ML implementation originally written in an experimental language called Poly. (Web)</li> <li>parse-sml - Custom parser for Standard ML.</li> <li>CakeML - Verified implementation of a significant subset of Standard ML. (Web)</li> <li>Compiler for Standard ML in Rust (HN)</li> <li>Higher Standard - Higher kinded polymorphism in Standard ML.</li> <li>LunarML - Standard ML compiler that produces Lua.</li> <li>Getting started with Standard ML</li> <li>sml-server - Web server infrastructure for Standard ML.</li> <li>sml-parseq - Standard ML library for parallel sequences.</li> <li>MPL - MaPLe compiler for Parallel ML.</li> <li>I'm ready: Let the 100 year programs begin (Lobsters)</li> <li>Lexer and parser generators for Standard ML, OCaml, and Haskell</li> <li>Standard ML Family (HN)</li> <li>What was wrong with SML? (2022)</li> <li>Smackage - Package manager for Standard ML libraries.</li> <li>Awesome Standard ML</li> <li>Exercism Standard ML Track</li> <li>Standard ML Grammar for Tree-sitter</li> <li>Millet - Language server for SML. (Lobsters)</li> <li>Standard ML AST, based on recursion schemes</li> <li>Millet - Language server for Standard ML.</li> <li>Memories: Edinburgh ML to Standard ML (2022) (Lobsters)</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/","title":"C libraries","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/c/c-libraries/#web","title":"Web","text":"<ul> <li>IWNET - Pure C Asynchronous HTTP library with websockets, SSL, routing.</li> <li>facil.io - C micro-framework for web applications.</li> <li>libart - Adaptive Radix Trees implemented in C.</li> <li>httpserver.h - Single header library for writing non-blocking HTTP servers in C. (HN)</li> <li>Dyad.c - Asynchronous networking for C.</li> <li>ENet - Reliable UDP networking library. (Web)</li> <li>CivetWeb - Embedded C/C++ web server.</li> <li>Libwebsockets - C library for implementing modern network protocols. (HN)</li> <li>PicoHTTPParser - Tiny, primitive, fast HTTP request/response parser.</li> <li>picoev - Tiny, lightning fast event loop for network applications.</li> <li>Onion - C library to create simple HTTP servers and Web Applications.</li> <li>xHTTP - HTTP server library in a single C file. (HN)</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#gui","title":"GUI","text":"<ul> <li>libui - Portable GUI library for C.</li> <li>Nuklear - Minimal-state, immediate-mode graphical user interface toolkit written in ANSI C. (HN) (HN)</li> <li>Pugl - Minimal portable API for embeddable GUIs.</li> <li>PlutoVG - Standalone 2D vector graphics library in C.</li> <li>VUI - Immediate UI library for C, designed to be easy to use &amp; customizable.</li> <li>microui - Tiny immediate-mode UI library.</li> <li>SDL_gpu - Library for high-performance, modern 2D graphics with SDL written in C.</li> <li>Layout - Single-file library for calculating 2D UI layouts using stacking boxes. Compiles as C99 or C++</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#graphics","title":"Graphics","text":"<ul> <li>rawdraw - Fundamental Graphics Library.</li> <li>LVGL - Light and Versatile Graphics Library. (Web)</li> <li>Kinc - Modern low level game library and hardware abstraction.</li> <li>Cairo - Multi-platform 2D graphics library.</li> <li>minidraw - Single file 2D graphics library written in C.</li> <li>TinyGL - Penultimate portable graphics library.</li> <li>raygui - Simple and easy-to-use immediate-mode GUI library. (HN)</li> <li>Ferox - Lightweight 2D collision detection and physics library written in C.</li> <li>gk - Graphics Kernel: flexible, highly configurable, extensible render engine (real time + offline).</li> <li>AssetKit - Modern 2D/3D - Importer \u2022 Exporter \u2022 Util - Library.</li> <li>HAGL - Hardware Agnostic Graphics Library for embedded.</li> <li>Adafruit GFX - Graphics library for all our displays, providing a common set of graphics primitives (points, lines, circles, etc.).</li> <li>Olive.c - Simple 2D Graphics Library for C. (Demos) (HN)</li> <li>Fenster - Most minimal cross-platform GUI library. (Article) (HN)</li> <li>SDL - Cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#test","title":"Test","text":"<ul> <li>greatest - C testing library in 1 file. No dependencies, no dynamic allocation.</li> <li>Check - Unit testing framework for C.</li> <li>CT - Easy Unit Testing for C.</li> <li>Unity Test - Simple Unit Testing for C.</li> <li>CMock - Mock/stub generator for C.</li> <li>CTEST - Unit test framework for software written in C/C++.</li> <li>Snow - Testing library for C.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#cli","title":"CLI","text":"<ul> <li>Argtable3 - Single-file, ANSI C, command-line parsing library that parses GNU-style command-line options.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#db","title":"DB","text":"<ul> <li>IOWOW - C11 persistent key/value storage based on skip list data structure. (Web)</li> <li>hashmap - Templated type-safe hashmap implementation in C using open addressing and linear probing for collision resolution.</li> <li>libyang - YANG data modelling language parser and toolkit written (and providing API) in C.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#math","title":"Math","text":"<ul> <li>Calcium - Exact real and complex numbers in C.</li> <li>OpenLibm - High quality, portable, standalone C mathematical library.</li> <li>FLINT - Fast Library for Number Theory.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#crypto","title":"Crypto","text":"<ul> <li>libmongocrypt - C library for Client Side Encryption.</li> <li>SipHash - Family of pseudorandom functions (PRFs) optimized for speed on short messages.</li> <li>curve25519 - Highly efficient implementation of elliptic curve 25519.</li> <li>libp11 - Abstract API to perform operations on cryptographic objects such as private keys, without requiring access to the objects themselves.</li> </ul>"},{"location":"notes/programming-languages/c/c-libraries/#other","title":"Other","text":"<ul> <li>jemalloc - General purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support.</li> <li>Libtask - Coroutine Library for C and Unix.</li> <li>Simple Dynamic Strings</li> <li>Cello - Higher level programming in C. (Web) (HN) (HN)</li> <li>libdill - Structured concurrency in C.</li> <li>Libmill - Go-style concurrency in C. (Web) (HN)</li> <li>CRoaring - Roaring bitmaps in C (and C++).</li> <li>cr.h - Simple C Hot Reload Header-only Library.</li> <li>cgltf - Single-file glTF 2.0 loader and writer written in C99.</li> <li>utf8proc - Clean C library for processing UTF-8 Unicode data.</li> <li>Sokol - Simple STB-style cross-platform libraries for C and C++, written in C.</li> <li>libcsp - Fast C concurrency library influenced by the CSP model. (HN)</li> <li>libsrt - C library for writing fast and safe C code, faster.</li> <li>sx - Portable base library for C programmers, designed for performance and simplicity.</li> <li>poica - ADTs with pattern matching and type introspection for pure C.</li> <li>MiniFB - Small cross platform library to create a frame buffer that you can draw pixels in. (HN)</li> <li>liblfds - Portable, license-free, lock-free data structure library written in C.</li> <li>mlibc - C standard library. (Lobsters)</li> <li>miniaudio - Single file audio playback and capture library written in C. (Web)</li> <li>libeatmydata - LD_PRELOAD library that disables all forms of writing data safely to disk. fsync() becomes a NO-OP, O_SYNC is removed etc.</li> <li>C Smart Pointers - Attempt to bring smart pointer constructs to C programming language. (Article)</li> <li>Criterion - Dead-simple, yet extensible, C and C++ unit testing framework.</li> <li>PortAudio - Cross-platform, open-source C language library for real-time audio input and output.</li> <li>libevent - Event notification library. (Web)</li> <li>FlatCC - FlatCC FlatBuffers in C for C.</li> <li>libusb - Cross-platform library to access USB devices. (Web)</li> <li>GIF encoder - Small C library that can be used to create GIF animations.</li> <li>libnfc - Library which allows userspace application access to NFC devices. (Web)</li> <li>C Thread Pool - Minimal but advanced threadpool implementation.</li> <li>libhv - Like libevent, libev, and libuv, libhv provides event-loop with non-blocking IO and timer, but simpler apis and richer protocols.</li> <li>C macros for hash tables and more</li> <li>LambdaPP - Anonymous functions in C.</li> <li>Metacall - Library for providing inter-language foreign function interface calls. (Web)</li> <li>CTL - C Template Library. (Lobsters) (HN)</li> <li>libavif - Library for encoding and decoding .avif files.</li> <li>libusual - Modern C Environment. (Web)</li> <li>bsdiff/bspatch - Libraries for building and applying patches to binary files.</li> <li>libbacktrace - C library that may be linked into a C/C++ program to produce symbolic backtraces.</li> <li>Datatype99 - C99 with sum types. (HN)</li> <li>gridsort - Stable adaptive partitioning comparison sort.</li> <li>Common C libraries and data structures (HN) (HN)</li> <li>libco - Cooperative multithreading library written in C89.</li> <li>HYPRE - Parallel solvers for sparse linear systems featuring multigrid methods. (Web)</li> <li>Simple DirectMedia Layer (SDL) - Cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware. (Code)</li> <li>TinyExpr - Small recursive descent parser and evaluation engine for math expressions. (Web)</li> <li>HIDAPI - Simple library for communicating with USB and Bluetooth HID devices on Linux, Mac and Windows.</li> <li>Minicoro - Single-file library for using asymmetric coroutines in C.</li> <li>utf8.h - Simple one header solution to supporting utf8 strings in C and C++.</li> <li>C-Blosc2 - Fast, compressed and persistent data store library for C.</li> <li>Blitsort - Rotate merge sort based on quadsort. (HN)</li> <li>Stricks - Managed C strings library.</li> <li>Zpoline - Efficient and versatile system call hook mechanism.</li> <li>STC - Modern, user friendly, generic, type-safe and fast C99 container library.</li> <li>vx32 - Portable, efficient, safe execution of untrusted x86 code.</li> <li>Metalang99 - Full-blown preprocessor metaprogramming.</li> <li>cmacro - Lisp macros for C. (HN)</li> <li>libuvc - Cross-platform library for USB video devices.</li> <li>mlib - Library of generic and type safe containers in pure C language (C99 or C11) for a wide collection of container (comparable to the C++ STL).</li> <li>TinyUSB - Open source cross-platform USB stack for embedded system.</li> <li>HPIPM - High-performance interior-point method solver for dense, optimal control- and tree-structured convex quadratic programs.</li> <li>libgrapheme - Suckless Unicode string library. (Lobsters)</li> <li>clhash - C library implementing the ridiculously fast CLHash hashing function.</li> <li>Gunslinger - C99, header-only framework for games and multimedia applications.</li> <li>Capere - Apple Silicon hooking library written in C.</li> <li>libcork - Simple, easily embeddable cross-platform C library. (Docs)</li> <li>s_task - Awaitable coroutine library for C.</li> <li>Trice - Super fast and tiny embedded device C printf-like trace code (works also inside inerrupts) and real-time PC logging (trace ID visualization).</li> <li>Hatrack - Collection of hash tables for parallel programming, including lock-free, wait-free tables.</li> <li>DeviceTree - Minimal code to deal with Apple's DeviceTree format.</li> <li>IRIS - Unified framework across multiple programming platforms.</li> <li>NLopt - Library for nonlinear local and global optimization, for functions with and without gradient information.</li> <li>base64 - Fast Base64 stream encoder/decoder in C99, with SIMD acceleration.</li> <li>cute_headers - Various single-file cross-platform C/C++ headers implementing self-contained libraries.</li> <li>js0n - Flexible Zero-Footprint JSON Parser in C.</li> <li>librseq - Library for Restartable Sequences.</li> <li>argparse - Command-line arguments parsing library.</li> <li>NSIMD - Vectorization library that abstracts SIMD programming.</li> <li>Buffet - All-inclusive Buffer Type for C.</li> <li>clib - Package manager for the C programming language. (Web) (HN) (HN)</li> <li>libcbor - CBOR protocol implementation for C.</li> <li>Interface99 - Full-featured interfaces for C99.</li> <li>SDL_sound - Abstract soundfile decoder.</li> <li>musl libc - C standard library implementation for Linux. (Wiki) (Wiki Code)</li> <li>PDCLib - Public Domain C Library.</li> <li>Shine - Fast fixed-point mp3 encoding.</li> <li>Portable Snippets - Collection of miscellaneous portable C snippets.</li> <li>Async.h - Stackless Async Subroutines for C.</li> <li>libreactor - Extendable event driven high performance C-abstractions.</li> <li>Tiny Rust libc - Tiny C library written in Rust.</li> <li>Tina - Tiny, header only, coroutine and fiber library.</li> <li>Rax - ANSI C radix tree implementation.</li> <li>libhelper - Library for parsing Image4 and Mach-O formats, and working with Files and LZFSE/LZSS compression.</li> <li>Quiet - Transmit data with sound. Includes binaries for soundcards and .wav files.</li> <li>SIMDComp - Simple C library for compressing lists of integers using binary packing.</li> <li>libsoundio - C library for cross-platform real-time audio input and output.</li> <li>libconcurrent - Concurrent Programming Library (Coroutine) for C11.</li> <li>libudx - Reliable, multiplex, and congestion controlled streams over udp.</li> <li>Universal Headers - Distributes a set of C headers (.h files) that are compatible with widely used libcs for various targets.</li> <li>Serd - Lightweight C library for RDF syntax.</li> <li>libpostal - C library for parsing/normalizing street addresses around the world. Powered by statistical NLP and open geo data.</li> <li>J40 - Independent, self-contained JPEG XL decoder. (HN)</li> <li>nsync - C library that exports various synchronization primitives, such as mutexes.</li> <li>GNU C Library - Standard system C library.</li> <li>jc_voronoi - Fast C/C++ header only implementation for creating 2D Voronoi diagrams from a point set.</li> <li>coroutine - Asymmetric coroutine library for C.</li> <li>YAJL - Fast streaming JSON parsing library in C.</li> <li>libbloom - Simple and small bloom filter implementation in plain C.</li> <li>OpenSlide - C library for reading virtual slide images.</li> <li>C23 implications for C libraries (2022)</li> <li>Linked Ring Buffer Library</li> <li>cauldron - Collection of single-file C libraries and tools with the goal to be portable and modifiable.</li> <li>qLibc - Simple and yet powerful C library providing generic data structures and algorithms.</li> <li>bloom - Bloom filter implementation.</li> <li>Ring-Buffer - Simple ring buffer (circular buffer) designed for embedded systems.</li> <li>Nolibc - Minimal C-library replacement shipped with the kernel. (HN)</li> <li>BlueRetro - Multiplayer Bluetooth controllers adapter for retro video game consoles.</li> <li>PhysicsFS - Portable, flexible file i/o abstraction.</li> <li>My review of the C standard library in practice (2023) (HN) (Lobsters) (HN)</li> <li>Bunki - Simple C cororoutine library.</li> <li>json.c - Fast little JSON library for C.</li> <li>STR - C String handling library.</li> <li>Json Parser</li> </ul>"},{"location":"notes/programming-languages/c/c/","title":"C","text":"<p>Original content by: Nikita</p> <p>Everything I wish I knew when learning C is nice read.</p> <p>Zig. </p>"},{"location":"notes/programming-languages/c/c/#notes","title":"Notes","text":"<ul> <li>Notes on learning/using C.</li> <li>C models an assembly wildly different from modern x86, often informs you of errors by just setting shared globals you have to know to check, and has huge amounts of magic wrapped up in libc. There's so many ways that C does things behind your back.</li> </ul>"},{"location":"notes/programming-languages/c/c/#links","title":"Links","text":"<ul> <li>Principles for C programming</li> <li>Understanding pointers</li> <li>c4 - C in four functions. (HN)</li> <li>Project Based Tutorials in C</li> <li>One year of C (2018)   https://floooh.github.io/2018/06/02/one-year-of-c.html</li> <li>Building C programs</li> <li>Tiny Garbage Collector - Tiny Garbage Collector for C.</li> <li>Awesome C - Curated list of awesome C frameworks, libraries, resources and other shiny things.</li> <li>Awesome C 2</li> <li>9cc small C compiler</li> <li>picol, a Tcl interpreter in 550 lines of C code (2007)</li> <li>Boehm-Demers-Weiser conservative C/C++ Garbage Collector (libgc, bdwgc, boehm-gc)</li> <li>Clang documentation</li> <li>libaco - Blazing fast and lightweight C asymmetric coroutine library.</li> <li>C-Reduce - Tool that takes a large C or C++ program that has a property of interest (such as triggering a compiler bug) and automatically produces a much smaller C/C++ program that has the same property.</li> <li>bic - C interpreter and API explorer. (HN)</li> <li>clang - Compiler front-end for the C family of languages (C, C++, Objective-C, and Objective-C++) which is built as part of the LLVM compiler infrastructure project.</li> <li>rcc - C compiler written in Rust, with a focus on good error messages.</li> <li>Post modern C tooling (2019)</li> <li>Small C Compilers (HN)</li> <li>Learn C and C++ Programming</li> <li>Small C Compiler - Intended to support all C11 language features while keeping the code as small and simple as possible.</li> <li>All Algorithms implemented in C</li> <li>CodeChecker - Analyzer tooling, defect database and viewer extension for the Clang Static Analyzer and Clang Tidy.</li> <li>Writing a Simple Garbage Collector in C (2014) (HN) (HN)</li> <li>gc - Simple, zero-dependency garbage collection for C. (HN)</li> <li>To become a good C programmer (HN)</li> <li>Development of the C Language (1993) (Lobsters) (PDF)</li> <li>Ask HN: How do I learn C properly? (2020)</li> <li>HN: Static Analysis in GCC 10 (2020)</li> <li>\u201cC is not how the computer works\u201d can lead to inefficient code (2019) (HN)</li> <li>Write a C interpreter - Write a simple interpreter of C. Inspired by c4 and largely based on it..</li> <li>tree-sitter-c - C grammar for tree-sitter. Adapted from this C99 grammar.</li> <li>Awesome Clang</li> <li>Tell HN: C Experts Panel \u2013 Ask us anything about C (2020)</li> <li>Embedding Binary Objects in C (HN)</li> <li>Implementing a LLVM Micro C compiler in Haskell (HN)</li> <li>Why should I have written ZeroMQ in C, not C++ (2012)</li> <li>Awesome C</li> <li>Verified sequential malloc/free (HN)</li> <li>Fat pointers in C using libcello (HN)</li> <li>Embracing modularity with Meson (2020)</li> <li>Some Were Meant for C - The Endurance of an Unmanageable Language (2017) (Lobsters) (HN)</li> <li>Developing a programming language in C (2020)</li> <li>Mass (Meta Assembly) Language - Compiler for a new language focusing on compile-time execution and no LLVM dependency.</li> <li>Implementing simple cooperative threads in C (2020) (HN)</li> <li>c2go - Tool for transpiling C to Go.</li> <li>cpkg - Build tool for C with a particular emphasis on cross compilation. It is configured using Dhall.</li> <li>C Internals (HN)</li> <li>C-Reduce - Tool that takes a large C or C++ program that has a property of interest (such as triggering a compiler bug) and automatically produces a much smaller C/C++ program that has the same property. (Web)</li> <li>C-Vise - Super-parallel Python port of the C-Reduce.</li> <li>C implementation of Tic-Tac-Toe in a single call to printf (HN) (Reddit)</li> <li>How the most upvoted C question was another question (2020) (Lobsters)</li> <li>LLDB Debugger - Next generation, high-performance debugger.</li> <li>Dumbindent: When 93% of the Time was Spent in Clang-Format (2020) (Lobsters)</li> <li>C is archaic (2019)</li> <li>Linux kernel coding style in C</li> <li>Constantine - Toy project to learn how to write Clang plugin.</li> <li>Tiny C Compiler (HN)</li> <li>C performance mystery: delete unused string constant (2020)</li> <li>C's main() is one of the places where Unix's user and kernel APIs differ (Lobsters)</li> <li>Standard C loop idioms (2020)</li> <li>Why the C Language Will Never Stop You from Making Mistakes (2020)</li> <li>Can we do better than our C compiler? (HN)</li> <li>Cyclone - Safe dialect of C.</li> <li>C Code Archive Network (Code)</li> <li>do {...} while (0) in macros (2014) (Lobsters)</li> <li>Simple C Compiler</li> <li>Verifiable C (2020)</li> <li>Rust-style futures in C (2020)</li> <li>The problem with C compatibility in C++ (2020) (Lobsters) (HN)</li> <li>Essential C (2003) (HN) (HN)</li> <li>Modern C (HN) (Lobsters)</li> <li>C FAQ</li> <li>Massacring C Pointers (2018) (HN) (Lobsters)</li> <li>C\u2019s Biggest Mistake (2009) (Lobsters)</li> <li>Defer Reference Implementation for C (HN)</li> <li>Chibicc - Small C Compiler. (HN)</li> <li>Loading CSV File at the Speed Limit of the NVMe Storage (2020) (Lobsters)</li> <li>What Makes C Hard to Compile (2020)</li> <li>malloc as a service (2020)</li> <li>The Lemon Parser Generator - LALR parser generator for C.</li> <li>How Does a C Debugger Work? (2014) (HN)</li> <li>SheLLVM - Collection of LLVM transform and analysis passes to write shellcode in regular C.</li> <li>Defining C macros the right way (2020) (Lobsters)</li> <li>Hundred year mistakes (2020) (Lobsters)</li> <li>MazuCC - Minimalist C compiler with x86_64 code generation.</li> <li>shecc - Self-hosting and educational C compiler.</li> <li>AMaCC - Small C Compiler generating ELF executable Arm architecture, supporting JIT execution.</li> <li>How to C (as of 2016)</li> <li>Demystifying malloc (2020)</li> <li>Past, Present and Future of Effective C (2020)</li> <li>C compiler written in Go</li> <li>ZetZ - Formally Verified Dialect of C. (Article)</li> <li>Editing the C Standard (2020) (HN)</li> <li>C Is Not Dependency Free (2020)</li> <li>Best aspects of C language (2020) (HN) (Lobsters)</li> <li>C3 Language Compiler - C3 is a C-like language trying to be \"an incremental improvement over C\" rather than a whole new language. (HN)</li> <li>Coccinelle - Allows programmers to easily write some complex style-preserving source-to-source transformations on C source code, like for instance to perform some refactorings.</li> <li>rcc - Basic c compiler written in rust.</li> <li>Writing a C Compiler (2017) (Code)</li> <li>What is your favorite C programming trick? (HN)</li> <li>Linus Torvalds' good taste argument for linked lists, explained (HN)</li> <li>DragonFFI - C Foreign Function Interface (FFI) library written in C++ and based on Clang/LLV.</li> <li>PureCTypes - Pure-python package to describe portable C structures.</li> <li>Now you C me, now you don't, part two: exploiting the in-between (2020)</li> <li>Data Structures and Algorithms in C (implementations and notes)</li> <li>Getting started with C programming a lightning-fast start for absolute beginners (2020) (HN)</li> <li>C-Toy - Interactive C coding environment.</li> <li>cproc - C11 compiler using QBE as a backend. (HN)</li> <li>Cosmopolitan Libc - Build-once run-anywhere C library. (Code) (HN) (HN 2) (HN 3) (Actually Portable Executable) (Lobsters) (Lobsters) (Awesome)</li> <li>Learn C - Free Interactive C Tutorial.</li> <li>Why mmap is faster than system calls (2019) (HN)</li> <li>CxGo - Tool for translating C source code to Go.</li> <li>Wanager - Package manager and project manager for the C &amp; C++ programming languages.</li> <li>B. Harvey's Intro to C (2007)</li> <li>lcc - Retargetable Compiler for ANSI C. (Web)</li> <li>C Compiler/Parser written in Rust</li> <li>c2goasm - C to Go Assembly.</li> <li>List of C static analysis tools</li> <li>Q3VM - Single file (vm.c) bytecode virtual machine/interpreter for C-language input.</li> <li>How does Clang 2.7 hold up in 2021? (HN)</li> <li>Developing mathematical software in C (2021)</li> <li>POSIX Threads Programming (HN)</li> <li>Beej's Guide to C Programming (Code) (PDF) (HN) (HN)</li> <li>Obfuscated Tiny C Compiler (HN)</li> <li>Angelix - Semantics-based test-driven automated program repair tool for C programs. (Code)</li> <li>Inline and Sideline Approaches for Low-Cost Memory Safety in C (2021)</li> <li>Checked C - Adds static and dynamic checking to C to detect or prevent common programming errors such as buffer overruns and out-of-bounds memory accesses. (HN) (HN)</li> <li>ELF: symbol lookup via DT_HASH (2017)</li> <li>Actually Portable Executables (2021) (HN)</li> <li>Rust, Zig, and the Futility of \"Replacing\" C (2021) (Lobsters)</li> <li>Git's list of banned C functions (HN)</li> <li>Microsoft's list of banned C functions (HN)</li> <li>Aro - C compiler written in Zig. (HN)</li> <li>Half of curl\u2019s vulnerabilities are C mistakes (2021) (Lobsters) (HN)</li> <li>C's removal of <code>gets</code> could have been done better (2021)</li> <li>Compile times, and why \"the obvious\" might not be so (2021) (Lobsters)</li> <li>CBMC - Bounded Model Checker for C and C++ programs. (Web)</li> <li>Type-safe generic data structures in C (2020)</li> <li>Modern C and What We Can Learn from It (2021) (HN)</li> <li>The price of dynamic memory: Allocation (2020)</li> <li>The Byte Order Fiasco (2021) (Lobsters)</li> <li>snmalloc - High-performance allocator.</li> <li>Practical Design Patterns: Opaque Pointers and Objects in C (2021) (Lobsters)</li> <li>Movfuscator - Compile C into only mov instructions. (HN) (HN)</li> <li>Undefined behavior in C is a reading error (2021) (Lobsters)</li> <li>lacc - Simple, self-hosting C compiler.</li> <li>RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types (2021) (HN)</li> <li>Modern C for C++ Peeps (2019) (HN)</li> <li>Libdill: Structured Concurrency for C (2016) (HN)</li> <li>Goodbye C++, Hello C (2021) (HN)</li> <li>CompCert - Formally-verified C compiler. (Web) (HN)</li> <li>When static makes your C code 10 times faster (2021) (HN) (Lobsters)</li> <li>Goodbye C developers: The future of programming with certified program synthesis (2021) (Lobsters)</li> <li>Macros on Steroids, Or: How Can Pure C Benefit From Metaprogramming (2021)</li> <li>CGuard: Efficient Spatial Safety for C (2021)</li> <li>IOCCC - The International Obfuscated C Code Contest. (Winners)</li> <li>Performance vs Programming Effort between Rust and C on Multicore Architectures: Case Study in N-Body (2021)</li> <li>Strict memcpy() bounds checking for the kernel (2021) (HN)</li> <li>strcpy: a niche function you don't need (2021) (Lobsters)</li> <li>#ifdef Considered Harmful, or Portability Experience with C News (1992)</li> <li>Ocean - Programming language lik C that compiles into a x86 ELF executable. (HN)</li> <li>The (too) many pitfalls of VLA in C (2021)</li> <li>The Descent to C (2013) (HN)</li> <li>Progress on C23 (2021) (HN) (Lobsters)</li> <li>pycparser - Complete C99 parser in pure Python.</li> <li>PackCC - Parser generator for C.</li> <li>Why is C Faster Than My Language? (2021)</li> <li>Elements of C Style</li> <li>pcpp - C99 preprocessor written in pure Python.</li> <li>Fast character case conversion (or how to compress sparse arrays) (HN)</li> <li>Proposal to add constexpr to C (2021) (HN)</li> <li>rust-cexpr - C expression parser and evaluator.</li> <li>When to Use Goto (HN)</li> <li>There is no 'printf' (2021) (HN)</li> <li>Comparing the c ffi overhead on various programming languages</li> <li>55GiB/s FizzBuzz (HN) (Lobsters)</li> <li>In C, how do you know if the dynamic allocation succeeded? (HN)</li> <li>cc65 - Freeware C compiler for 6502 based systems. (Docs)</li> <li>Beware of fast-math (2021) (HN)</li> <li>A Simple, Possibly Correct LR Parser for C11 (2017)</li> <li>Pointers in C / C++ [Full Course] (2020)</li> <li>Smaller C - Simple and small single-pass C compiler.</li> <li>Comprehensive guide to 50 years of evolution of strict C programming (HN)</li> <li>Some obscure C features (2019) (Lobsters)</li> <li>Writing a register based VM in less than 125 lines of C code (2021) (HN)</li> <li>Ogma - Tool to facilitate the integration of safe runtime monitors into other systems. Extends Copilot, a high-level runtime verification framework that generates hard real-time C99 code.</li> <li>Type-Safe Printf For C (HN)</li> <li>Lang-C - Lightweight C parser for Rust.</li> <li>Why Is C Faster Than Java (2009) (HN)</li> <li>Almost Always Unsigned (2022) (HN)</li> <li>C Runtime Overhead (2015) (HN)</li> <li>Ridiculously fast feature flags (2021) (Lobsters)</li> <li>CIL - C Intermediate Language.</li> <li>C structures and padding and sizeof (2022) (Lobsters)</li> <li>Centralizing Resource Cleanup Paths in C (Lobsters)</li> <li>Finding the average of two unsigned integers without overflow (2022) (HN)</li> <li>PyClibrary - C parser and bindings automation for Python.</li> <li>Running C unit tests with pytest (2022)</li> <li>A Formal Model of Checked C (2022) (HN)</li> <li>C meeting is over. C23 added the following (2022) (HN)</li> <li>I wrote the least-C C program I could (2022) (HN)</li> <li>C Portability Lessons from Weird Machines (2018) (HN)</li> <li>Moving the Linux Kernel to Modern C (2022) (HN) (Lobsters) (Reddit)</li> <li>Debugging with GDB (2022) (HN)</li> <li>Debugging with GDB (HN)</li> <li>CMOC - 6809 cross-compiler for a C-like language.</li> <li>C Arrays Are Not Pointers (2021)</li> <li>To Save C, We Must Save ABI (2022) (HN)</li> <li>A flexible, lightweight, spin-lock barrier (2022)</li> <li>C Isn't A Programming Language Anymore (2022) (Lobsters) (Reddit) (Tweet) (Reddit)</li> <li>Mildly Interesting Quirks of C (HN)</li> <li>SubC - Simple subset of C originally written by Nils Holms for teaching newcomers how to write a compiler.</li> <li>c2go - Convert C to Go.</li> <li>Implementing cosine in C from scratch (2020) (HN)</li> <li>Writing a C Compiler Book (Article)</li> <li>Kate's C AMA (2022)</li> <li>Haskell C Compiler - Learning Haskell for the first time and using it to write a simple C compiler.</li> <li>I wrote a peephole optimizer for QBE (2022) (Lobsters)</li> <li>When FFI Function Calls Beat Native C (2018) (HN)</li> <li>Advanced Optimization and New Capabilities of GCC 11</li> <li>Tiny C Projects - Collection of small C projects - usually a minimal example of something interesting.</li> <li>Old C code \u2013 how to upgrade it? (2022)</li> <li>Minipeg - Parser generator for C.</li> <li>C72 - Port of the earliest C compiler to x86 (2021). (HN)</li> <li>C17 compiler written from scratch in C</li> <li>Neatcc - Small arm/x86(-64) C compiler.</li> <li>C-implemented C compiler</li> <li>A blog that is a single executable binary (2022) (HN)</li> <li>Tiny C Compiler - Smallest ANSI C compiler.</li> <li>Awesome tooling for Bazel users of the C language family</li> <li>The Lost Art of Structure Packing (2014) (HN)</li> <li>Self-hosting C compiler</li> <li>Minimal C compiler in x86 assembly (HN)</li> <li>Set of minimal dependency bootstrap binaries - Goal of creating a bootstrapping path to a C compiler capable of compiling GCC, with only the explicit requirement of a single 1 KByte binary or less.</li> <li>A game for learning C operator precedence (Lobsters)</li> <li>4 integers are enough to write a Snake Game (2022) (Lobsters)</li> <li>A lock-free, concurrent, generic queue in 32 bits (2022) (HN)</li> <li>Logging C Functions (2022) (Lobsters)</li> <li>Linux and Tiny C Compiler in the browser (2022)</li> <li>All About Libpas, Phil's Super Fast Malloc (HN)</li> <li>Pretty-Printable Enumerations in Pure C (2022)</li> <li>Psyche-C - Compiler frontend for the C programming language.</li> <li>Testing and building C projects with Zig (2022)</li> <li>ClangIR (CIR) - New high-level IR for clang.</li> <li>Assertions should be more debugger-oriented (2022)</li> <li>Adding Modules to C in 10 Lines of Code (HN)</li> <li>OpenBSD has two new C compilers: chibicc and kefir (2022) (HN)</li> <li>Goblint - Static analysis framework for C.</li> <li>Kefir C compiler - Implementation of C17 language compiler from scratch.</li> <li>Polymorphism through Typeclasses / Interface / Traits in C</li> <li>Practical design patterns in C</li> <li>little - Small, fast, easily embeddable language implemented in C.</li> <li>Embed is in C23 (2022) (HN) (Lobsters)</li> <li>What's the most portable way to include binary blobs in an executable? (2022) (HN)</li> <li>The different ways to handle errors in C (2022) (Lobsters)</li> <li>ClangIR (CIR) - New high-level IR for clang.</li> <li>C99 doesn't need function bodies, or 'VLAs are Turing complete' (2022) (HN)</li> <li>C23 is Finished: Here is What is on the Menu (2022) (HN)</li> <li>The pervasive effects of C's malloc() and free() on C APIs (2022) (HN)</li> <li>sexpc - C as S-expressions. (Lobsters)</li> <li>The case against an alternative to C (2022) (Lobsters)</li> <li>The quick and practical \"MSI\" hash table (2022)</li> <li>Advanced Metaprogramming in C: A select statement (2022) (HN)</li> <li>TruffleC: C implementation on top of JVM (2014)</li> <li>Why should I have written ZeroMQ in C, not C++ (2012) (HN)</li> <li>Fexl - Function EXpression Language.</li> <li>C Integer Quiz (HN)</li> <li>Tips to Get Started with Cosmopolitan Libc (2022)</li> <li>Prototyping in C (2022)</li> <li>Teaching C (2016) (HN)</li> <li>Cake - C23 compiler frond end written from scratch in C.</li> <li>C Project Based Tutorials</li> <li>C Programming for Everybody (Code)</li> <li>Illuminating synchronization edges for ThreadSanitizer (2022)</li> <li>What does the ??!??! operator do in C? (HN)</li> <li>Lambda-8cc - x86 C Compiler Written in Untyped Lambda Calculus. (HN)</li> <li>Ask HN: Best book to learn C in 2022?</li> <li>Bare Metal C (2022)</li> <li>Learn enough C to survive (2022) (HN)</li> <li>Debugging C with Cosmopolitan Libc (2022) (HN)</li> <li>Bringing a dynamic environment to C: My linker project (2022) (Lobsters) (HN)</li> <li>FluenC - Modern, functional-first, C inspired language, with a focus on simplicity.</li> <li>Come - C like language and its compiler.</li> <li>C Programming Language 2nd Edition - Solutions</li> <li>clex - Simple lexer generator for C. (Lobsters)</li> <li>C Isn't a Programming Language Anymore (2022) (HN)</li> <li>What tool do you use to document your code in C language? (2022)</li> <li>cparse - LR parser generator for C.</li> <li>Considering C99 for curl (2022) (HN)</li> <li>C compiler written in Swift</li> <li>GCC undefined behaviors are getting wild (2022)</li> <li>Everything I wish I knew when learning C (2022) (HN)</li> <li>XCC - Toy C compiler for x86-64/aarch64/wasm.</li> <li>Simple semi-space collector (2022)</li> <li>Conformance Should Mean Something - fputc, and Freestanding (2022)</li> <li>Ask HN: Learn C in 2023?</li> <li>50 years of C, the good, the bad and the ugly (2022)</li> <li>SOCC - Simple C Compiler in OCaml.</li> <li>Explicit sequencing of C programs</li> <li>Safe memory reclamation for BIND (2023)</li> <li>From Zero to main(): Bare metal C (2019) (HN)</li> <li>Bounded Flexible Arrays in C (2023)</li> <li>C was not created as an abstract machine (2023) (HN) (Lobsters)</li> <li>C Programming Lab: Assessing Your C Programming Skills</li> <li>Why I Use C When I Believe in Memory Safety (2023) (HN)</li> <li>Let's write a setjmp (2023) (Lobsters) (HN)</li> <li>CBMC: The C Bounded Model Checker (2023)</li> <li>Few lesser known tricks, quirks and features of C (Lobsters) (HN)</li> <li>Lessons learnt while trying to modernize some C code (2022)</li> <li>GOTOphobia considered harmful (in C) (2023) (Lobsters) (HN)</li> <li>Why the \u201cvolatile\u201d type class should not be used</li> <li>Demystifying bitwise operations, a gentle C tutorial (2023) (HN)</li> <li>Cosine Implementation in C (HN)</li> <li>Ask HN: If Unix is written in C, how did they run C before Unix? (2023)</li> <li>Using mmap to make LLaMA load faster (2023) (Lobsters) (HN)</li> <li>C Strings and my slow descent to madness (2023) (HN)</li> </ul>"},{"location":"notes/programming-languages/lisp/carp/","title":"Carp","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/lisp/carp/#links","title":"Links","text":"<ul> <li>HN: Carp</li> </ul>"},{"location":"notes/programming-languages/lisp/common-lisp/","title":"Common Lisp","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/lisp/common-lisp/#oss-tools-in-common-lisp","title":"OSS tools in Common Lisp","text":"<ul> <li>MathB.in - Share Mathematics with LaTeX and Markdown. (Code)</li> </ul>"},{"location":"notes/programming-languages/lisp/common-lisp/#links","title":"Links","text":"<ul> <li>A Road to Common Lisp (2018)</li> <li>C. Schafmeister \u201cLessons Learned Implementing Common Lisp with LLVM\u201d (2018)</li> <li>SICL - Fresh implementation of Common Lisp.</li> <li>Common Lisp tips</li> <li>LISP/c (Lispy) - Lisp(ish) to C Converter (designed for CLISP).</li> <li>Cons cells vs. Linked Lists (2020)</li> <li>ANSI Common Lisp - Combines an introduction to Lisp programming, and a convenient, up-to-date reference manual for ANSI Common Lisp (HN).</li> <li>Modern, functional Common Lisp: Myths and tips (2020) (HN)</li> <li>Restarts in Common Lisp (2020) (HN)</li> <li>Valtan - Common Lisp to JavaScript compiler. (HN)</li> <li>Loving Common Lisp, or the Savvy Programmer's Secret Weapon (Code)</li> <li>ergolib - Library designed to make programming in Common Lisp easier.</li> <li>Complete Idiot\u2019s Guide to Common Lisp Packages (2003)</li> <li>Learn Common Lisp in one month intervals</li> <li>Parenscript - Translator from an extended subset of Common Lisp to JavaScript.</li> <li>Slime - Superior Lisp Interaction Mode for Emacs.</li> <li>Petalisp - Elegant High Performance Computing.</li> <li>Google Common Lisp Style Guide (HN)</li> <li>Kai - High-level plotter library for Common Lisp. (HN)</li> <li>Common Lisp GUI Toolkits</li> <li>Common Lisp: A Gentle Introduction to Symbolic Computation</li> <li>The Common Lisp Condition System Book (2020) (HN) (HN 2)</li> <li>Lisp Quickstart (Lobsters)</li> <li>Creating a Common Lisp implementation (2020) (HN)</li> <li>Clasp - Common Lisp implementation that seamlessly interoperates with C++ libraries and programs using LLVM for compilation to native code. (Clasp: Common Lisp using LLVM and C++ for Molecular Metaprogramming (2015)) (HN)</li> <li>Cl-Cuda - Library to use NVIDIA CUDA in Common Lisp programs.</li> <li>iterate - Extensible iteration construct for Common Lisp.</li> <li>HexstreamSoft - Public Domain Common Lisp R&amp;D.</li> <li>Opinionated Common Lisp Resources 2020</li> <li>Awesome Common Lisp</li> <li>Modern CI testing and packaging for Common Lisp</li> <li>Archive of Lisp Machine (HN)</li> <li>Common LISP Parser &amp; AST Viewer</li> <li>Common Lisp Iteration (2020)</li> <li>SLY - Sylvester the Cat's Common Lisp IDE.</li> <li>Common Lisp by Example</li> <li>Emacs For Common Lisp - Tiny ~/.emacs for Common Lisp programming explained line-by-line.</li> <li>Portacle - Portable Common Lisp Development Environment.</li> <li>Cakelisp - Performance-oriented Lisp-like language where I can have my cake, and eat it too. The goal is a metaprogrammable, hot-reloadable, non-garbage-collected language ideal for high performance, iteratively-developed programs (especially games).</li> <li>Trivia - Pattern Matcher Compatible with Optima.</li> <li>Nile - Programming Language for Declarative Stream Processing in Media Applications.</li> <li>Common Lisp implementation of Google's protocol buffers</li> <li>Debugging Lisp (2015) (HN)</li> <li>data-lens - Functional utilities for Common Lisp.</li> <li>docker-cl-example - Example projects to run/develop Common Lisp web application on Docker container.</li> <li>CLOG - Common Lisp Omnificent GUI.</li> <li>Lisper.ru - Russian Common Lisp Community. (Code)</li> <li>State of the Common Lisp ecosystem, 2020 (HN)</li> <li>Coalton - Dialect of ML embedded in Common Lisp.</li> <li>Writing Small CLI Programs in Common Lisp (2021) (HN)</li> <li>opticl - Image processing library for Common Lisp.</li> <li>Features of Common Lisp (2008) (Lobsters)</li> <li>Python vs Common Lisp, workflow and ecosystem (2019) (HN)</li> <li>CL-REPL - Full-featured REPL implementation designed to work with Roswell.</li> <li>Comparison of Common Lisp Testing Frameworks</li> <li>JSCL - Common Lisp to JavaScript compiler.</li> <li>cl-bodge - Feature-rich game framework for Common Lisp. (Web) (HN)</li> <li>Temperance - Logic programming library for Common Lisp.</li> <li>Practical? Common Lisp on the JVM: A quick intro to ABCL for modern web apps (2021)</li> <li>Common Lisp Recipes</li> <li>The Common Lisp Condition System - Beyond Exception Handling with Control Flow Mechanisms (2020)</li> <li>Coalton - Efficient, statically typed functional programming language that supercharges Common Lisp. (Article)</li> <li>Numbers in a Nutshell, an Update (2022)</li> <li>Building Common Lisp Executables (2018)</li> <li>Learning Common Lisp to beat Java and Rust on a phone encoding problem (HN)</li> <li>Radiance - Common Lisp web application environment. (Web)</li> <li>Optimising Common Lisp to try and beat Java and Rust on phone encoding 2/2 (2021) (HN)</li> <li>DRAKMA - HTTP client written in Common Lisp.</li> <li>Kina Knowledge, using Common Lisp extensively in their document processing stack (2021) (HN)</li> <li>Roswell - Common Lisp environment setup Utility.</li> <li>Common Lisp code optimisation (2020) (HN)</li> <li>Dexador - Fast HTTP client for Common Lisp.</li> <li>Learn Common Lisp by Example: GTK GUI with SBCL (2021)</li> <li>Sketch - Common Lisp environment for the creation of electronic art, visual design.</li> <li>Lessons learned after working one year as a Common Lisp Developer (2018) (HN)</li> <li>One Reason Typeclasses Are Useful (2021) (HN)</li> <li>CEPL - Lispy and REPL-friendly Common Lisp library for working with OpenGL. (HN)</li> <li>Wookie - Asynchronous HTTP server written in common lisp.</li> <li>Learn Common Lisp by Example: Qt GUI with EQL5 (2021)</li> <li>cl4py - Common Lisp for Python.</li> <li>Fast Generic Functions - Seal your generic functions for an extra boost in performance.</li> <li>sb-simd - Convenient SIMD interface for SBCL.</li> <li>cl-mpi - MPI bindings for Common Lisp with many useful extras.</li> <li>Building Setf (2022)</li> <li>Running Lisp in Production (2020) (HN)</li> <li>Cleavir - Implementation-independent framework for creating Common Lisp compilers.</li> <li>CFFI - Common Foreign Function Interface, purports to be a portable FFI for Common Lisp.</li> <li>Eclector - Portable and extensible Common Lisp Reader.</li> <li>Cloture - Clojure in Common Lisp. (HN)</li> <li>CL21 - Common Lisp in the 21st Century.</li> <li>Arrows - Implements threading macros, inspired by Clojure.</li> <li>cl-gserver - Actor framework featuring actors and agents for easy access to state and asynchronous operations.</li> <li>Xecto - Regular array parallelism in CL.</li> <li>Comparison of Common Lisp Logging Libraries</li> <li>Common Lisp Cheat Sheet</li> <li>CL-JavaScript - JavaScript compiler for Common Lisp.</li> <li>Alloy - User interface toolkit.</li> <li>Using SBCL Common Lisp as a Dynamic Library (2022) (HN)</li> <li>How to create a new Common Lisp project (with project generator) (2022)</li> <li>Common Lisp Resources (2022) (HN)</li> <li>Tutorial Series to learn Common Lisp quickly (HN)</li> <li>Trial - Game engine written in Common Lisp.</li> <li>srcweave - Literate programming system for any language.</li> <li>Lem - Common Lisp editor/IDE with high expansibility.</li> <li>Npt - ANSI Common Lisp Programming Language.</li> <li>Common Lisp intermediate book recommendation (2022)</li> <li>cl-losh - Common Lisp utilities I use a lot.</li> <li>Serapeum - Conservative library of Common Lisp utilities.</li> <li>Alexandria - Reduce duplication of effort and improve portability of Common Lisp code.</li> <li>Overlord - Build system in Common Lisp.</li> <li>cl-async - Asynchronous IO library for Common Lisp.</li> <li>Woo - Fast non-blocking HTTP server on top of libev. Written in Common Lisp.</li> <li>cmd - Utility for running external programs.</li> <li>Rove - Unit testing framework for Common Lisp applications.</li> <li>cl-notebook - Notebook-style in-browser editor for Common Lisp.</li> <li>kons-9 - Common Lisp 3D graphics code. (HN)</li> <li>Snakes - Python-like generators for Common Lisp.</li> <li>MAGICL - Matrix Algebra proGrams In Common Lisp.</li> <li>Sheeple - Dynamic, CLOS-like, Delegative Prototype-based Object-Oriented Programming Framework.</li> <li>Destructuring match in Common Lisp</li> <li>gRPC Client Library in Common Lisp</li> <li>AllegroServe - Web server written in Common Lisp. (HN)</li> <li>Reader Macros in Common Lisp (2014)</li> <li>cl-tree-sitter - Use tree-sitter via Common Lisp.</li> <li>Cookiecutter template for Common Lisp projects</li> <li>cl-str - Modern, simple and consistent Common Lisp string manipulation library.</li> <li>Common Lisp programming: from novice to effective developer (2022) (Code)</li> <li>CIEL - Extended Lisp. Batteries included.</li> <li>Colisper - Check and transform Lisp code with Comby.</li> <li>State of Common Lisp Web Development - an overview (2022)</li> <li>From Common Lisp to Julia (2022) (HN)</li> <li>Why Not: From Common Lisp to Julia (HN)</li> <li>Arrow-macros - Clojure-like arrow macros in Common Lisp.</li> <li>clingon - Command-line options parser system for Common Lisp.</li> <li>Common Lisp names all sixteen binary logic gates (HN)</li> <li>RE - Lua-style Pattern Matching for Common Lisp.</li> <li>sbcl-librarian - Opinionated interface for creating C- and Python-compatible shared libraries in Common Lisp with SBCL.</li> <li>OpenRPC for Common Lisp</li> <li>Ultralisp - Fast Common Lisp Repository. (Code)</li> <li>From Common Lisp to Julia (2022) (HN)</li> <li>Brief interview with Common Lisp co-creator Dr. Scott Fahlman (2022) (HN) (Reddit)</li> <li>easy-macros - Library to define less error-prone macros, faster.</li> <li>Imago - Image manipulation library for Common Lisp.</li> <li>Common Lisp Object System (CLOS) (HN)</li> <li>The empty list (2022)</li> <li>Astronomical Calculations for Hard SF in Common Lisp (2022) (HN)</li> <li>Application delivery for Common Lisp</li> <li>Common Lisp: 2022 in review (HN)</li> <li>Clozure Common Lisp Wiki</li> <li>SLT - Common Lisp Language Plugin for Jetbrains IDE Lineup. (HN)</li> <li>LMDB bindings for Common Lisp</li> <li>Parachute - Simple-to-use and extensible testing framework.</li> <li>iolib - Common Lisp I/O library.</li> <li>Common Lisp implementations in 2023 (HN)</li> <li>Transducers: Ergonomic, efficient data processing</li> <li>Common Lisp Quick Reference</li> </ul>"},{"location":"notes/programming-languages/lisp/janet/","title":"Janet","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/lisp/janet/#built-with-janet","title":"Built with Janet","text":"<ul> <li>Joule editor - Simple terminal-based text editor written in Janet.</li> </ul>"},{"location":"notes/programming-languages/lisp/janet/#links","title":"Links","text":"<ul> <li>argparse - CLI argument parser for Janet.</li> <li>JanetRS - Rust high level bindings for Janet.</li> <li>tree-sitter-janet - tree-sitter grammar parser for Janet.</li> <li>Joy - Full stack web framework written in janet. (Code) (HN)</li> <li>jaylib - Janet bindings to Raylib.</li> <li>HN: Janet (2023)</li> <li>Janet for Mortals (Lobsters)</li> </ul>"},{"location":"notes/programming-languages/lisp/lisp/","title":"Lisp","text":"<p>Original content by: Nikita</p> <p>SICP and Practical Common Lisp are great books. Intuition for Lisp Syntax is a nice read too.</p> <p>Carp &amp; Bass are interesting.</p>"},{"location":"notes/programming-languages/lisp/lisp/#notes","title":"Notes","text":"<ul> <li>What did Alan Kay mean by, \"Lisp is the greatest single programming language ever designed\"?</li> </ul>"},{"location":"notes/programming-languages/lisp/lisp/#links","title":"Links","text":"<ul> <li>Practical Common Lisp</li> <li>SICP</li> <li>Lisp-like DSL for Rust language</li> <li>Carp - Statically typed lisp, without a GC, for real-time applications. (HN) (HN)</li> <li>How Lisp Became God's Own Programming Language (HN) (HN 2)</li> <li>ELS 2018 Keynote: This Old Lisp</li> <li>Parinfer - Let's simplify the way we write Lisp. (Web) (Lobsters)</li> <li>Build me a LISP (HN)</li> <li>Wasp - Lisp programming language for extremely performant and concise web assembly modules.</li> <li>Lisp Koans - Language learning exercise in the same vein as the ruby koans, python koans and others. (HN)</li> <li>I Built a Lisp Compiler (2019) (Lobsters)</li> <li>g-fu - Pragmatic Lisp developed and embedded in Go.</li> <li>Land of Lisp (HN)</li> <li>Anarki - Community-managed fork of the Arc dialect of Lisp.</li> <li>Lisp Machine Manual</li> <li>C-Mera - Next-level syntax for C-like languages.</li> <li>LISP Reference Manual</li> <li>femtolisp - Lightweight, robust, scheme-like lisp implementation. (HN) (HN)</li> <li>Performance and Evaluation of Lisp Systems (1985)</li> <li>Formula One - Experiment in ways to ergonomically build syntax trees and transformations in Rust.</li> <li>Bel - Spec for a new dialect of Lisp, written in itself. (HN)</li> <li>Let Over Lambda -- 50 Years of Lisp book</li> <li>William Byrd on \"The Most Beautiful Program Ever Written\" (2017)</li> <li>Awesome Lisp Languages</li> <li>Programming Algorithms book: Dynamic Programming</li> <li>LISP programmer's manual (1960)</li> <li>femto - Minimal Lisp interpreter in Haskell.</li> <li>Rhine - Clojure-inspired Lisp on LLVM JIT featuring variable-length untyped arrays, first-class functions, closures, and macros.</li> <li>arpilisp - Lisp interpreter for Raspberry Pi implemented in a single ARM assembly file.</li> <li>Lisp: Good News, Bad News, How to Win Big</li> <li>Lisping at JPL (2002) (HN)</li> <li>Small minimalistic LISP interpreter in Node</li> <li>Understanding the Power of LISP (2020) (HN)</li> <li>GLISP - LISP-based graphic design tool.</li> <li>Programming Algorithms in Lisp (Code)</li> <li>What is the best way to learn Lisp in 2020?</li> <li>hy - Dialect of Lisp that's embedded in Python. (Docs) (Why Hy?) (HN)</li> <li>Simple lisp interpreter written from scratch in TS</li> <li>Why is Lisp not as popular as Python? (2020)</li> <li>Janet - Lightweight, expressive and modern Lisp. (HN) (Code) (Awesome) (Why I am Janet (2021)) (Lobsters) (HN) (Janet VSCode Extension) (HN)</li> <li>History of Lisp - John McCarthy (1979) (Web) (HN) (HN)</li> <li>Quasiquote - Literal Magic (2020) (Lobsters)</li> <li>Ronin - Lisp-based image processing tool. (HN)</li> <li>Ask HN: Production Lisp in 2020?</li> <li>Reading Lisp code: parentheses and indentation</li> <li>Hissp - Modular Lisp implementation that compiles to a functional subset of Python\u2014Syntactic macro metaprogramming with full access to the Python ecosystem.</li> <li>Acid Lisp - Lisp that compile to web assembly.</li> <li>slip - Lisp interpreter implemented in C.</li> <li>A baseline compiler for guile (2020)</li> <li>Kalyn - Self-hosting compiler from a Haskell-like Lisp directly to x86-64, from scratch.</li> <li>SedLisp - Lisp implementation in sed.</li> <li>LispMicrocontroller - Microcontroller that natively executes a simple LISP dialect.</li> <li>Toy Lisp 1.5 interpreter in Go by Rop Pike</li> <li>Lisp as the Maxwell\u2019s equations of software (2012) (HN)</li> <li>Closos: Specification of a Lisp operating system (2013) (HN)</li> <li>uLisp - Lisp for microcontrollers. Lisp for Arduino, Adafruit M0/M4, Micro:bit, ESP8266/32, and RISC-V boards. (HN) (Code)</li> <li>Lisp Badge - Single-board computer that you can program in uLisp. (HN)</li> <li>MIT CADR Lisp Machine Emulation</li> <li>LambdaDelta - Emulator of the LMI Lambda Lisp Machine.</li> <li>Meroko - Lisp machine emulator.</li> <li>Typed Lisp, A Primer (2019) (HN)</li> <li>The Many Faces of an Undying Programming Language (2020) (Lobsters)</li> <li>Interface Builder's Alternative Lisp timeline (2013) (Lobsters)</li> <li>Embeddable lisp/scheme interpreter written in C</li> <li>Boring Benefits of Lisp (2020)</li> <li>Review of Paul Graham's Bel, Chris Granger's Eve, and a Silly VR Rant (HN)</li> <li>Sild - Lisp Dialect.</li> <li>Mal - Make a Clojure inspired Lisp interpreter. (HN)</li> <li>Compiling a Lisp: Overture (Lobsters)</li> <li>Compiling a Lisp: Primitive unary functions (HN)</li> <li>newLISP - Lisp-like, general-purpose scripting language.</li> <li>Structure and Interpretation of Computer Programs (Code) (Racket SICP) (HN)</li> <li>A micro-manual for LISP Implemented in C (2010)</li> <li>Lisp Operating System (2013) (Lobsters)</li> <li>Little Bits of Lisp video series</li> <li>What Made Lisp Different (2001)</li> <li>Successful Lisp Book Contents</li> <li>Lisp and Haskell (2015) (HN)</li> <li>LISP From Nothing (Lobsters) (HN)</li> <li>How are Lisp REPLs different from Python or Ruby REPLs? (2020)</li> <li>An Intuition for Lisp Syntax (HN) (Lobsters)</li> <li>The Nature of Lisp (2006)</li> <li>awklisp - Lisp interpreter written in Awk.</li> <li>Pixie - Lightweight lisp suitable for both general use as well as shell scripting.</li> <li>Companies that use Lisp extensively (HN)</li> <li>LISP \u2013 Notes on its past and future, by John McCarthy (1980)</li> <li>Klisp - Minimal LISP written in about 200 lines of Ink. (Article)</li> <li>baremetalisp</li> <li>Between two Lisps (2020) (HN)</li> <li>Sugar \u2013 a typed lispy language targeting webasm/wat (2020) (HN)</li> <li>Ebisp - Embedded Lisp.</li> <li>Zuko - Basic Lisp-like programming language.</li> <li>Lisp Books</li> <li>Ask HN: I want to start learning Lisp. Where do I begin? (2020)</li> <li>Getting started with Lisp in 2019 (HN)</li> <li>Lisp Hackers - Interviews with 100x More Productive Programmers.</li> <li>Wisp - Light lisp written in C++. (HN)</li> <li>Maru - Tiny self-hosting lisp dialect. (Web)</li> <li>ToriLisp \u2013 an ersatz Lisp for tiny birds (2020) (Code)</li> <li>On repl-driven programming (2020) (Lobsters) (HN)</li> <li>Fleck - Clojure-like LISP that runs wherever Bash is.</li> <li>A rabbit hole full of Lisp (2021) (HN)</li> <li>lexpr-rs - Rust Lisp expression parser and serializer.</li> <li>Lisp, Jazz, Aikido \u2013 Three Expressions of a Single Essence (2018)</li> <li>REPL as a Service (2021)</li> <li>LispE - Version of Lisp that is ultra-minimal but contains all the basic instructions of the language. (HN)</li> <li>Why I still Lisp (2021) (HN) (Lobsters)</li> <li>A Lisp REPL as my main shell (HN)</li> <li>Ask HN: Why should we learn Lisp? (2021)</li> <li>My experience of writing Lisp in Pony (2020)</li> <li>SectorLISP - 512-byte implementation of LISP that's able to bootstrap John McCarthy's meta-circular evaluator on bare metal. (Code) (HN) (Lobsters)</li> <li>LISP with GC in 436 bytes (HN)</li> <li>Fancy defines (Lobsters)</li> <li>Swift LispKit - Framework for building Lisp-based extension and scripting languages for macOS and iOS applications.</li> <li>Datalisp: Overview of design decisions (2021)</li> <li>Lisp as an Alternative to Java (2000) (HN) (HN)</li> <li>Spaik - Lisp compiler/VM with a moving GC written in Rust.</li> <li>Orion - High level, purely functional Lisp dialect written in Rust.</li> <li>Joxa - Modern Lisp for the Erlang VM.</li> <li>Lets LISP like it's 1959 (2019)</li> <li>LIPS - Scheme based powerful lisp interpreter written in JavaScript.</li> <li>Original Hacker News Source Code (2009) (HN)</li> <li>Parentheses are Just Typechecking (2021)</li> <li>BLisp - Statically Typed Lisp Like Language. (Docs) (HN)</li> <li>Architecture of Lisp Machines (2008) (HN)</li> <li>Implementing Closures In a Compiled Lisp (2021)</li> <li>Bridje - Statically typed LISP targeting GraalVM, drawing inspiration from both Clojure, Haskell and Kotlin.</li> <li>Haskell-like patterns in Lisp (2021)</li> <li>The Most Beautiful Program Ever Written \u2013 Lisp Interpreter Written in Lisp (HN)</li> <li>Build a Lisp in Swift</li> <li>Why I will stay Janet (2021)</li> <li>How can I start learning Lisp and which dialect/compiler should I use? (2021)</li> <li>microlisp - Set of minimal LISP implementations.</li> <li>Ketos - Lisp dialect scripting and extension language for Rust programs. (HN)</li> <li>Liz - Lisp-flavored general-purpose programming language (based on Zig).</li> <li>Tiny Scheme-like Lisp interpreter written in a weekend (HN)</li> <li>jrsonnet - Rust implementation of Jsonnet language.</li> <li>The Problem with Macros (2021) (HN) (Lobsters)</li> <li>sexp-fmt - Basic S-expression formatter.</li> <li>Calcit Runner - Lisp compiling to JavaScript ES Modules. (Web)</li> <li>Atomizer - S-expression visualization tool.</li> <li>Interim - Statically-typed, low-level dialect of Lisp featuring compile-time, GC-free memory management.</li> <li>Why Lisp? (2015) (HN)</li> <li>Why Lisp? (HN)</li> <li>Autumn Lisp Game Jam 2021 Postmortem</li> <li>Slick - Lisp/Scheme-style s-expression surface syntax for the Go programming language, with a few additional features.</li> <li>Bass - Low-fidelity Lisp dialect for running cacheable commands and delivering reproducible artifacts. (HN) (Tweet)</li> <li>KamilaLisp - Lazily evaluated, functional, flexible and concise Lisp.</li> <li>Neil: Bohemian Rhapsody for Five Channels (2021)</li> <li>Symbolics Virtual Lisp Machine (C version)</li> <li>Jsonnet Language Server</li> <li>rust_lisp - Rust-embeddable Lisp, with support for interop with native Rust functions.</li> <li>Bel in Perl - Perl 5 implementation of Paul Graham's Bel.</li> <li>Jsonnet Language Server</li> <li>MiniLisp - Readable lisp in less than 1k lines of C.</li> <li>bass - Bass is a low-fidelity Lisp dialect for scripting the infrastructure.</li> <li>Kamex - Basic Lisp interpreter implemented in Elixir.</li> <li>Learning with Peter Norvig's lis.py interpreter</li> <li>miniMAL - Delightfully Diminutive Lisp. Implemented in &lt; 1 KB of JavaScript.</li> <li>Extending SectorLISP to Implement BASIC REPLs and Games (2022)</li> <li>LLisp: Lisp in Lisp</li> <li>Lisp in Production: an interview with the guys behind Nyxt Browser (2022) (HN)</li> <li>Wisp - Lisp in WebAssembly.</li> <li>(How to Write a (Lisp) Interpreter (In Python)) (2010) (HN)</li> <li>Ichigo Lisp - LISP 1.5(-ish) implementation in WebAssembly.</li> <li>Otus Lisp - Purely functional dialect of Lisp.</li> <li>Early Ideas: A Modern Lisp Machine from Scratch (2018)</li> <li>Visible Lisp Computer (2019)</li> <li>S-expression - Implementation of S-expression in JavaScript.</li> <li>Interaction Nets in JS</li> <li>Dale - Lisp-flavoured C.</li> <li>Sjsonnet - JVM implementation of the Jsonnet configuration language.</li> <li>rs-lisp - Small lisp interpreter written in Rust.</li> <li>Why we need Lisp machines (HN)</li> <li>LISP 1.5 implementation on Gauche</li> <li>Lurk - Statically scoped dialect of Lisp, influenced by Scheme and Common Lisp.</li> <li>Lisp in Five Days</li> <li>Bio - Lisp dialect written in Zig.</li> <li>Hedgehog - Concise implementation of a lisp-like language for low-end and embedded devices.</li> <li>Lisp Variations - Variations on lisp, exploring reflection.</li> <li>l2l - Language that is a superset of Lisp and Lua.</li> <li>Why Lisp macros are cool, a Perl perspective (2005) (HN)</li> <li>Let's create a Lisp in Rust (Code)</li> <li>(Yet Another) Lisp In Go (2022) (HN)</li> <li>Ask HN: What does a developer need to know to build their own Lisp from scratch? (2022)</li> <li>hlisp - Lisp interpreter, written in Haskell.</li> <li>The First Lisp Compiler (HN)</li> <li>Learn Lisp The Hard Way</li> <li>Toy implementation of Lisp written in Zig</li> <li>Lisp in 99 lines of C and how to write one yourself (HN)</li> <li>Jaspr - Lisp for JSON.</li> <li>lisp.py</li> <li>ydiff - Structural comparison tool for Lisp family languages, with experimental C++, JS support.</li> <li>A Guile Steel smelting pot (2022) (Lobsters)</li> <li>Ask HN: What Is the Lisp \u201cEnlightment\u201d? (2022)</li> <li>An Intuition for Lisp Syntax (Lobsters)</li> <li>Pureli - Purely functional, dynamically typed, parallel evaluated Lisp-like programming language.</li> <li>tiny-lisp - Small implementation of LISP, written in standard C11.</li> <li>Kamby - Lisp dialect with some conventions to create a language more intuitive and compact. (Web) (HN)</li> <li>Cene Mk - Lisp lookalike with hygienic open-world and closed-world compiler extension.</li> <li>MalbolgeLISP - LISP interpreter written in Malbolge.</li> <li>LambdaLisp - Lisp Interpreter That Runs on Lambda Calculus. (Article) (HN)</li> <li>Mini Lisp with Cheney GC (Reddit)</li> <li>Mini Lisp with mark-sweep GC</li> <li>Zero Feet: a proposal for a systems-free Lisp</li> <li>They Called It LISP for a Reason: List Processing (2005) (HN)</li> <li>Text Generation LispE with a Grammar</li> <li>Lisp implementation of Lurk</li> <li>Why Lisp? (HN) (Lobsters)</li> <li>x7 - Speedy self-documenting lisp in Rust.</li> <li>Lisp as the Maxwell\u2019s Equations of Software (2012) (HN)</li> <li>The one about Lisp interactivity (2022) (HN)</li> <li>The German School of Lisp (2011)</li> <li>Lisp written in Nix</li> <li>Conceptual Introduction to Spritely Goblins (2022)</li> <li>Kilo LISP - Kilo Byte-Sized Lisp System. (HN)</li> <li>Open Closures: Disclosing lambda\u2019s inner monomaniac object</li> <li>Minimal GIF decoder in LISP (2022)</li> <li>What Are the True Innovations of Lisp? (2022) (HN)</li> <li>Reflecting on Transducers (2023)</li> <li>Debugging Lisp: trace options, break on conditions (2022) (HN)</li> <li>Learn Lisp The Hard Way</li> <li>Lisp curse vs Lisp envy (by Mauricio Szabo) (2023)</li> <li>Typed Lisp, A Primer (2019) (HN)</li> <li>GLisp - LISP dialect implemented in Go.</li> <li>Sussman Explains the End of SICP (2023) (HN)</li> <li>A Tale of Lisp (by Renzo Borgatti) (2022)</li> <li>The program is the database is the interface (HN)</li> <li>Toodle Studio - Art playground with Lisp and turtles. (Code) (HN)</li> <li>I still Lisp (2021) (HN)</li> <li>Writing a simple Lisp interpreter in Rust (2023) (HN)</li> <li>Dak - Lisp like language that transpiles to JavaScript.</li> <li>Modern Macros (2023) (Lobsters)</li> <li>Erik Naggum's Ideas and Principles</li> <li>Erik Naggum's archives</li> </ul>"},{"location":"notes/programming-languages/lisp/racket/","title":"Racket","text":"<p>Original content by: Nikita</p> <p>Beautiful Racket &amp; Teach Yourself Racket are great intros.</p> <p>Racket News is nice to stay up to date. Zuo &amp; Typed Racket seem nice.</p>"},{"location":"notes/programming-languages/lisp/racket/#links","title":"Links","text":"<ul> <li>Racket documentation</li> <li>The Racket Guide</li> <li>Why language-oriented programming? Why Racket? (2019) (HN)</li> <li>DrRacket - IDE for Racket.</li> <li>Racket 7.3 (HN)</li> <li>Why Racket? Why Lisp? (HN) (HN)</li> <li>Racket is an acceptable Python (2019) (Lobsters) (HN)</li> <li>Racket Code</li> <li>Beautiful Racket - Introduction to language-oriented programming using racket. (Code)</li> <li>Hackett - Attempt to implement a Haskell-like language with support for Racket\u2019s macro system, built using the techniques described in the paper Type Systems as Macros.</li> <li>Learning Racket #1: Introduction</li> <li>Awesome Racket</li> <li>I built this website using Racket. Here's what i can do now.</li> <li>Native Applications with Racket (2020) (Lobsters)</li> <li>Running Racket on iOS (2020)</li> <li>Frog - Static blog generator implemented in Racket, targeting Bootstrap and able to use Pygments.</li> <li>The Missing Guide to Racket's Web Server (2020)</li> <li>Tips, tricks, articles, and tutorials for getting the most out of Racket. By Jesse Alama.</li> <li>Racket Manifesto</li> <li>db Racket packages</li> <li>Turnstile+ - Racket-based framework for creating extensible and reusable typed languages.</li> <li>Typed Racket Guide</li> <li>Racket is 25 years old (2020) (HN)</li> <li>Racket Stories</li> <li>Racket News (Code)</li> <li>sham - DSL for runtime code generation in racket.</li> <li>PasteRack - Evaluating pastebin for Racket. (Code)</li> <li>cKanren - Constraint programming language embedded in Racket.</li> <li>Deploying Racket Web Apps (2020) (Lobsters)</li> <li>Racket Programming the Fun Way by James Stelly (2020) (Review)</li> <li>Rebuilding Racket on Chez Scheme Experience Report (2020)</li> <li>Practical guide to Racket macros</li> <li>Learn Racket in Y Minutes</li> <li>RacketCon</li> <li>Parsing propositional logic in 33 lines of Racket (2020) (HN)</li> <li>Racket Continuations Study Group</li> <li>GoLisp - Racket DSL to make code-generation for Go.</li> <li>2048 - Racket Edition - Clean-room, functional implementation in Racket of the game 2048.</li> <li>racket-package-ci-action - GitHub Action for building and testing Racket packages.</li> <li>Sauron - IDE for Racket language.</li> <li>Typed Racket - Racket's gradually-typed sister language which lets you add statically-checked type annotations to your programs.</li> <li>datatype - Algebraic(-like) Data Types for Racket.</li> <li>Rosette - Solver-aided programming language that extends Racket with language constructs for program synthesis, verification, and more. (Code)</li> <li>Typed Rosette - Experimental typed version of the Rosette language.</li> <li>Racket GitHub</li> <li>Racket Cheat Sheet (Code)</li> <li>Demonstration of implementing a language in Racket</li> <li>racket-format - Format Racket source code.</li> <li>Racket for Visual Studio Code</li> <li>Running Racket CS on iOS (2021)</li> <li>RacketScript - Racket to JavaScript Compiler. (HN) (Web) (HN)</li> <li>Rackt - Ultrasmall (~70 loc) React wrapper written in RacketScript.</li> <li>racket-http-easy - High-level HTTP client for Racket.</li> <li>Racket v8.0 (2021) (HN)</li> <li>Picturing Programs: A Racket Book (2010)</li> <li>racket-langserver - Language Server Protocol implementation for Racket.</li> <li>Racket GUI packages</li> <li>brag - Racket DSL for generating parsers from BNF grammars.</li> <li>Goblins: A transactional, distributed actor model environment (HN)</li> <li>MrEd Designer - WYSIWYG program to create GUI applications for Racket.</li> <li>Building Web Services with Racket (2021)</li> <li>Racket 8.1 (2021) (HN)</li> <li>sketching - Racket library inspired by Processing.</li> <li>imin - Compiler for (a subset of) Racket -&gt; x86-64, written in Racket.</li> <li>cli - Language for writing command line interfaces in Racket.</li> <li>racket-gui-easy - Declarative GUIs in Racket. (Video) (Lobsters)</li> <li>How do I implement Racket from scratch? (2021)</li> <li>What drew you to Racket? (2021)</li> <li>fmt - Code formatter for Racket.</li> <li>Abstract Machine for Racket Bytecode</li> <li>Realm of Racket - Learn to Program, One Game at a Time.</li> <li>Racket v8.3 (2021) (HN)</li> <li>Racket Discussions</li> <li>Scribble - Racket Documentation Tool.</li> <li>Learn Racket by doing - Practice language features by fixing topic-oriented unit tests.</li> <li>Crafting Interpreters in Typed Racket (2021)</li> <li>Parsing propositional logic in 33 lines of Racket (2020)</li> <li>Implementing Simple Hash Tables in Racket (2020)</li> <li>The Rosette Guide</li> <li>Implementation of the Lox language in Racket</li> <li>The Blog is the program (2021)</li> <li>Rhombus - Language based on Racket. (Does Rhombus risk missing the trees for enforestation?)</li> <li>The Relational Parser - Core-OMeta parser embedded in Racket/staged-miniKanren.</li> <li>rascas - Computer Algebra System for Racket.</li> <li>Quickscript - Scripting engine for DrRacket.</li> <li>Qi - Functional, Flow-Oriented DSL. (Interactive Tutorial)</li> <li>polyglot - Creates websites using a mix of any DSLs you want in a single source file.</li> <li>Parallelizing the Racket Web Server (2021)</li> <li>curly-fn - Meta-language for adding Clojure-style shorthand function literals to arbitrary Racket languages.</li> <li>functional - Functional interfaces and datatypes for Racket.</li> <li>Zuo - Tiny Racket for Scripting. (Docs) (HN)</li> <li>Why learn Racket? A student's perspective (2022)</li> <li>Typed Racket: the good and the bad (2021) (HN)</li> <li>How to Organize Your Racket Library (2022) (Reddit)</li> <li>blackboard - OpenType Math layout and rendering engine in Racket.</li> <li>PLT redex model of MIR and its type system</li> <li>Algebraic Racket - Algebraic structures for untyped Racket.</li> <li>Template Macros - Racket Meta-Program Generator.</li> <li>fluent - UNIX style pipes and a lambda shorthand syntax to make your Racket code more readable.</li> <li>Improving Logging With Racket (2022)</li> <li>Dependency Management in Racket Applications (2020)</li> <li>typesetting - Document-layout tools.</li> <li>sci - Racket libraries for scientific computing.</li> <li>racket-analysis - Analysis of Racket code base.</li> <li>racket-review - Linter for Racket.</li> <li>Embedding of some of SQL into Racket</li> <li>Prototypes: Object Orientation, Functionally</li> <li>Syndicate - Networked, Concurrent, Functional Programming Language for interactive programs.</li> <li>Rake - Compiling DSLs to high-level hardware instructions.</li> <li>Zuo - Tiny Racket for Scripting.</li> <li>Racket gains new build system using tiny Scheme implementation Zuo (Lobsters)</li> <li>collections - Generic collections API for Racket.</li> <li>raco-env-lib - Virtualenv like tool for Racket.</li> <li>RacketScript Playground</li> <li>Racket v8.5 (2022) (HN)</li> <li>qi - General-purpose functional DSL.</li> <li>Pycket - Racket/Scheme implementation that is generated using the RPython framework.</li> <li>Urlang - JavaScript with a sane syntax. Written in Racket.</li> <li>Whalesong - Racket to JavaScript Compiler. (HN)</li> <li>dynamic-ffi - Auto define Racket bindings to C by parsing header files.</li> <li>package-analysis - Racket package for analyzing the Racket package ecosystem.</li> <li>koyo - Web development toolkit for Racket.</li> <li>Examples of the nice parts of Racket</li> <li>with-cache - Simple, filesystem-based caching for Racket.</li> <li>Zordoz - Manipulating racket bytecode.</li> <li>Ray tracing with Racket</li> <li>set-extras - Some extra functionalities for set in Typed Racket.</li> <li>json-type-provider - Well-typed JSON parser generator inspired by Type Provider.</li> <li>Pyffi - Use Python from Racket. (Docs) (HN)</li> <li>Lang Party Summer 2022 - Write a language with Racket this summer.</li> <li>Certifying Interpreters in Racket (2022)</li> <li>Racket-&gt;Rhombus: To Sexp or not to Sexp? (2022) (Lobsters)</li> <li>Racket Hacking: SwiftUI + Racket (2022)</li> <li>Common Lisp VS Racket (HN)</li> <li>Macro-Embedding Compiler Intermediate Languages in Racket (2022)</li> <li>Argo - JSON Schema validator for Racket.</li> <li>gann - Genetic Algorithm based Neural Networks for Racket.</li> <li>Corpse Reviver - Sound and efficient gradual typing via contract verification.</li> <li>Redex Parameters - Parameters for extensions in Redex.</li> <li>Awesome Racket and Scheme</li> <li>lens - Racket package for creating and composing pure functional lenses.</li> <li>Fractalide - Reusable Reproducible Composable Software.</li> <li>R-cade - Retro Game Engine for Racket.</li> <li>raco-run - Easier running Racket submodules on the command line.</li> <li>Racket Static Web - Little raco command to serve some files on the web.</li> <li>disassemble - Disassembler for Racket.</li> <li>fancy-app - Scala-style magic function application form.</li> <li>Pict3D - 3D engine with a purely functional API.</li> <li>Resyntax - Racket refactoring engine.</li> <li>Shallow Typed Racket (2020)</li> <li>Intermediate Student with Lambda (ISL+) Enhanced with Specification support via Quickcheck</li> <li>Introduction to Racket with Pictures</li> <li>Teach Yourself Racket</li> <li>Safe Foreign Callouts from Racket to Swift (2023)</li> <li>case-kw-lambda - Variants of case-lambda and case-&gt; that support keyword and optional arguments.</li> <li>Racket fixw - Racket formatter that only fixes whitespaces.</li> <li>Regraph - Racket E-graph Library.</li> <li>Creating minimal language in Racket</li> <li>Racket grammar for tree-sitter</li> <li>pdb - Multi-file check-syntax database.</li> <li>Racket dbg - Server, client and UI for remotely debugging Racket applications.</li> <li>Racket Protocol Buffers - Protocol Buffers implementation for Racket.</li> <li>data-frame - Data frame implementation for Racket.</li> </ul>"},{"location":"notes/programming-languages/lisp/scheme/","title":"Scheme","text":"<p>Original content by: Nikita</p> <p>The Little Typer is a nice book. Scheme Primer is nice summary.</p> <p>Marwood is nice Scheme implementation.</p>"},{"location":"notes/programming-languages/lisp/scheme/#links","title":"Links","text":"<ul> <li>The Scheme Programming Language book</li> <li>Gambit - Efficient implementation of the Scheme programming language.</li> <li>Writing a Scheme to x86 compiler by following Abdulaziz Ghuloum's \"An Incremental Approach to Compiler Construction\"</li> <li>Chez Scheme - Supports all standard features of Scheme, including first-class procedures, proper treatment of tail calls, continuations, user-defined records, libraries, exceptions, and hygienic macro expansion. (HN)</li> <li>Zabavno x86 emulator - x86 emulator in Scheme.</li> <li>Toski - Prototype new debugging tool for Scheme.</li> <li>Scheme fatigue (2020)</li> <li>Advanced Scheme: Some Naughty Bits</li> <li>Akku.scm - Scheme package manager. (Code)</li> <li>Nanopass Compiler Library - Embedded DSL for writing compilers in Scheme.</li> <li>Irken Compiler - Statically typed variant of Scheme. Or a lisp-like variant of ML.</li> <li>Gerbil Scheme - Opinionated dialect of Scheme designed for Systems Programming, with a state of the art macro and module system on top of the Gambit runtime. (Code) (Lobsters) (HN)</li> <li>pontiff - Haskell-style build system for chicken scheme.</li> <li>Fibers - Facility that provides Go-like concurrency for Guile Scheme, in the tradition of Concurrent ML.</li> <li>Practical Chicken Scheme with Emacs: hello-world webserver (2017)</li> <li>The evolution of a Scheme programmer (2020) (Lobsters)</li> <li>Awesome Scheme</li> <li>Awesome Scheme 2</li> <li>A New R6RS Scheme Compiler (2019) (Lobsters)</li> <li>STklos - Free Scheme system mostly compliant with the languages features defined in R7RS small.</li> <li>A Simple Scheme Compiler (1997) (HN)</li> <li>Planet Scheme - Community Scheme Blog.</li> <li>CHICKEN Scheme wiki</li> <li>CHICKEN User's Manual</li> <li>Scheme C FFI (HN)</li> <li>SICP done in Scheme</li> <li>Loko Scheme - Optimizing R6RS Scheme compiler.</li> <li>Unsyntax - Sane implementation of R7RS Scheme. (Lobsters)</li> <li>s7 Scheme - Scheme implementation intended as extension language for other applications. (HN)</li> <li>Cyclone Scheme - Brand-new compiler that allows practical application development using R7RS Scheme. (Web) (HN)</li> <li>SRFIs for Chez Scheme</li> <li>Compiling Scheme to C with flat closure conversion</li> <li>Bibliography of Scheme-related Research</li> <li>scheme.rs - Simple yet comprehensive scheme interpreter in rust.</li> <li>Functional Geometry with Gambit Scheme and Raylib - Implementation based in Peter Henderson's paper \"Functional Geometry\". (HN)</li> <li>Guile Scheme - General-purpose, high-level programming language.</li> <li>Lokke - Clojure for Guile.</li> <li>pfds - Set of purely functional data structures written in R6RS Scheme.</li> <li>Sin's Scheme Compiler - Mostly working compiler from some non-standards compliant Scheme to LLVM IR. Written for a compilers class.</li> <li>QSCM - A tiny bootstrapped Scheme</li> <li>Tehila - 3D engine for Scheme.</li> <li>steel - Embedded scheme interpreter in Rust.</li> <li>Gauche - Scheme Scripting Engine.</li> <li>A love letter to s7 Scheme (2016)</li> <li>Using Scheme to Find the Median of Two Sorted Integer Lists (2021) (HN)</li> <li>The Seasoned Schemer Book (Code)</li> <li>Thoughts on Racket &amp; Chez Scheme (Lobsters)</li> <li>LispPad - Lightweight Scheme IDE on macOS and iOS.</li> <li>TmpLisp - Implementation of Scheme in C++ Template Metaprogramming.</li> <li>10 ways GNU Guile is 10x better (2021)</li> <li>Snap is Scheme disguised as Scratch (HN)</li> <li>HN: Chicken Scheme (2021)</li> <li>BiwaScheme - Scheme interpreter written in JavaScript. (Web)</li> <li>Exploring Scheme implementations for API programming coming from Node.js, Go (2019)</li> <li>Ribbit - Small and portable Scheme implementation with AOT and incremental compilers that fits in 4K.</li> <li>Scheme-to-C - Tiny nanopass compiler for compiling a small subset of Scheme to C.</li> <li>Scheme-to-LLVM</li> <li>Normalization-by-evaluation in miniKanren</li> <li>schemeCompiler - Compiler for a subset of Scheme in Haskell.</li> <li>Write You a Scheme in Haskell (Web)</li> <li>Interactive Scheme Primer, written in Scheme</li> <li>A small scheme VM, compiler, and REPL in 4k (2021) (HN)</li> <li>Scheme interpreter in C (Reddit)</li> <li>MIT Scheme on Apple Silicon (2021) (HN)</li> <li>VLISP: A Verified Implementation of Scheme (1993) (HN)</li> <li>Lambda Quest - Interactive Scheme environment with Canvas. (Code)</li> <li>TinyScheme R7 - Small Scheme language implementation written in C language.</li> <li>R7RS Scheme Implementation in WebAssembly (HN)</li> <li>Write Yourself a Scheme in 48 Hours (F# Code)</li> <li>lviv - Stack-based RPN functional programming language. Written in Scheme.</li> <li>Waffle - Simple Scheme implementation with bytecode VM.</li> <li>Fiddle - Scheme-like CBPV language with Racket Interoperability.</li> <li>agda2scheme - Agda backend for Chez Scheme.</li> <li>The Reasoned Schemer Book (2018) (Code) (Code)</li> <li>Haskeme - Compiler translates Scheme source code written with I-Expressions (indented expressions) into S-Expressions (symbolic expressions).</li> <li>Bob - Implementation of Scheme in Python and C++.</li> <li>Braces - Toy scheme compiler and VM in rust.</li> <li>miniKanren with symbolic constraints</li> <li>miniKanren with symbolic constraints with better performance</li> <li>tinyKanren - Simplified version of the original miniKanren.</li> <li>CLP(Rosette) on top of miniKanren</li> <li>FLISP - Scheme-like Lisp interpreter that can also run as an operating system.</li> <li>Schism - Compiler from Scheme to WebAssembly.</li> <li>thunderchez - Libraries for Chez Scheme productivity.</li> <li>The Little Typer (Review) (HN)</li> <li>The Missing Prelude to The Little Typer's Trickiest Chapter (2022)</li> <li>Scheme interpreter in Scala</li> <li>Scheje - Scheme in Clojure.</li> <li>Going from Python to Guile Scheme (Lobsters)</li> <li>A Scheme Primer (Lobsters) (HN)</li> <li>MIT Scheme Documentation</li> <li>The Why of Y</li> <li>scheme.rs - Revised Report on the Algorithmic Language Scheme.</li> <li>Schemepunk - Kitchen-sink utility library for several R7RS Scheme dialects.</li> <li>\u201cMeta-circular\u201d Static Types (2022)</li> <li>vonuvoli Scheme - Scheme based programming language implemented in Rust, which supports most of the R7RS standard.</li> <li>Unlock Lisp / Scheme's magic: beginner to Scheme-in-Scheme in one hour</li> <li>An opinionated guide to scheme implementations (2013) (HN)</li> <li>Scsh - Open-source Unix shell embedded within Scheme.</li> <li>Marwood - Embeddable Scheme R7 Compiler &amp; Runtime written in Rust.</li> <li>Catbird: An experimental game engine for Scheme programmers (2022)</li> <li>Growing a Networked Garden with Spritely Goblins (2022)</li> <li>Hop - Multitier JavaScript.</li> <li>Practical Scheme (HN)</li> <li>Scheme Libraries</li> <li>Scheme structured access to bytevector contents</li> <li>Nugget - Compiler for a tiny subset of the Scheme language.</li> <li>Chibi-Scheme - Minimal Scheme Implementation for use as an Extension Language.</li> <li>Chez Scheme backend for PureScript</li> </ul>"},{"location":"notes/programming-languages/php/php/","title":"PHP","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/php/php/#links","title":"Links","text":"<ul> <li>Taking PHP Seriously (2016)</li> <li>Clean Code PHP</li> <li>A look at modern PHP (2020) (HN)</li> <li>25 Years of PHP History (2020) (HN) (Code)</li> <li>Laravel beyond CRUD - Building larger-than-average web applications.</li> <li>PHP 8: before and after (2020) (HN)</li> <li>Object Oriented PHP (Lobsters)</li> <li>KPHP - PHP compiler. It compiles a limited subset of PHP to a native binary running faster than PHP.</li> <li>PHP Language Spec</li> <li>Laravel - Web application framework with expressive, elegant syntax. (Web)</li> <li>Wink - Laravel-based publishing platform.</li> <li>Serverless Laravel - Laravel Vapor masterclass.</li> <li>PHP Internals - Dedicated to providing resources on PHP's internals.</li> <li>Static analysis tools for PHP</li> <li>TNTSearch - Fully featured full text search engine written in PHP.</li> <li>Thinking Functionally in PHP (2020)</li> <li>The PHP Interpreter Code</li> <li>PHP in 2021 (HN)</li> <li>Laravel Learning Path</li> <li>LAMP Stack History: It\u2019s Everywhere, But Developers Hate It (2021) (Lobsters)</li> <li>Codeception - Full-stack testing PHP framework. (Web)</li> <li>How Laravel Livewire works (2021) (HN)</li> <li>Revolt - Rock-solid event loop for concurrent PHP applications.</li> <li>How PHP Opcache Works (2021) (HN)</li> <li>The Road to PHP: Static Analysis</li> <li>Yes, PHP Is Worth Learning/Using in $Current_year (2021) (HN)</li> <li>What's Next In PHP? (with James Brooks and Freek Van der Herten) (2021)</li> <li>Termwind - Build unique and beautiful PHP command-line applications, using the Tailwind CSS API.</li> <li>Leaf - PHP framework that helps you create clean, simple but powerful web apps and APIs quickly and easily.</li> <li>PHP in 2022 (HN)</li> <li>PHP: The Right Way - Easy-to-read, quick reference for PHP best practices, accepted coding standards, and links to authoritative tutorials around the Web. (Code) (HN)</li> <li>PHP-UP - Cross-Platform PHP version manager.</li> <li>Modern PHP (2022) (HN) (Lobsters)</li> <li>NoVerify - Fast linter (code static analysis utility) for PHP.</li> <li>Can I PHP? - PHP feature support by version.</li> <li>PHP Developer roadmap</li> <li>I still love PHP and JavaScript (2022) (HN)</li> <li>PHP on Netlify Edge Functions</li> <li>PHP Monitor - Lightweight macOS utility app that runs on your Mac and displays the active PHP version in your status bar.</li> <li>FrankenPHP - Modern App Server for PHP. (HN)</li> <li>Relay - Next-generation caching layer for PHP.</li> <li>PHP, Symfony and Svelte boilerplate</li> <li>ext-php-rs - Bindings for the Zend API to build PHP extensions natively in Rust.</li> <li>PHP 8.2 (2022) (HN)</li> <li>Devenv: Compose a Developer Environment Easily for PHP with Nix (2022) (HN)</li> <li>PHP Parser - Handwritten fault-tolerant, recursive-descent parser for PHP written in Rust.</li> <li>Porter - Spin up your development background processes with ease. (HN)</li> <li>PHP in 2023 (HN)</li> <li>PXP - Superset of PHP with extended syntax and runtime capabilities.</li> <li>RoadRunner - High-performance PHP application server, process manager written in Go and powered with plugins.</li> </ul>"},{"location":"notes/programming-languages/python/python/","title":"Python","text":"<p>Original content by: Nikita</p> <p>Memray is useful python memory profiler. Minimum Viable Python is a good overview.</p> <p>Ruff is nice linter.</p> <p>Taichi language is interesting as it's embedded Python but with parallel code execution.</p>"},{"location":"notes/programming-languages/python/python/#notes","title":"Notes","text":"<ul> <li>Global interpreter lock (or GIL) is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once.</li> <li>Create separate enviornments in Conda for each program to avoid dependency issues.</li> <li>Tricks to speed up python: 1. asyncio.gather argument ordering by IO wait time (no C). 2. Shared filters in SQLAlchemy Core (no C). 3. Custom construction of Pandas DataFrame from asyncpg.Record-s (with C). 4. Iterating lists without GIL in Cython (with C). 5. Zero-copy (de)serialization data structure (no C). 6. Replacing pandas groupby with pure numpy (no C).</li> <li>\"gradual typing\" is often difficult to implement in established Python packages. The issue is that it runs entirely counter to the \"Easier to Ask for Forgiveness than Permission\" (EAFP) coding style long advocated in the Python language.</li> <li>Classic Python speed-bump: default values for function arguments are computed once, and shared for all calls. If you mutate them, the effect persists! Use None instead.</li> <li>Instead of list comprehensions, consider Python generator comprehensions (parens instead of square brackets). They use the same syntax, but are lazy. Less space, and can be less computation</li> </ul>"},{"location":"notes/programming-languages/python/python/#code","title":"Code","text":"<pre><code># read file line by line\nwith open('filename') as f:\ncontent = f.readlines()\n</code></pre> <pre><code># Iterate over list\nfor i, _ in enumerate(nums):\n..\n</code></pre>"},{"location":"notes/programming-languages/python/python/#links","title":"Links","text":"<ul> <li>Learn Python in Y Minutes</li> <li>Python 3 cheat sheet</li> <li>Pyre Check - Performant type-checking for python. (Article) (Web) (HN)</li> <li>Optional Static Typing for Python - Guido van Rossum (2018)</li> <li>WTF Python - Exploring and understanding Python through surprising snippets. (HN) (HN)</li> <li>My Python Development Environment, 2020 Edition (2019) (HN)</li> <li>Python 3 with pleasure</li> <li>The Hitchhiker\u2019s Guide to Python!</li> <li>Structuring Your Python Project</li> <li>Awesome Python Features Explained Using Harry Potter</li> <li>Learn python - Playground and cheatsheet for learning Python.</li> <li>Py-Spy - Sampling profiler for Python programs.</li> <li>Profiling - Interactive continuous Python profiler.</li> <li>Pytype - Static analyzer for Python code.</li> <li>gpython - Python interpreter written in Go \"batteries not included\".</li> <li>RustPython - Python Interpreter written in Rust. (HN) (HN)</li> <li>Comprehensive Python Cheatsheet</li> <li>Awesome Python Security resources</li> <li>Pyright - Static type checker for the Python language. (HN)</li> <li>cpython - Python programming language source code.</li> <li>PySnooper - Never use print for debugging again.</li> <li>Python at Netflix (2019)</li> <li>Things you\u2019re probably not using in Python 3 \u2013 but should (2019) (HN)</li> <li>Black - Uncompromising Python code formatter. (HN) (HN)</li> <li>Amber Brown: Batteries Included, But They're Leaking (HN)</li> <li>Python Cheatsheet (Code)</li> <li>PyOxidizer - Modern Python application packaging and distribution tool.</li> <li>isort - Python utility / library to sort imports.</li> <li>What's coming in Python 3.8 (HN)</li> <li>Python Handout - Turn Python scripts into handouts with Markdown and figures.</li> <li>HN: Python Is Eating the World (2019)</li> <li>Your Guide to the CPython Source Code (2019)</li> <li>30 seconds of python - Curated collection of useful Python snippets that you can understand in 30 seconds or less.</li> <li>ptpython - Better Python REPL.</li> <li>cython - Optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex).</li> <li>Ask HN: How do you handle/maintain local Python environments? (2019)</li> <li>CVXPY - Python-embedded modeling language for convex optimization problems.</li> <li>Pythran - Ahead of time compiler for a subset of the Python language, with a focus on scientific computing.</li> <li>How to Python in VS Code</li> <li>Airspeed Velocity - Primarily designed to benchmark a single project over its lifetime using a given suite of benchmarks.</li> <li>New features planned for Python 4.0 satire</li> <li>Instant-feedback, instant-debugging Python coding (2019)</li> <li>HN: What\u2019s New in Python 3.8 (2019)</li> <li>A Talk Near the Future of Python (2019)</li> <li>Pyinstrument - Call stack profiler for Python. Shows you why your code is slow.</li> <li>reloading - Python utility to reload a loop body from source on each iteration without losing state.</li> <li>Static Analysis at Scale: An Instagram Story (2019)</li> <li>Python Type Checking course</li> <li>Python Enhancement Proposals (Web)</li> <li>Cool Python features for machine learning that I used to be too afraid to use</li> <li>Python: better typed than you think (2019)</li> <li>hython - Haskell-powered Python 3 interpreter. (Article)</li> <li>Python -&gt; Speed blog - Learn tools and techniques to help you ship better Python software, faster.</li> <li>pipx - Install and Run Python Applications in Isolated Environments.</li> <li>pyperf - Toolkit to run Python benchmarks.</li> <li>Flit - Simplified packaging of Python modules.</li> <li>Python debugger package for use with Visual Studio and Visual Studio Code</li> <li>Pyflame - Ptracing Profiler For Python.</li> <li>Classic Computer Science Problems in Python book (2019)</li> <li>PyInstaller - Freeze (package) Python programs into stand-alone executables. (Web) (HN)</li> <li>Structuring Your Project (HN)</li> <li>Pympler - Development tool to measure, monitor and analyze the memory behavior of Python objects in a running Python application.</li> <li>Poetry - Python dependency management and packaging made easy. (Web) (HN)</li> <li>SICP in Python</li> <li>The Little Book of Python Anti-Patterns (Code)</li> <li>Creator of Python Programming Language, Guido van Rossum | Oxford Union (2019)</li> <li>scalene - High-performance CPU and memory profiler for Python.</li> <li>Iterables vs. Iterators vs. Generators (2014)</li> <li>Making Python Programs Blazingly Fast (2020) (HN)</li> <li>Python built-ins worth learning (2019) (HN)</li> <li>Python Coding Guidelines for Sanity</li> <li>Human's Ultimate Guide to setup.py</li> <li>Python Guide by NSA</li> <li>Python Packaging User Guide</li> <li>Math Symbols Explained with Python (HN)</li> <li>MonkeyType - System for Python that generates static type annotations by collecting runtime types. (HN)</li> <li>CrossHair - Static analysis tool for Python that blurs the line between testing and type systems.</li> <li>Introduction to Python and Programming (2020) (HN)</li> <li>Vulture - Finds unused code in Python programs.</li> <li>Byterun - Python implementation of a Python bytecode runner.</li> <li>Clean Code Python</li> <li>cython - Most widely used Python to C compiler.</li> <li>HPy - Better API for extending Python in C. (Hello, HPy) (Web) (HN)</li> <li>Safety checks your installed dependencies for known security vulnerabilities</li> <li>The Composition Over Inheritance Principle</li> <li>Building Finite State Machines with Python Coroutines (HN)</li> <li>Awesome Python</li> <li>Distill: Why do we need Flask, Celery, and Redis? (2019) (HN)</li> <li>Building on solid ground: ensuring reproducible Docker builds for Python (2020) (Lobsters)</li> <li>Python LSP Server - Fork of the python-language-server project, maintained by the Spyder IDE team and the community.</li> <li>Python Language Server (unmaintained)</li> <li>HN: Best Practices for Working with Configuration in Python Applications (2020)</li> <li>pdb++ - Drop-in replacement for pdb.</li> <li>poetry2nix - Convert poetry projects to nix automagically.</li> <li>Ultimate Setup for Your Next Python Project (2020) (Lobsters)</li> <li>reorder_python_imports - Tool for automatically reordering python imports. Similar to isort but uses static analysis more.</li> <li>Python performance: it\u2019s not just the interpreter (2020) (HN)</li> <li>Automating Every Aspect of Your Python Project (2020)</li> <li>Python Generated Sequence Diagrams (2020) (HN)</li> <li>GraalVM Implementation of Python</li> <li>pyp - Easily run Python at the shell! Magical, but never mysterious.</li> <li>Hypermodern Python (2020) (HN) (Lobsters)</li> <li>pyanalyze - Static analysis tool for Python.</li> <li>Full Speed Python - Book aims to teach the Python programming language using a practical approach.</li> <li>Practical Python Programming course (Code)</li> <li>Milksnake - Extension for setuptools that allows you to distribute dynamic linked libraries in Python wheels in the most portable way imaginable.</li> <li>Replacing Bash Scripting with Python</li> <li>Overview of Python Dependency Management (2020) (HN)</li> <li>Guide to Python Debugging (2020) (HN)</li> <li>Python for Lisp Programmers (2000) (HN)</li> <li>Intermediate Python book</li> <li>Using enumerated types in Python (2020) (HN)</li> <li>Subpar - Utility for creating self-contained python executables. It is designed to work well with Bazel.</li> <li>Python Wheels - New standard of Python distribution. (HN)</li> <li>Calm Code - Learn code calmly. (HN)</li> <li>How async should have been in Python (2020) (Lobsters)</li> <li>Pycopy - Minimalist and memory-efficient Python implementation. Good for desktop, cloud, constrained systems, microcontrollers, and just everything. (HN)</li> <li>Packaging without setup.py (2020)</li> <li>Async Python is not faster (2020) (HN) (Lobsters) (HN)</li> <li>Advanced pytest techniques I learned while contributing to pandas (2020) (Lobsters)</li> <li>Effective Python book (Code)</li> <li>Specific ways to write better Python (2017) (HN)</li> <li>Learning Scientific Programming with Python</li> <li>Development with Nix: Python (2020) (Lobsters)</li> <li>Picking a Language for Introductory CS - Why I don't like Python (2020)</li> <li>Clinging to memory: how Python function calls can increase your memory usage (2020)</li> <li>PEP 622 \u2013 Structural Pattern Matching (HN) (Code)</li> <li>What is the core of the Python programming language? (2020) (HN)</li> <li>NPComp - Aspirational MLIR based numpy compiler.</li> <li>Nuitka - Python compiler written in Python. (Web) (HN) (HN)</li> <li>Brython - Python 3 implementation for client-side web programming. (HN) (Code)</li> <li>Hashing it Out (2020) - A deep dive into Python dictionaries.</li> <li>An exploration of why Python doesn't require a 'main' function (2020)</li> <li>Ask HN: How do I teach intermediate Python engineering skills? (2020)</li> <li>Creating a virtual env in Python steps (2020)</li> <li>FutureCoder - Platform for beginners to learn programming in Python. (HN) (Code) (HN)</li> <li>Exactly-Once Initialization in Asynchronous Python (2020)</li> <li>Dive Into Python 3 book (Code)</li> <li>Think Python: How to Think Like a Computer Scientist</li> <li>I know Python basics, what next? (2020)</li> <li>Fluent Python (2021) (Code)</li> <li>Awesome Python Typing - Collection of awesome Python types, stubs, plugins, and tools to work with them.</li> <li>Sparking Joy with Python (2020)</li> <li>Options for packaging your Python code: Wheels, Conda, Docker, and more (2020) (HN)</li> <li>Mypy - Optional Static Typing for Python.</li> <li>Mypyc - Mypy to Python C Extension Compiler. (Lobsters)</li> <li>Developing Python with Poetry &amp; Poetry2nix: Reproducible flexible Python environments (2020)</li> <li>Structural pattern matching for Python (2020)</li> <li>Python Language Reference</li> <li>Python Data model</li> <li>Python Documentation</li> <li>Building FunctionTrace, a graphical Python profiler (2020)</li> <li>Python 3.8 Makes me Sad Again (2020) (Lobsters) (HN)</li> <li>The Consortium for Python Data API Standards (2020) (HN)</li> <li>Write a Python to C compiler in Python (2020)</li> <li>Writing Python Extensions in Assembly (2020)</li> <li>CPython Internals Book (Code)</li> <li>A deep dive into the official Docker image for Python (2020)</li> <li>How to cheat at unit tests with pytest and Black (2020)</li> <li>Never Run \u2018python\u2019 In Your Downloads Folder (2020) (HN) (Reddit)</li> <li>Awesome Scientific Python</li> <li>Learn Python 3 with Jupyter notebooks</li> <li>Writing More Idiomatic and Pythonic Code (2020) (Lobsters)</li> <li>Package and deploy Python apps faster with Poetry and Nix (2020)</li> <li>Ultimate Python study guide</li> <li>Sync vs. Async Python: What Is the Difference? (2020) (HN)</li> <li>Nagini - Automated, modular verifier for (concurrent) Python programs, based on the Viper verification infrastructure. (Code)</li> <li>Source Code Modeling - Use Transformers and LSTMs to learn Python source code.</li> <li>Course Files for Complete Python 3 Bootcamp Course</li> <li>Awesome Python Applications - Case studies in successfully shipping Python software.</li> <li>Data-oriented Programming in Python (2020) (HN)</li> <li>Analyzing Python Code with Python (2020)</li> <li>Healthy Python Codebase (2020)</li> <li>Python Multiple Inheritance (2020)</li> <li>The Personal Python Data Science Toolkit (2020)</li> <li>Beginners Introduction to using Standard I/O (2020)</li> <li>Asynchronous Python and Databases (2015)</li> <li>What does this python package do? - Bi-weekly series, our developer advocate, Nafiul Islam, explores different Python packages both in the standard library and the community.</li> <li>PyCharm JetBrains YouTube</li> <li>How I Tried To Reduce Pylint Memory Usage (2020) (HN)</li> <li>PySDR: A Guide to SDR and DSP Using Python (HN)</li> <li>Boa - Fast Conda and Mamba Package Builder.</li> <li>NPComp - MLIR based compiler toolkit for numerical python programs.</li> <li>wemake-python-styleguide - Strictest and most opinionated python linter ever.</li> <li>codebasics learn python channel (Code)</li> <li>Python Core Developers Q&amp;A (2020)</li> <li>Dlint - Tool for encouraging best coding practices and helping ensure Python code is secure.</li> <li>Higher Kinded Types in Python (2020)</li> <li>My Experience In Production with: Flask, Bottle, Tornado and Twisted (2020)</li> <li>FlakeHell - Flake8 wrapper to make it nice, legacy-friendly, configurable.</li> <li>Awesome Python Code Formatters</li> <li>Austin - Python frame stack sampler for CPython written in pure C.</li> <li>Pyston - Performance-oriented Python implementation built using LLVM and modern JIT techniques. (Pyston v2: 20% faster Python) (HN)</li> <li>The Magic of Python Context Managers (2020)</li> <li>Python for Everybody course</li> <li>Caching in Python Using the LRU Cache Strategy (2020)</li> <li>Annotated Algorithms in Python - With applications in Physics, Biology, and Finance.</li> <li>Composing Programs - Free online introduction to programming and computer science using Python.</li> <li>Writing Performant Parallel Python Code (2020)</li> <li>Optimizing your code is not the same as parallelizing your code (2020)</li> <li>PyPy - Interpreter that implements the Python programming language, based on the RPython compiler framework for dynamic language implementations. (PyPy: Faster Python With Minimal Effort)</li> <li>Evolution of modern python talk (2020)</li> <li>BeeWare - Write Python, run everywhere using native UIs. (Code) (HN)</li> <li>Python: The Full Monty: A Tested Semantics for the Python Programming Language</li> <li>Getting Started With Python 3 (2020)</li> <li>Python Internals Serie : Subprocess.Popen (2020)</li> <li>Run Python Applications Efficiently With malloc_trim (2020)</li> <li>wheelwright - Automated build repo for Python wheels and source packages.</li> <li>DepHell - Project management for Python.</li> <li>Minimal web server demo in Python (Tweet)</li> <li>Build a Flask microservice with OpenFaaS (2020)</li> <li>IPython for Web Devs</li> <li>Cyberbrain - Python debugging, redefined.</li> <li>mach-nix - Create highly reproducible python environments.</li> <li>The History of Python: From List Comprehensions to Generator Expressions (2010)</li> <li>blackdoc - Tool that applies black to code in documentation.</li> <li>Exhaustiveness Checking with Mypy (2020) (HN)</li> <li>Beartype - Fast O(1) runtime type-checking in pure Python. (HN)</li> <li>Python behind the scenes (2020)</li> <li>Python behind the scenes: a list of resources</li> <li>Darker - Reformat and lint modified Python code.</li> <li>Implementing Rust's dbg! in Python (2020) (Lobsters) (HN)</li> <li>line_profiler - Line-by-line profiling for Python.</li> <li>How not to be slow using Python: Functions (2020)</li> <li>Basic Python testing setup with pytest (2018)</li> <li>Legally Free Python Books List (2020)</li> <li>VizTracer - Low-overhead logging/debugging/profiling tool that can trace and visualize your python code execution.</li> <li>PyCG - Practical Python Call Graphs.</li> <li>Python at Scale: Strict Modules (2019) (HN)</li> <li>Python Patterns - Collection of design patterns/idioms in Python. (HN)</li> <li>Python Cookbook (2013) (Code)</li> <li>Practice Python Projects - Book on basic to intermediate level Python projects.</li> <li>pyastinterp - Python AST interpreter (aka tree-walking interpreter) in Python. Aka meta-circular interpreter.</li> <li>Python for Scientific Audio</li> <li>Awesome Python in Education</li> <li>Virtual Environments Demystified (2018) (HN)</li> <li>Python Standalone Builds - Self-contained, highly-portable Python distributions. (Docs) (Lobsters)</li> <li>Pyflakes - Simple program which checks Python source files for errors.</li> <li>Modern Python Environments - dependency and workspace management (2020)</li> <li>pytudes - Python programs, usually short, of considerable difficulty, to perfect particular skills by Peter Norvig.</li> <li>Implementing FastAPI Services \u2013 Abstraction and Separation of Concerns (2020) (HN)</li> <li>Tracing and visualizing the Python GIL with perf and VizTracer (2021)</li> <li>MesaPy - Memory-Safe Python Implementation based on PyPy.</li> <li>Makefile.venv - Seamlessly manage Python virtual environment with a Makefile.</li> <li>Research Software Engineering with Python Course (Code)</li> <li>OO in Python is mostly pointless (HN) (Lobsters)</li> <li>Constant Folding in Python (2021)</li> <li>You don't really need a virtualenv (2021) (HN)</li> <li>Homebrew Python Is Not For You (2021) (Lobsters) (HN)</li> <li>Pattern matching accepted for Python (2021) (HN) (Lobsters)</li> <li>100 Page Python Intro Book (HN)</li> <li>CPython CMake Build System</li> <li>I have no name, and I must recurse (2021) (Lobsters)</li> <li>Python Concurrency: The Tricky Bits (2020) (Tweet)</li> <li>Python Programming and Numerical Methods: A Guide for Engineers and Scientists (HN)</li> <li>Why you really need to upgrade pip (2021) (Lobsters)</li> <li>12 requests per second: A realistic look at Python web frameworks (2021) (HN)</li> <li>Conda lock - Lightweight library that can be used to generate fully reproducible lock files for conda environments.</li> <li>Interfaces and Protocols in Python (2021)</li> <li>Many models workflows in Python (2020)</li> <li>VSCode's Python Interactive mode is amazing! (2020)</li> <li>How I Beat the Berlin Rental Market With a Python Script (2021)</li> <li>Awesome asyncio</li> <li>Hypermodern Python Cookiecutter Template</li> <li>Bowler - Safe code refactoring for modern Python. (Web)</li> <li>Kuroko - Dynamic, bytecode-compiled programming language and a dialect of Python. (Code)</li> <li>IPython as a System Shell (HN)</li> <li>IPython - Productive Interactive Computing. (Docs)</li> <li>Jurigged - Hot code reloading for Python. (HN)</li> <li>Free Python Books (HN)</li> <li>Python dataclasses will save you hours (2021)</li> <li>Faster Python with Go shared objects (the easy way) (2021)</li> <li>Learn by reading code: Python standard library design decisions explained (for advanced beginners) (2021)</li> <li>Python 3 Types in the Wild: A Tale of Two Type Systems (2020) (HN)</li> <li>Sourcery - Automatically Improve Python Code Quality.</li> <li>Roadmap for mastering Python (2021)</li> <li>Awesome Flake8 Extensions</li> <li>The hidden performance overhead of Python C extensions (2021) (Lobsters)</li> <li>Cinder - Instagram's performance oriented fork of CPython. (HN) (Cinder Explorer)</li> <li>Asynchronous Tasks with FastAPI and Celery (2021)</li> <li>py2many - Python to CLike languages transpiler.</li> <li>Shrinking your Python application\u2019s Docker image: an overview (2021)</li> <li>Tiny Python Projects Book (2020) - Learn coding and testing with puzzles and games. (Code)</li> <li>Cpython Internals - Dive into CPython internals, trying to illustrate every detail of CPython implementation.</li> <li>The guide to Python virtual environments with conda (2021)</li> <li>PyCon US 2021 Recordings (HN)</li> <li>Python in a Box - Interactive online Python REPL in 30 lines of JavaScript.</li> <li>Writing fast async HTTP requests in Python (2021) (Lobsters)</li> <li>Intuitive Python: Productive Development for Projects that Last (2021) (HN)</li> <li>Subclassing in Python: Redux (2021)</li> <li>Typeclasses in Python (2021) (Lobsters)</li> <li>Python Best Practices for a New Project in 2021 (HN)</li> <li>Coding Patterns for Python Extensions (Code)</li> <li>tryceratops - Linter to manage all your python exceptions and try/except blocks. (HN)</li> <li>Functools \u2013 The Power of Higher-Order Functions in Python (HN)</li> <li>Beating TimSort at Merging (2021) (Lobsters)</li> <li>Namedtuple in a Post-Dataclasses World (2021) (HN)</li> <li>How the Python import system works (HN)</li> <li>Epic Python - Fun exercise heavy approach to learning modern Python from scratch.</li> <li>SciPy 2021 Tutorials</li> <li>Replit.web: Python Framework With Built-in Database and Auth Support (2021) (Tweet)</li> <li>PyArmor - Tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts. (Web)</li> <li>The State Of Python In 2021</li> <li>Framework Patterns (2019) (HN)</li> <li>The best Docker base image for your Python application (2021) (Lobsters)</li> <li>Skybison - Instagram's experimental performance oriented greenfield implementation of Python.</li> <li>How async/await works in Python (2021) (HN)</li> <li>Fil memory profiler for Python (Web) (Docs)</li> <li>Memory analyzer for running python processes</li> <li>Darglint - Python documentation linter which checks that the docstring description matches the definition.</li> <li>Poe the Poet - Task runner that works well with poetry.</li> <li>Python Anti-Pattern (HN)</li> <li>Unravelling <code>Async for</code> Loops (2021) (HN)</li> <li>Python in 2021: The Good, The Bad, and the Ugly (Lobsters)</li> <li>Objexplore - Interactive Python object explorer for the terminal.</li> <li>Python Programming Puzzles - Dataset of python programming puzzles which can be used to teach and evaluate an AI's programming proficiency.</li> <li>Debugging by starting a REPL at a breakpoint is fun (2021)</li> <li>Structural pattern matching in Python 3.10 (2021) (HN)</li> <li>SnakeViz - In-browser Python profile viewer.</li> <li>Better JIT Support for Auto-Generated Python Code (2021)</li> <li>The GIL and its effects on Python multithreading (2021) (HN)</li> <li>Yappi - Yet Another Python Profiler, but this time thread &amp; coroutine &amp; greenlet aware.</li> <li>Faster Python with Guido van Rossum (2021) (Lobsters) (HN)</li> <li>HN: Python 3.11: \u201cZero cost\u201d exception handling (2021)</li> <li>Understanding all of Python, through its builtins (2021) (HN)</li> <li>The math behind Python's slices (2021)</li> <li>Tips for debugging with print() (2021) (Lobsters)</li> <li>The Many Ways to Exit in Python (2021)</li> <li>A Python Script Template, with and without Type Hints and Async (2021) (Extended)</li> <li>Python Multithreading without GIL (Doc) (Reddit) (Viable solution for Python concurrency) (HN)</li> <li>Violet - Python VM written in Swift. For Swift &lt;-&gt; Python interop. (Discussion)</li> <li>Python-Mini-Projects - Collection of simple python mini projects to enhance your Python skills.</li> <li>Magic Python - Cutting edge Python syntax highlighter for Sublime Text, Atom and Visual Studio Code. Used by GitHub to highlight your Python code.</li> <li>Lukasz Langa / Designing With Immutability (2020)</li> <li>Some thoughts on asynchronous API design in a post-async/await world (2016)</li> <li>Where does all the effort go? Looking at Python core developer activity (2021)</li> <li>Prospector - Tool to analyze Python code and output information about errors, potential problems, convention violations and complexity.</li> <li>You shouldn't invoke setup.py directly (2021) (HN)</li> <li>astor - Python AST read/write.</li> <li>pravda - Python type-checker written in Rust.</li> <li>On code isolation in Python (2020)</li> <li>Pynsights - Understanding Python programs by visualizing how modules interact.</li> <li>Bank Python: The strange world of Python, as used by big investment banks (2021) (HN) (Reddit)</li> <li>GraalVM Python - On average, Python in GraalVM is 8.92x faster than CPython. (HN)</li> <li>Mini Inch App in Python - Python asyncio backend querying with SQLAlchemy and Strawberry serving GraphQL with Starlette.</li> <li>Guide of CPython\u2019s Parser</li> <li>Python Developer's Guide (Code)</li> <li>Bandit - Tool designed to find common security issues in Python code.</li> <li>Pyjion - Python JIT Compiler. (HN) (Code)</li> <li>Ask HN: How did Python become the lingua franca of ML/AI? (2021)</li> <li>Why Python needs to be paused during profiling - but Ruby doesn't always (2021) (HN)</li> <li>debugpy - Debugger for Python.</li> <li>Cython, Rust, and more: choosing a language for Python extensions (2021)</li> <li>What Did You Find Hardest To Learn As A Beginner In Python? (2021)</li> <li>What are the advanced concepts someone should learn to be considered as an expert in Python? (2021)</li> <li>Infinitely Nested Dictionary (2021)</li> <li>Understanding partial functions (2021)</li> <li>uncompyle6 - Cross-version Python bytecode decompiler.</li> <li>decompyle3 - Python decompiler for 3.7-3.8 Stripped down from uncompyle6 so we can refactor and start to fix up some long-standing problems.</li> <li>How Python List Works (HN)</li> <li>prometeo - Python-to-C transpiler for high-performance computing. (HN)</li> <li>Why does a = a[0] = [0] create a self-referential list in Python? (2021) (HN)</li> <li>Memory Profiler - Monitor Memory usage of Python code.</li> <li>Research Software Engineering with Python: Building software that makes research possible (2021)</li> <li>Static Duck Typing in Python with Protocols (2021) (HN)</li> <li>flake8-black - flake8 plugin to run black for checking Python coding style.</li> <li>RestrictedPython - Restricted execution environment for Python to run untrusted code.</li> <li>CPython on WASM - Build scripts and configuration for building CPython for Emscripten.</li> <li>Calling Rust from Python using PyO3 (2021) (HN)</li> <li>Late-bound argument defaults for Python (2021) (Lobsters)</li> <li>CPython's main branch running in the browser with WebAssembly (HN)</li> <li>Python's None problem, and how Mypy helps you deal with it (2021) (Lobsters)</li> <li>Hygeia - Python toolchain manager.</li> <li>Pandas Tutor - Visualize Python pandas code. (Web)</li> <li>Why your multiprocessing Pool is stuck (2021)</li> <li>Common design patterns implemented in Python</li> <li>The future of Python build systems and Gentoo (2021) (HN)</li> <li>Should You Use Upper Bound Version Constraints? (2021)</li> <li>pymemtrace - Python memory tracing.</li> <li>HTMX + Flask: Modern Python Web Apps, Hold the JavaScript</li> <li>It\u2019s time to stop using Python 3.6 (2021) (Lobsters)</li> <li>shiv - Command line utility for building fully self-contained Python zipapps.</li> <li>Faster CPython Ideas</li> <li>Data Structures and Information Retrieval in Python (Code)</li> <li>Guide to Python's magic methods</li> <li>Comprehensive Python Cheat Sheet (HN)</li> <li>Learn Python ASTs, by building your own linter (2021) (HN)</li> <li>Scientific Computing with Python Book</li> <li>Python Launcher for Unix - Launch your Python interpreter the lazy/smart way.</li> <li>Static Typing with Python Docs (Code)</li> <li>Redowan's Reflections on Python (Code)</li> <li>Interfaces, Mixins and Building Powerful Custom Data Structures in Python (2020)</li> <li>Implementing Proxy Pattern in Python (2020)</li> <li>Deciphering Python\u2019s Metaclasses (2020)</li> <li>Exploring Cooperative Concurrency Primitives in Python</li> <li>Python Bytecode Explained (HN)</li> <li>Python Design Patterns (Code) (HN)</li> <li>Strict Python function parameters (2022) (Lobsters)</li> <li>How vectorization speeds up your Python code (2022) (Lobsters)</li> <li>Static Typing Python Decorators (2022)</li> <li>Python Minifier - Transforms Python source code into it's most compact representation.</li> <li>Blue - Slightly less uncompromising Python code formatter.</li> <li>Speeding up Python with Rust, what works and what doesn't! (2021)</li> <li>Effective Pandas Book (Code)</li> <li>Keeping python code clean with pre-commit hooks: black, flake8 and isort (2019)</li> <li>Understanding Attributes, Dicts and Slots in Python (2022)</li> <li>Interactive Loop Optimization (Lobsters)</li> <li>List of languages that compile to python</li> <li>pylint-errors - Curated list of pylint errors with explanation and examples.</li> <li>How to write better scientific code in Python? (2022) (HN)</li> <li>When I'm Sad My Computer Sends Me Cats (2022) (Code)</li> <li>pprofile - Line-granularity, thread-aware deterministic and statistic pure-python profiler.</li> <li>Understanding Decorators in Python (2022)</li> <li>Raccoon - Language with Python 3.x syntax that is amenable to static analysis.</li> <li>CPython, C standards, and IEEE 754 (2022) (HN)</li> <li>A Gentle Introduction to Serialization for Python (2022)</li> <li>tuna - Python profile viewer.</li> <li>Sending notifications programmatically: let me count the ways (2022)</li> <li>Extreme IO performance with parallel Apache Parquet in Python (2017)</li> <li>perflint - Pylint extension for performance anti patterns.</li> <li>Processing large JSON files in Python without running out of memory (2022)</li> <li>Daily dose of Python - Advanced Python tips and tricks in easy to digest format. (Code)</li> <li>dhall-python - Dhall bindings for Python using the rust implementation.</li> <li>Running Python in WebAssembly (2022)</li> <li>Pyground - Playground for running Python using WASM on data in the browser.</li> <li>Interview with a Postdoc, Junior Python Developer in 2022</li> <li>Flake8 - Python tool that glues together pycodestyle, pyflakes, mccabe, and third-party plugins to check the style and quality of some python code.</li> <li>Python 3.11 in the Web Browser (2022) (HN)</li> <li>The counterintuitive rise of Python in scientific computing (2020) (HN) (Tweet)</li> <li>Advanced Python Programming Book (Code)</li> <li>Notes From the Meeting On Python GIL Removal Between Python Core and Sam Gross (2021)</li> <li>How to compare floats in Python (2022) (HN)</li> <li>hpython - Haskell-based language tools for Python.</li> <li>How is PyPy Tested? (2022)</li> <li>pyupgrade - Tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.</li> <li>Cython Is 20 (2022) (HN)</li> <li>snekbox - Easy, safe evaluation of arbitrary Python code.</li> <li>Yet another Python JIT.</li> <li>Ask HN: Python Programming Books (2022)</li> <li>Best of Python Developer Tools - Ranked list of awesome python developer tools and libraries. Updated weekly.</li> <li>Faster CPython: Notes on making CPython faster (Code)</li> <li>JyNI - Enables Jython to load native CPython extensions.</li> <li>Python for Microcontrollers Newsletter</li> <li>Evrone Python Guidelines</li> <li>Memray - Memory profiler for Python. (Tweet) (HN)</li> <li>Modeling and Simulation in Python (2022)</li> <li>MicroPython in Docker Containers (2022)</li> <li>High Performance Python Princeton mini-course</li> <li>hickory - Command line tool for scheduling Python scripts.</li> <li>Why Python Data Classes Are Awesome (2022)</li> <li>When Python can\u2019t thread: a deep-dive into the GIL\u2019s impact (2022) (Lobsters)</li> <li>You Should Compile Your Python And Here\u2019s Why (2022) (HN)</li> <li>Compact word vectors with Bloom embeddings (2022)</li> <li>PyScript - Run Python in your HTML. (Web) (Intro) (HN) (HN) (CLI)</li> <li>PyMC in the browser using PyScript</li> <li>Strange and odd python snippets explained</li> <li>How the Cinder JIT\u2019s function inliner helps us optimize Instagram (2022)</li> <li>pysen - Python linting made easy.</li> <li>Modern Python Performance Considerations (2022) (HN)</li> <li>Wordle in Python using literate programming (HN)</li> <li>Spatial Environment for Python (HN)</li> <li>Managing Python Versions with Pyenv (2022) (HN)</li> <li>PyOxy Python Runner - Alternative implementation and re-imagination of the ubiquitous python command, but providing more features and control than python.</li> <li>Python Engineer Roadmap</li> <li>Why Should Async Get All The Love?: Advanced Control Flow With Threads (2022)</li> <li>OpenAI Codex Python to C++ Code Generator (HN)</li> <li>PikaScript - Ultra-lightweight Python engine that can run in 4Kb of RAM.</li> <li>Compact objects in Python</li> <li>Useful Python Decorators for Data Scientists (2022) (HN)</li> <li>Python Security (Code)</li> <li>What\u2019s in Which Python - Summary of what features appeared in which versions of Python. (HN)</li> <li>The Python GIL: Past, Present, and Future (2022)</li> <li>What's a Python feature that is very powerful but not many people use or know about it? (2022)</li> <li>Specialist - Visualize CPython 3.11's specializing, adaptive interpreter.</li> <li>shed - Maximally opinionated autoformatting tool.</li> <li>Python Cheat Sheet</li> <li>The strange relationship between objects, functions, generators and coroutines</li> <li>Illustrating the duality of closures and objects (2022) (Lobsters)</li> <li>IPython pdb - Integration of IPython pdb.</li> <li>Python to Rust transpiler</li> <li>Introducing PyScript (summary of PyCon keynote) (2022) (HN)</li> <li>Don't let dicts spoil your code (2020) (Lobsters) (HN)</li> <li>What's New in Python 3.11? (2022) (HN)</li> <li>My Python testing style guide (Lobsters)</li> <li>Blip - Bytecode compiler for Python 3.</li> <li>Multiprocessing in Python: The Complete Guide (2022)</li> <li>rich-bench - Little Python benchmarking tool.</li> <li>EuroPython 2022 (Web Code)</li> <li>\u00b5fmt - Safe, atomic formatting with black and \u00b5sort.</li> <li>Finding performance bottlenecks in Celery tasks (2022)</li> <li>Python is Actually Portable (2021) (HN)</li> <li>Pycom - Python compiler, down to native code, using C++. (HN)</li> <li>Crimes with Python's pattern matching (2022) (HN)</li> <li>Finding performance problems: profiling or logging?</li> <li>Erg - Python compatible statically typed language.</li> <li>MVPy: Minimum Viable Python (Lobsters)</li> <li>Blackd-Client - Blazing fast Python code formatting using Black.</li> <li>You Should Be Using Python's Walrus Operator (2022) (Lobsters)</li> <li>Ruff - Extremely fast Python linter, written in Rust. (Lobsters) (HN) (Docs) (HN)</li> <li>Using Mypy in Production (HN)</li> <li>Python multi-level break and continue (HN)</li> <li>Building a Distributed Task Queue in Python (2022) (HN)</li> <li>You Can Build Portable Binaries of Python Applications (2022)</li> <li>Accelerate Python code by importing Taichi (2022) (HN)</li> <li>Functional Python, Part I: Typop\u00e6dia Pythonica (2022)</li> <li>Python Type Hints are Turing Complete (2022) (HN) (Code)</li> <li>Scalpel - Python Static Analysis Framework.</li> <li>Embedded Python Interpreter for Go</li> <li>autoflake - Removes unused imports and unused variables from Python code.</li> <li>Faster CPython 3.12 Plan (HN)</li> <li>PyTA - Adventures in code analysis for teaching Python.</li> <li>Refurb - Tool for refurbishing and modernizing Python codebases.</li> <li>Making python fast for free - adventures with mypyc (2022)</li> <li>A Blueprint for Production-Ready Web Applications (2022) (Code)</li> <li>Type annotation via automated refactoring (2022)</li> <li>Python grammar for tree-sitter</li> <li>Buffers on the Edge: Python and Rust (2022) (HN)</li> <li>Python CLI Tricks That Don't Require Any Code Whatsoever (2022)</li> <li>Python 3.11.0 (2022) (HN) (Tweet)</li> <li>Better Python code grepping with pyastgrep (2022)</li> <li>Inline caches in the Skybison Python runtime (2022)</li> <li>Python Asyncio: The Complete Guide (2022) (HN)</li> <li>Trie in Python (2022) (Lobsters)</li> <li>shira - Python inspector.</li> <li>Python Type Hints: case study on parsy (2022)</li> <li>The Origins of Python (2022) (HN)</li> <li>Data-oriented Programming in Python (2022)</li> <li>What would you add to Python 4.0 (2022)</li> <li>posy - Project-oriented Python workflow manager.</li> <li>Codon - High-performance Python compiler using LLVM. (HN)</li> <li>Every modeler is supposed to be a great Python programmer (2022) (HN)</li> <li>Shed Skin - Python to C++ compiler.</li> <li>A crash course in Python \u201ccomprehensions\u201d and \u201cgenerators\u201d (2022) (HN)</li> <li>Practical Python Programming Course</li> <li>Python Distilled Book (2021)</li> <li>Pyccel - Python extension language using accelerators.</li> <li>Boring Python: Code quality (2022) (HN)</li> <li>Signed distance functions in 46 lines of Python (2022) (HN)</li> <li>pylyzer - Fast static code analyzer &amp; language server for Python.</li> <li>Extending Python with Rust (HN)</li> <li>Efficient Python for Data Scientists</li> <li>Minimalist Data Wrangling with Python (Code)</li> <li>s-Python - Complete solution for Python-in-browser.</li> <li>Infinite AI Array (2023) (Code) (HN)</li> <li>Lazy Evaluation Using Recursive Python Generators (2023)</li> <li>Level Up Your Python - Course over intermediate Python. (Code)</li> <li>Mapping Python to LLVM (2023) (HN)</li> <li>Making the Global Interpreter Lock Optional in CPython</li> <li>Why Polars uses less memory than Pandas (2023) (Lobsters)</li> <li>Skulpt - JavaScript implementation of Python.</li> <li>Ruff LSP - Language Server Protocol implementation for Ruff.</li> <li>Notes on ruff (2023)</li> <li>Ask HN: Which book would you recommend for learning Python in detail? (2023)</li> <li>WebAssembly: Adding Python support to WASM language runtimes (2023) (HN)</li> <li>Python's \u201cdisappointing\u201d superpowers (2023) (HN) (Lobsters)</li> <li>How I added C-style for-loops to Python (2022) (HN)</li> <li>PocketPy - Lightweight Python interpreter for game engines. (HN)</li> <li>A Heisenbug lurking in async Python (2023) (HN)</li> <li>Google Python Style Guide (HN)</li> <li>Ask HN: How do you become a better Python developer? (2023)</li> <li>Dis This - Online Python Disassembler. (Code)</li> <li>Awesome Python Features Explained Using the World of Magic</li> <li>Even the Pylint codebase uses Ruff</li> <li>davinci-functions - Library to ask OpenAI GPT-3 for generating objects on the Python runtime.</li> <li>Using SymPy in Python doctests (2023)</li> <li>Overhead of Python Asyncio tasks (2023)</li> <li>PEP 709 \u2013 Inlined comprehensions (2023) (Lobsters)</li> <li>How virtual environments work (2023) (Lobsters) (HN)</li> <li>30 Days Of Python</li> <li>ViperGPT: Visual Inference via Python Execution for Reasoning (2023) (Code) (HN)</li> <li>Speeding up text processing in Python (is hard) (2023)</li> <li>Making Python faster with Rust (2023) (HN)</li> <li>Learn Python Generators (2023)</li> <li>Learn Python Decorators (2023)</li> <li>Learn Python Context Managers (2023)</li> <li>The different uses of Python type hints (2023) (Lobsters)</li> <li>Aura - Python source code auditing and static analysis on a large scale. (HN)</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/dask/","title":"Dask","text":"<p>Original content by: Nikita</p> <p>Parallel computing with task scheduling.</p>"},{"location":"notes/programming-languages/python/python-libraries/dask/#links","title":"Links","text":"<ul> <li>Dask Tutorial (Code)</li> <li>Deploy Dask on Job Queueing systems</li> <li>Dask Gateway - Provides a secure, multi-tenant server for managing Dask clusters.</li> <li>Jim Crist: Introducting Dask-Gateway: Dask clusters as a service (2019)</li> <li>Distributed - Distributed task scheduler for Dask.</li> <li>dask-ml - Scalable Machine Learning with Dask.</li> <li>Tom Augspurger: Scalable Machine Learning with Dask (2019)</li> <li>Data Processing with Dask (2020)</li> <li>Dask Updates 2020</li> <li>Deploying and Scaling Data Science Tools on Distributed Systems (2020)</li> <li>dask-sql - SQL Engine for Dask. (Web)</li> <li>Coiled: Dask for Everyone, Everywhere (2020)</li> <li>Coiled - Scaling Python Simply.</li> <li>Coiled Cloud</li> <li>Runtime vs Scheduler: Analyzing Dask's Overheads (2020)</li> <li>Dask Helm Charts (Web)</li> <li>Dask CUDA - Utilities for Dask and CUDA interactions.</li> <li>Dask Web Code</li> <li>Dask Example Notebooks - Includes easy-to-run example notebooks for Dask. (Docs)</li> <li>Dask Kubernetes Operator</li> <li>dask-geopandas - Parallel GeoPandas with Dask.</li> <li>Dask Cloud Provider - Native Cloud integration for Dask. (Docs)</li> <li>Jupyter, Microscopy, and On-demand Dask Cloud Clusters (2021)</li> <li>Tackling unmanaged memory with Dask (2021)</li> <li>Hacking Dask: Diving into Dask's Internals</li> <li>Dask Binder template - Template for Dask-enabled repositories for use on Binder.</li> <li>Afar - Run code on a Dask cluster via a context manager or IPython magic.</li> <li>Dask as a Spark Replacement (2021)</li> <li>2021 Dask User Survey</li> <li>Dask Working Notes</li> <li>Choosing good chunk sizes in Dask (2021)</li> <li>HN: Dask (2021)</li> <li>dask-awkward - Connecting Dask with Awkward Arrays.</li> <li>flox - Fast &amp; furious GroupBy operations for dask.array.</li> <li>dask-ctl - Tools to provide a control plane for managing the lifecycle of Dask clusters.</li> <li>dask-geomodeling - On-the-fly operations on geographical maps.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/django/","title":"Django","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/python/python-libraries/django/#oss-django-apps","title":"OSS Django Apps","text":"<ul> <li>Django Rest Framework + Next.js + Tailwind</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/django/#notes","title":"Notes","text":"<ul> <li>Make migration (where <code>./manage</code> is a script that wraps over <code>python manage.py</code>):</li> <li>Change model. Add/remove fields etc.</li> <li>Run <code>./manage makemigrations</code> to create migration from changed models. (can run <code>./manage makemigrations -n &lt;migration-name&gt;</code> to give it custom name).</li> <li>Migration file is created. Run <code>./manage migrate</code> to apply</li> <li>Run tests:</li> <li><code>./manage test</code> = run all tests</li> <li><code>./manage test -k path.to.test</code> = run specific test. can also run some function from the test inside the file with another <code>.</code>.</li> <li>Migrate down/up: <code>./manage migrate &lt;app&gt; &lt;migration-number&gt;</code></li> <li>Make empty migration: <code>./manage makemigrations --empty &lt;name-of-migration&gt; &lt;app&gt;</code></li> <li>Rewrote the Pegasus teams UI in HTMX and I gotta say I'm sold. You build an app in standard Django, add a few annotations, and then boom: SPA. The number of situations in which I'll reach for React by default just got chopped in half at least.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/django/#links","title":"Links","text":"<ul> <li>Profiling Django with DTrace and cProfile (2019)</li> <li>Django\u2019s CBVs were a mistake (2012)</li> <li>Testing Django Migrations (2019)</li> <li>HN: Django 3</li> <li>Viewflow - Reusable workflow library for Django.</li> <li>cookiecutter-django-rest - Build best practiced apis fast with Python3.</li> <li>rules - Awesome Django authorization, without the database.</li> <li>Django REST framework - Awesome web-browsable Web APIs.</li> <li>Awesome Django</li> <li>Introducing Django (2005)</li> <li>Django 3.1 (2020) (HN)</li> <li>Surviving Django (if you care about databases) (2020) (HN) (Lobsters)</li> <li>Django Views \u2014 The Right Way - Opinionated guide on how to write views in Django. (Lobsters)</li> <li>Django Middleware</li> <li>Django Async: What's new and what's next? (2020) (HN)</li> <li>Django Redis - Redis cache backend for Django.</li> <li>Django styleguide</li> <li>Deploy Machine Learning Models with Django (Code)</li> <li>Async Views in Django 3.1 (2020) (HN)</li> <li>Build a simple Hacker News clone using Django 3 (2020)</li> <li>Building a Django app with data access control in 30 minutes (2020) (Lobsters)</li> <li>Django Waffle - Feature flipper for Django.</li> <li>Cookiecutter Django - Framework for jump starting production-ready Django projects quickly.</li> <li>SaaS Pegasus - Django-Powered SaaS Template. (Docs)</li> <li>Django Filter - Reusable Django application allowing users to declaratively add dynamic QuerySet filtering from URL parameters. (Docs)</li> <li>Django Best Practices: Security (2020)</li> <li>LearnDjango - Django Tutorials.</li> <li>Django Dynamic Fixture - Complete library to create dynamic model instances for testing purposes.</li> <li>Two Scoops of Django 3.x: Best Practices for the Django Web Framework</li> <li>Speed Up Your Django Tests book</li> <li>django-read-only - Disable Django database writes.</li> <li>Simple JWT - JSON Web Token authentication plugin for the Django REST Framework.</li> <li>drf-yasg - Generate real Swagger/OpenAPI 2.0 specifications from a Django Rest Framework API.</li> <li>Graphene-Django - Integrate GraphQL into your Django project.</li> <li>Graphene-Django-Plus - Tools to easily create permissioned CRUD endpoints in graphene.</li> <li>Optimizing Postgres full text search in Django (2019)</li> <li>Understand Group by in Django with SQL (2020)</li> <li>Running Django + React service by Cloud Run (2020)</li> <li>Django Doctor - Django GitHub PR bot that suggest the fix.</li> <li>Django\u2019s Structure \u2013 A Heretic\u2019s Eye View</li> <li>Django Book - Python Django Tutorials.</li> <li>Blazing fast tests in Django (2018)</li> <li>Django project optimization guide (2017)</li> <li>Django Ninja - Fast Django REST Framework. (HN)</li> <li>django-guardian - Per object permissions for Django.</li> <li>Docker-Compose for Django and React with Nginx Reverse-Proxy and Let's Encrypt (2020) (HN)</li> <li>Django Smartmin - Admin-like utility for users.</li> <li>Deploying Django to AWS ECS with Terraform</li> <li>Django Slick Reporting - Powerful and Efficient reporting engine with Charting capabilities.</li> <li>Dataclasses serializer - Dataclasses serializer for Django REST framework.</li> <li>django-floppyforms - Full control of form rendering in the templates.</li> <li>DIY Django and React Boilerplate for SaaS (Web) (HN)</li> <li>django-unicorn - Provides a way to use backend Django code and regular Django templates to create interactive experiences without investing in a separate frontend framework. (Web)</li> <li>Hotwire + Django - Meta package to combine turbo-django and stimulus-django.</li> <li>Django migrations without downtimes (2015)</li> <li>wemake-django-template - Bleeding edge django template focused on code quality and security.</li> <li>Django Activity Stream - Way of creating activities generated by the actions on your site.</li> <li>Django antipatterns (Code)</li> <li>Turbo for Django - Integration of Hotwire Turbo with Django.</li> <li>Modern Django: A Guide on How to Deploy Django-based Web Applications</li> <li>Django Algolia Integration</li> <li>Docker, Django, Traefik, and IntercoolerJS: My go-to stack for building a SaaS (2021) (HN)</li> <li>Django 3.2 (2021) (HN)</li> <li>Constance - Dynamic Django settings.</li> <li>Rapid Prototyping with Django, htmx, and Tailwind CSS (2021)</li> <li>Django SQL Dashboard (HN) (Code) (Article)</li> <li>Get to know Django models better (2021)</li> <li>Django Chat - Podcast on the Django Web Framework by William Vincent and Carlton Gibson.</li> <li>Django Channels - Developer-friendly asynchrony for Django.</li> <li>Kolo - Django VSCode Extension. See everything happening in your running Django app. (Code)</li> <li>concrete-datastore - Highly versatile HTTP REST Datastore based on the web framework Django.</li> <li>Django for Startup Founders: A better software architecture for SaaS startups (2021) (HN)</li> <li>One Database Transaction Too Many (2021)</li> <li>Modeltranslation - Translates Django models using a registration approach.</li> <li>Django Packages - Reusable apps, sites and tools directory.</li> <li>Building MVPs fast on Django (2021)</li> <li>Building a Django driver for Psycopg 3 (2021) (HN)</li> <li>Python Django Web Framework - Full Course for Beginners (2019)</li> <li>Django Hijack - With Django Hijack, admins can log in and work on behalf of other users without having to know their credentials.</li> <li>django-htmx - Extensions for using Django with htmx.</li> <li>Appliku Deploy - Server Management, designed specially for Django. (HN)</li> <li>Type Check Your Django Application</li> <li>Hotwired/Turbo Django response helpers</li> <li>New Testing Features in Django 4.0 (2021)</li> <li>High Performance Django (2014)</li> <li>New Testing Features in Django 4.0 (2021)</li> <li>Model Bakery - Object factory for Django.</li> <li>The Decline of Django (2021) (HN)</li> <li>Profiling Django App (Lobsters)</li> <li>Reactor - Phoenix LiveView but for Django.</li> <li>Observing a Django backend with Honeycomb.io (2020)</li> <li>django-pgtrigger - Postgres trigger support integrated with Django models.</li> <li>django-pghistory - Provides automated and customizable history tracking for Django models using Postgres triggers.</li> <li>A complete guide to organizing settings in Django (2021) (HN)</li> <li>Why I Run Django on Kubernetes as a One-Man SaaS (2021)</li> <li>Django, HTMX and Alpine.js: Modern websites, JavaScript optional (2021) (HN)</li> <li>django-fsm - Adds simple declarative state management for django models.</li> <li>Django APScheduler - Adds a lightweight wrapper around APScheduler. It enables storing persistent jobs in the database using Django's ORM.</li> <li>Swapper - Django Swappable Models.</li> <li>dj-stripe - Django + Stripe Made Easy.</li> <li>The Definitive Guide to Celery and Django (Code)</li> <li>django-upgrade - Automatically upgrade your Django projects.</li> <li>Integrate Pydantic with Django and Django REST Framework (2021)</li> <li>Database-backed Periodic Tasks - Celery Periodic Tasks backed by the Django ORM.</li> <li>Create Django App</li> <li>Django JWT Auth - JSON Web Token Authentication support for Django.</li> <li>Django Async Orm - Django module that brings async to django ORM.</li> <li>drf-spectacular - Sane and flexible OpenAPI 3 schema generation for Django REST framework.</li> <li>Paperclip - Add attachments to Django models.</li> <li>Django-RQ - Simple app that provides Django integration for RQ (Redis Queue).</li> <li>django-clone - Controlled Django model instance replication.</li> <li>Jolie - Gorgeous drop-in replacement of Django Admin. (HN)</li> <li>Django-invitations - Generic invitations app for Django.</li> <li>Django IDOM - Allows Django to integrate with IDOM, a reactive Python web framework for building interactive websites without needing a single line of JavaScript.</li> <li>Django Easy Audit - Allows you to keep track of every action taken by your users.</li> <li>Django Garnett - Field level translation library that allows you to store strings in multiple languages.</li> <li>Django CORS Headers - Django app for handling the server headers required for Cross-Origin Resource Sharing (CORS).</li> <li>Security And Django</li> <li>Awesome Django Blogs</li> <li>Django Sockpuppet - Build reactive applications with the Django tooling you already know and love.</li> <li>Django Celery Results - Celery result back end with Django.</li> <li>Polymorphic Models for Django - Improved Django model inheritance with automatic downcasting.</li> <li>Django Postgres Metrics - Django application that exposes a bunch of PostgreSQL database metrics.</li> <li>django-stubs - Type stubs and a custom mypy plugin to provide more precise static types and type inference for Django framework.</li> <li>Django Channels Rest Framework - Provides a DRF like interface for building channels-v3 websocket consumers.</li> <li>django-structlog - Structured Logging for Django.</li> <li>Django FastAPI ORM</li> <li>Djantic - Pydantic models for Django.</li> <li>nango - Streamlining Django forms to provide all the wins of single-page-applications without the pain.</li> <li>Django PostgreSQL Materialized View Example - Example of how to use a PostgreSQL materialized view in Django to speed up a complex query.</li> <li>Django Debug Toolbar - Configurable set of panels that display various debug information about the current request/response.</li> <li>Django Ratelimit - Cache-based rate-limiting for Django.</li> <li>Django Admin Interface - Modern responsive flat admin interface customizable by the admin itself.</li> <li>Django Step by Step - Django + Vue reference project that focuses on developer tooling and CI/CD + IaC.</li> <li>summarize-template - Show a summary of a Django or Jinja template.</li> <li>Rasters for Django - Raster data integration for Django projects with a PostGIS database backend.</li> <li>Anatomy of a Django/HTMX Project (2022) (HN)</li> <li>snapshot-queries - Capture all SQL statements executed via Django and SqlAlchemy ORM queries.</li> <li>Pyngo - Pydantic model support for Django &amp; Django-Rest-Framework.</li> <li>Enforcing Zero Downtime Django Migrations (2022)</li> <li>Djangox - Django starter project with batteries.</li> <li>The Django speaking tour 2022</li> <li>Tetra - Full stack reactive component framework for Django using Alpine.js (Code)</li> <li>Six things I do every time I start a Django project (2022)</li> <li>Daphne - Django Channels HTTP/WebSocket server.</li> <li>Pellet - Helps improve your Django app performance by discovering N+1 queries.</li> <li>Dataloaders for Django and Strawberry</li> <li>Django + htmx patterns</li> <li>Django RQ Scheduler - Database backed job scheduler for Django RQ with Django.</li> <li>Chard - Simple async/await task queue for Django. One process, no threads, no other dependencies.</li> <li>Django Lightweight Queue - Lightweight &amp; modular queue and cron system for Django.</li> <li>Absurd Django - Running Django in the browser using Pyodide.</li> <li>Django Hypergen - Write server-rendered reactive HTML liveviews for Django in pure python.</li> <li>Django Model Values - Taking the O out of ORM.</li> <li>Production Tips for Django Apps (2022) (Lobsters)</li> <li>Deploy a Django app with fly.io (2022)</li> <li>Django Interactive Models - Create Django Models interactively.</li> <li>Weeknotes: DjangoCon, SQLite in Django, datasette-gunicorn (2022)</li> <li>Django safedelete - Mask your objects instead of deleting them from your database.</li> <li>Strawberry GraphQL Django integration</li> <li>Silk - Live profiling and inspection tool for the Django framework.</li> <li>Strawberry Django - Enhanced Strawberry integration with Django.</li> <li>Django Cachalot - Caches your Django ORM queries and automatically invalidates them.</li> <li>In Defense of Crusty Old Swiss Army Knives - An Exploration of Django &amp; HTMX (2023) (Lobsters)</li> <li>Ban 1+N in Django (2023) (HN)</li> <li>Django 4.2 Released (2023) (HN)</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/fastapi/","title":"FastAPI","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/python/python-libraries/fastapi/#links","title":"Links","text":"<ul> <li>FastAPI-MVC - Generate customizable FastAPI projects. (HN)</li> <li>FastAPI Nano - Minimalistic and extensible FastAPI template that incorporates divisional pattern architecture with divisional folder structure.</li> <li>FastAPI client generator</li> <li>Sebasti\u00e1n Ram\u00edrez's Blog (Code)</li> <li>Full Stack FastAPI and PostgreSQL - Base Project Generator</li> <li>FastAPI + React - Cookiecutter Template for FastAPI + React Projects. Using PostgreSQL, SQLAlchemy, and Docker.</li> <li>Brif - Boilerplate tool based on Docker and FastAPI, designed to streamline the development and deployment of IIIF compliant platforms.</li> <li>On FastAPI (2020)</li> <li>SQLAlchemy Admin for Starlette/FastAPI</li> <li>FastAPI Events - Event dispatching/handling library for FastAPI, and Starlette.</li> <li>FastAPI Blog backend - FastAPI backend for blog with OpenTelemtry and Jaeger.</li> <li>I built the same app 3 times | Which Python Framework is best? Django vs Flask vs FastAPI (2022)</li> <li>FastAPI Tag - Documented &amp; Enhance the Metadata of your API.</li> <li>FastAPI Contrib - Opinionated set of utilities on top of FastAPI.</li> <li>FastAPI Microservice Patterns (2020) (Code)</li> <li>FastAPI with Observability - Telemetry FastAPI application with three pillars of observability on Grafana.</li> <li>FastAPI + SQLModel + Alembic - Sample FastAPI project that uses async SQLAlchemy, SQLModel, Postgres, Alembic, and Docker.</li> <li>Feature rich robust FastAPI template</li> <li>FastAPI Security - Add authentication and authorization to your FastAPI app via dependencies.</li> <li>Flask vs FastAPI? (2022)</li> <li>FastAPI Cloud Tasks - Strongly typed background tasks with FastAPI and Google CloudTasks.</li> <li>Example for FastAPI integration with SQLAlchemy ORM with PostgreSQL via asyncpg</li> <li>Prometheus FastAPI Instrumentator - Configurable and modular Prometheus Instrumentator for your FastAPI.</li> <li>FastAPI on Google Cloud Run</li> <li>Reusable utilities for FastAPI</li> <li>FastAPI + PostgreSQL + JWT + Docker + Nginx template</li> <li>FastAPI Enclave Services</li> <li>Cookiecutter FastAPI - Framework for jump starting production-ready FastAPI projects quickly.</li> <li>FastAPI Best Practices (Reddit)</li> <li>FastAPI Pagination</li> <li>FastAPI Layered Architecture</li> <li>FastAPI Railway API template</li> <li>SlowApi - Rate limiter for Starlette and FastAPI.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/numpy/","title":"NumPy","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/python/python-libraries/numpy/#links","title":"Links","text":"<ul> <li>NumPy: the absolute basics for beginners</li> <li>100 numpy exercises (100% complete)</li> <li>From Python to Numpy (2017) (Code)</li> <li>MinPy - NumPy interface with mixed backend execution.</li> <li>NumCpp - C++ implementation of the Python Numpy library.</li> <li>Math to Code - Interactive Python tutorial to teach engineers how to read and implement math using the NumPy library. (HN)</li> <li>Quaternions in NumPy - Add built-in support for quaternions to numpy.</li> <li>Array programming with NumPy (2020) (HN)</li> <li>Python Numpy Tutorial (with Jupyter and Colab)</li> <li>nptyping - Type hints for Numpy.</li> <li>NumPy Illustrated: The Visual Guide to NumPy (2020)</li> <li>A Visual Intro to NumPy and Data Representation</li> <li>RipTable - All in one, high performance 64 bit python analytics engine for numpy arrays with multithreaded support.</li> <li>Math Inspector - Visual programing environment for scientific computing with python. Based on numpy &amp; scipy. (Web)</li> <li>Rolling Quantiles for NumPy</li> <li>Legate NumPy - Aspiring Drop-In Replacement for NumPy at Scale.</li> <li>numba-dppy - Extends Numba with a new backend to support compilation for Intel CPU and GPU architectures.</li> <li>NumPy views: saving memory, leaking memory, and subtle bugs (2021)</li> <li>Magical NumPy with JAX | SciPy 2021</li> <li>Numbagg - Fast N-dimensional aggregation functions with Numba.</li> <li>NumExpr - Fast numerical expression evaluator for NumPy.</li> <li>rust-numpy - Rust bindings for the NumPy C-API.</li> <li>numpy-groupies - Optimised tools for group-indexing operations: aggregated sum and more.</li> <li>numpy-hilbert-curve - Numpy implementation of Hilbert curves in arbitrary dimensions.</li> <li>numpy-stl - Simple library to make working with STL files (and 3D objects in general) fast and easy.</li> <li>libnpy - C++ library for reading and writing of numpy's .npy files.</li> <li>NumS - Library that translates Python and NumPy to optimized distributed systems code.</li> <li>Differentiable Neural Computer in Numpy - Simple RNN, LSTM and Differentiable Neural Computer in pure Numpy.</li> <li>A basic introduction to NumPy's einsum (HN)</li> <li>Arkouda - NumPy-like arrays at massive scale backed by Chapel.</li> <li>Bottleneck - Fast NumPy array functions written in C.</li> <li>Numpy beginner tutorial</li> <li>NumPy Financial - Standalone package of the NumPy financial functions.</li> <li>Numpy is absurd (HN)</li> <li>npstreams - Streaming operations on NumPy arrays.</li> <li>spector - Sparse vectors optimized for memory and NumPy integrations.</li> <li>NumPy 1.24 (HN)</li> <li>BioNumPy - Python library, built on top of NumPy, for enabling array programming on biological datasets in Python.</li> <li>Concrete Numpy - Open-source library which simplifies the use of fully homomorphic encryption.</li> <li>Computing Distance Matrices with NumPy (2021)</li> <li>Shape typing numpy with pyright and variadic generics (2023)</li> <li>NapkinML - Tiny lib with pocket-sized implementations of machine learning models in NumPy, most of which will fit in a tweet.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/","title":"Python libraries","text":"<p>Original content by: Nikita</p> <p>atoti, Cookiecutter Poetry &amp; AllenAI templates seem nice. Robyn seems like a nice web library.</p> <p>Like idea of using Python as glue language for compiled modules like Rust or Zig.</p> <p>Taichi is interesting for writing parallel math heavy code.</p> <p>I use pip-tools as way to manage dependencies.</p>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#web","title":"Web","text":"<ul> <li>Granian - Rust HTTP server for Python applications. (HN)</li> <li>Emmett - Full-stack Python web framework designed with simplicity in mind.</li> <li>Quart - Async Python micro framework for building web applications.</li> <li>Robyn - Async python web server written in rust. (HN)</li> <li>Xpresso - Composable Python ASGI web framework.</li> <li>aiosonic - Very fast Python asyncio http client.</li> <li>BlackSheep - Fast ASGI web framework and HTTP client for Python asyncio.</li> <li>urllib3 - Python HTTP library with thread-safe connection pooling, file post support, user friendly, and more.</li> <li>Bottle - Fast and simple micro-framework for python web-applications. (Docs)</li> <li>Pyramid - Small, fast, down-to-earth, open source Python web framework.</li> <li>Dash - Analytical Web Apps for Python. No JavaScript Required. (Web) (Awesome)</li> <li>web.py - Web framework for python that is as simple as it is powerful.</li> <li>HTTPX - Next generation HTTP client for Python.</li> <li>baseplate.py - Reddit's python service framework. (Docs)</li> <li>Nameko - Microservices framework for Python that lets service developers concentrate on application logic and encourages testability.</li> <li>Kore - Easy to use web platform for C and Python.</li> <li>uvicorn - Lightning-fast ASGI server. (Docs)</li> <li>Flask - Python micro framework for building web applications. (Docs) (Flask Admin) (Building a Full Stack Flask HTMx Application) (HN) (Mega Tutorial) (HN) (13 tips and techniques for modern Flask apps)</li> <li>Impacket - Collection of Python classes for working with network protocols.</li> <li>instant_api - Instantly create an HTTP API with automatic type conversions, JSON RPC, and a Swagger UI. Just add methods.</li> <li>Flask-Marshmallow - Thin integration layer for Flask and marshmallow.</li> <li>python-proxy - HTTP/Socks4/Socks5/Shadowsocks/ShadowsocksR/SSH/Redirect/Pf TCP/UDP asynchronous tunnel proxy implemented in Python3 asyncio.</li> <li>Strawberry GraphQL - Python GraphQL library based on dataclasses. (Web) (Playground) (Tweet)</li> <li>EasyAuth - Create a centralized Authentication and Authorization token server.</li> <li>FastAPI Cloud Auth - Simple integration between FastAPI and cloud authentication services (AWS Cognito, Auth0, Firebase Authentication).</li> <li>FastAPI Users - Ready-to-use and customizable users management for FastAPI.</li> <li>fastapi-cache - Tool to cache fastapi response and function result, with backends support redis and memcache.</li> <li>Frappe - Full-stack web application framework that uses Python and MariaDB on the server side and a tightly integrated client side library.</li> <li>Tornado - Python web framework and asynchronous networking library. (Docs)</li> <li>Sanic - Async Python 3.6+ web server/framework | Build fast. Run fast. (Web) (Awesome)</li> <li>IDOM - Create highly interactive web pages purely in Python.</li> <li>apischema - JSON (de)serialization, GraphQL and JSON schema generation through python typing.</li> <li>Proxy.py - Lightweight, single file HTTP proxy server in Python.</li> <li>Ariadne - Python library for implementing GraphQL servers using schema-first approach. (Web)</li> <li>fastapi-gino-arq-uvicorn - High-performance Async REST API, in Python. FastAPI + GINO + Arq + Uvicorn (w/ Redis and PostgreSQL).</li> <li>HTTP Core - Minimal HTTP client.</li> <li>GraphQL-core 3 - Python 3.6+ port of the GraphQL.js reference implementation of GraphQL.</li> <li>Pyre - Fast asyncronous HTTP server and framework written in Rust for Python.</li> <li>PyJWT - JSON Web Token implementation in Python.</li> <li>httptools - Fast HTTP parser.</li> <li>Hip - New Python HTTP client for everybody. It supports synchronous Python (just like requests does), but also Trio, asyncio and Curio.</li> <li>Molten - Minimal, extensible, fast and productive framework for building HTTP APIs with Python 3.6 and later. (Docs)</li> <li>Lona - Web application framework, designed to write responsive web apps in full Python.</li> <li>AIOHTTP - Asynchronous HTTP client/server framework for asyncio and Python. (Docs)</li> <li>aiohttp-client-cache - Async persistent cache for aiohttp requests.</li> <li>GQL - GraphQL client in Python.</li> <li>FastWSGI - Ultra fast WSGI server for Python 3. (HN)</li> <li>Starlite - Light, opinionated and flexible ASGI API framework built on top of pydantic and Starlette.</li> <li>pook - HTTP traffic mocking and testing made easy in Python.</li> <li>Faster-than-Requests - Faster requests on Python 3.</li> <li>Minos - Framework which helps you create reactive microservices in Python.</li> <li>py_webauthn - Pythonic WebAuthn.</li> <li>PyWebIO - Write interactive web app in script way.</li> <li>aiolimiter - Efficient implementation of a rate limiter for asyncio.</li> <li>OpenAPI Python Client - Generate modern Python clients from OpenAPI.</li> <li>WARCIO - Streaming WARC/ARC library for fast web archive IO.</li> <li>Warctools - Command line tools and libraries for handling and manipulating WARC files (and HTTP contents).</li> <li>OpenAPI Spec validator</li> <li>Uplink - Declarative HTTP Client for Python.</li> <li>aiorwlock - Read/Write Lock - synchronization primitive for asyncio.</li> <li>Nitro - Simplest way to build web apps using Python. No JavaScript/HTML/CSS coding.</li> <li>HTTPX OAuth - Async OAuth client using HTTPX.</li> <li>requests-cache - Transparent persistent cache for python requests.</li> <li>waiter - Delayed iteration for polling and retries.</li> <li>Clients - High-level HTTP clients for Python.</li> <li>stamina - Composable toolkit for handling retries.</li> <li>httparse - Python wrapper for Rust's httparse HTTP parser.</li> <li>aiosignal - List of registered asynchronous callbacks.</li> <li>HTTPretty - Intercept HTTP requests at the Python socket level. Fakes the whole socket module.</li> <li>nTorque - Web hook task queue.</li> <li>HStream - Quick Python web apps. Streamlit alternative using htmx. (HN)</li> <li>pyxl4 - Extend Python syntax with HTML.</li> <li>terminado - Tornado websocket backend for the Xterm.js JavaScript terminal emulator library.</li> <li>Pynecone - Web apps in pure Python. (HN) (Web) (HN)</li> <li>Falcon - Minimalist ASGI/WSGI framework for building mission-critical REST APIs and microservices, with a focus on reliability, correctness, and performance at scale.</li> <li>hface - Hackable HTTP/{1,2,3} {client,server,proxy}.</li> <li>rush - Library for throttles.</li> <li>Esmerald - Highly scalable, performant, easy to learn, easy to code and for every application python web framework.</li> <li>yhttp - Lightweight flask-like HTTP framework.</li> <li>Jar - Server-side web framework that deploys to Vercel. (My Own Python Web Framework) (HN)</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#ml","title":"ML","text":"<ul> <li>JAX - GPU- and TPU-backed NumPy with differentiation and JIT compilation. (HN) (Docs) (JAX: accelerated machine learning research via composable function transformations in Python (2020)) (Intro to JAX)</li> <li>Autograd - Efficiently computes derivatives of numpy code.</li> <li>GluonTS - Probabilistic time series modeling in Python.</li> <li>GPy - Gaussian processes framework in python.</li> <li>Chaospy - Toolbox for performing uncertainty quantification.</li> <li>Categorical Encoding Methods - Library of sklearn compatible categorical variable encoders.</li> <li>Pyodide - Python with the scientific stack, compiled to WebAssembly. (Docs) (Tweet) (micropip)</li> <li>AtsPy - Automated Time Series Models in Python.</li> <li>iterative-stratification - scikit-learn cross validators for iterative stratification of multilabel data.</li> <li>PyMeasure - Scientific measurement library for instruments, experiments, and live-plotting.</li> <li>siuba - Scrappy data analysis, with seamless support for pandas and SQL.</li> <li>Python Outlier Detection (PyOD) - Python Toolbox for Scalable Outlier Detection (Anomaly Detection).</li> <li>SymPy - Computer algebra system written in pure Python. (Web) (Web Code)</li> <li>many_requests - Dead easy interface for executing many HTTP requests asynchronously. Also provides helper functions for executing embarrassingly parallel async coroutines.</li> <li>scikit-mobility - Mobility analysis in Python.</li> <li>data-science-types - Mypy stubs, i.e., type information, for numpy, pandas and matplotlib.</li> <li>Tigramite - Time series analysis python module for causal discovery.</li> <li>SciPy - Provides many user-friendly and efficient numerical routines, such as routines for numerical integration, interpolation, optimization, linear algebra, and statistics. (Web) (SciPy Lecture Notes) (HN)</li> <li>whylogs - Profile and monitor your ML data pipeline end-to-end.</li> <li>jaxlie - Lie groups for rigid transformations &amp; optimization in JAX.</li> <li>Time Series Feature Extraction - Intuitive library to extract features from time series.</li> <li>Kalepy - Kernel Density Estimation and (re)sampling.</li> <li>Bodywork - Python framework that helps machine learning engineers run batch jobs, serve models and deploy machine learning pipelines, in containers on Kubernetes.</li> <li>Stheno - Gaussian process modelling in Python.</li> <li>dabl - Data Analysis Baseline Library.</li> <li>pandas-ml - pandas, scikit-learn, xgboost and seaborn integration.</li> <li>wavetorch - Numerically solving and backpropagating through the wave equation.</li> <li>ennemi - Easy Nearest Neighbor Estimation of Mutual Information.</li> <li>Knock Knock - Get notified when your training ends with only two additional lines of code.</li> <li>Orion - Asynchronous Distributed Hyperparameter Optimization. (Docs)</li> <li>ProbNum - Probabilistic Numerics in Python.</li> <li>OpenL3 - Open-source deep audio and image embeddings.</li> <li>xitorch - Differentiable scientific computing library.</li> <li>randopt - Python package for machine learning experiment management, hyper-parameter optimization, and results visualization.</li> <li>Kats - Toolkit to analyze time series data, a lightweight, easy-to-use, and generalizable framework to perform time series analysis. (Web)</li> <li>pymdp - Python implementation of active inference for Markov Decision Processes.</li> <li>pypc - Predictive coding in Python.</li> <li>PyNN - Python package for simulator-independent specification of neuronal network models.</li> <li>JAX-CFD - Computational Fluid Dynamics in JAX.</li> <li>pomegranate - Fast, flexible and easy to use probabilistic modelling in Python.</li> <li>sklearn-expertsys - Highly interpretable classifiers for scikit learn, producing easily understood decision rules instead of black box models.</li> <li>TensorAnnotations - Annotating tensor shapes using Python types.</li> <li>AgentPy - Open-source framework for the development and analysis of agent-based models in Python.</li> <li>autotst - AutoML Two-Sample Test. (Tweet)</li> <li>Roerich - Python library of change point detection algorithms for time series.</li> <li>tftb - Python module for time-frequency analysis.</li> <li>PyPOTS - Python Toolbox for Data Mining on Partially-Observed Time Series.</li> <li>SKOPS - Python library helping you share your scikit-learn based models and put them in production.</li> <li>HDDM - Python module that implements Hierarchical Bayesian parameter estimation of Drift Diffusion Models (via PyMC).</li> <li>Regressio - Python library for univariate regression, interpolation, and smoothing. (HN)</li> <li>MAPIE - Scikit-learn-compatible module for estimating prediction intervals.</li> <li>modelcards - Utility to create, edit, and publish model cards on the Hugging Face Hub.</li> <li>xbatcher - Batch Generation from Xarray Datasets.</li> <li>scikit-opt - Swarm Intelligence in Python.</li> <li>TSInterpret - Python library for interpreting time series classification.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#biology","title":"Biology","text":"<ul> <li>Biopython - International association of developers of freely available Python tools for computational molecular biology.</li> <li>cobrapy - Constraint-Based Reconstruction and Analysis in Python.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#cli","title":"CLI","text":"<ul> <li>radicli - Radically lightweight command-line interfaces.</li> <li>Cleo - Create beautiful and testable command-line interfaces.</li> <li>tyro - Strongly typed, zero-effort CLI interfaces &amp; config objects.</li> <li>Tap - Typed modernization of Python's argparse library.</li> <li>Appeal - Command-line parsing library for Python 3.</li> <li>SimpleParsing - Simple, Elegant, Typed Argument Parsing with argparse.</li> <li>Typer - Build great CLIs. Easy to code. Based on Python type hints.</li> <li>Python Fire - Library for automatically generating command line interfaces (CLIs) from absolutely any Python object.</li> <li>Rich - Python library for rendering rich text and beautiful formatting to the terminal. (HN) (HN thread on Rich tables) (HN)</li> <li>questionary - Easy to use python library to build pretty command line user prompts.</li> <li>Cutie - Command line User Tools for Input Easification.</li> <li>bullet - Beautiful Python Prompts Made Simple.</li> <li>alive-progress - New kind of Progress Bar, with real time throughput, eta and cool animations.</li> <li>python-nubia - Lightweight framework for building command-line applications with Python.</li> <li>argcomplete - Python and tab completion, better together.</li> <li>docopt-ng - Humane command line arguments parser. Now with maintenance, typehints, and complete test coverage.</li> <li>Plotext - Python Plotting on the Terminal. (HN)</li> <li>shpyX - Configurable shell command execution in Python.</li> <li>survey - Simple library for creating beautiful interactive prompts.</li> <li>Piou - CLI tool to build beautiful command-line interfaces with type validation.</li> <li>progress - Easy progress reporting for Python.</li> <li>minydra - Minimal Python command-line parser inspired by Facebook's Hydra + dot-accessible nested dictionaries.</li> <li>ptyprocess - Launch a subprocess in a pseudo terminal (pty), and interact with both the process and its pty.</li> <li>Pexpect - Python module for controlling interactive programs in a pseudo-terminal.</li> <li>PyTermGUI - Simple yet powerful TUI framework for your Python (3.7+) applications.</li> <li>Colorama - Simple cross-platform colored terminal text in Python.</li> <li>jsonargparse - Parsing of command line options, yaml/jsonnet config files and/or environment variables based on argparse.</li> <li>ArgBind - Build CLIs via docstrings and type annotations, with YAML support.</li> <li>targ - Build a Python CLI for your app, just using type hints and docstrings.</li> <li>rich-click - Format click help output nicely with Rich.</li> <li>Rich CLI - Command line toolbox for fancy output in the terminal.</li> <li>click-params - Bunch of click parameters to use.</li> <li>textual-autocomplete - Easily add autocomplete dropdowns to your Textual apps.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#db","title":"DB","text":"<ul> <li>Cacheops - Slick ORM cache with automatic granular event-driven invalidation.</li> <li>Danio - ORM for python asyncio world.</li> <li>GINO - Not ORM - is a lightweight asynchronous ORM built on top of SQLAlchemy core for Python asyncio. (Web)</li> <li>SQLModel - SQL databases in Python, designed for simplicity, compatibility, and robustness.</li> <li>SQLAlchemy - Python SQL Toolkit and Object Relational Mapper.</li> <li>sqlacodegen - Automatic model code generator for SQLAlchemy.</li> <li>marshmallow - Lightweight library for converting complex objects to and from simple Python datatypes. (Docs)</li> <li>marshmallow-dataclass - Automatic generation of marshmallow schemas from dataclasses.</li> <li>psycopg2 - Python-PostgreSQL Database Adapter. (Web)</li> <li>Psycopg 3 - Modern implementation of a PostgreSQL adapter for Python.</li> <li>Databases - Gives you simple asyncio support for a range of databases.</li> <li>aiosql - Simple SQL in Python.</li> <li>Plyvel - Fast and feature-rich Python interface to LevelDB.</li> <li>ormar - Async mini ORM for Python, with support for Postgres, MySQL, and SQLite.</li> <li>ormar-postgres-extensions - Extensions to the Ormar ORM to support PostgreSQL specific types.</li> <li>yoyo-migrations - Database schema migration tool. Database migrations can be written as SQL files or Python scripts.</li> <li>PyPika - Python API for building SQL queries. Excels at all sorts of SQL queries but is especially useful for data analysis.</li> <li>Tortoise ORM - Easy-to-use asyncio ORM inspired by Django.</li> <li>Vinum - SQL query processor for Python, designed for data analysis workflows and in-memory analytics.</li> <li>aiosqlite - Friendly, async interface to sqlite databases.</li> <li>ORM - Async ORM for Python, with support for Postgres, MySQL, and SQLite.</li> <li>ConnectorX - Fastest library to load data from DB to DataFrames in Rust and Python. (Lobsters)</li> <li>dataset - Easy-to-use data handling for SQL data stores with support for implicit table creation, bulk loading, and transactions. (Docs)</li> <li>Piccolo - Fast, user friendly ORM and query builder which supports asyncio. (Web)</li> <li>Alembic - Database migrations tool for SQLAlchemy.</li> <li>data_algebra - Codd method-chained SQL generator and Pandas data processing in Python.</li> <li>pytest-postgresql - Pytest plugin, that enables you to test your code that relies on a running PostgreSQL Database.</li> <li>omniduct - Uniform interfaces for connecting to and extracting data from a wide variety of (potentially remote) data stores.</li> <li>PugSQL - HugSQL-inspired database library for Python.</li> <li>PyStow - Easily pick a place to store data for your Python code.</li> <li>CogDB - Graph Database for Python.</li> <li>SQLAlchemy adapter for CockroachDB</li> <li>pgspecial - API to execute meta-commands (AKA \"special\", or \"backslash commands\") on PostgreSQL.</li> <li>DuckDB Foreign Data Wrapper for PostgreSQL</li> <li>Ibis BigQuery - BigQuery backend for Ibis.</li> <li>Arrowdantic - Small Python library backed by a mature Rust implementation of Apache Arrow.</li> <li>static_ondisk_kv - Simple and fast implementation of a static on disk kv, in python.</li> <li>SQLGlot - Python SQL Parser and Transpiler. (HN)</li> <li>sqlakeyset - Keyset-based paging for SQLAlchemy (both ORM and core).</li> <li>datamodel-code-generator - Pydantic model generator for easy conversion of JSON, OpenAPI, JSON Schema, and YAML data sources.</li> <li>sqlvalidator - SQL queries formatting, syntactic and semantic validation.</li> <li>pg8000 - Pure-Python PostgreSQL Driver.</li> <li>iopath - Python library that provides common I/O interface across different storage backends.</li> <li>cloudpathlib - Python pathlib-style classes for cloud storage services such as Amazon S3, Azure Blob Storage, and Google Cloud Storage.</li> <li>sql-metadata - Uses tokenized query returned by python-sqlparse and generates query metadata.</li> <li>redis-pydict - Python dictionary that uses Redis as in-memory storage backend to facilitate distributed computing applications development.</li> <li>Redis OM - Objecting mapping, and more, for Redis and Python.</li> <li>Inline SQL - Inline SQL in any Python program.</li> <li>\u03bcSQLite - SQLite module for MicroPython.</li> <li>mincePy - Object storage with versioning made simple.</li> <li>Graphene-SQLAlchemy - SQLAlchemy integration for Graphene.</li> <li>yhttp-pony - Pony ORM extension for yhttp.</li> <li>greendb - Lightweight server (and Python client) for symas lmdb.</li> <li>Theine - High performance in-memory cache.</li> <li>limits - Rate limiting using various strategies and storage backends such as redis &amp; memcached.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#websocket","title":"WebSocket","text":"<ul> <li>httpx-ws - WebSockets support for HTTPX.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#gui","title":"GUI","text":"<ul> <li>Toga - Python native, OS native GUI toolkit.</li> <li>Guietta - Python module to create simple GUIs. (HN) (Lobsters)</li> <li>PySimpleGUI - Transforms UI into People-Friendly Pythonic Interfaces. (HN)</li> <li>Dear PyGui - Simple to use (but powerful) Python GUI framework. (HN)</li> <li>pyimgui - Cython-based Python bindings for dear imgui.</li> <li>wxPython Phoenix - Cross-Platform GUI Library.</li> <li>pywebview - Build GUI for your Python program with JavaScript, HTML, and CSS. (Web)</li> <li>Flexx - Write desktop and web apps in pure Python.</li> <li>PyAutoGUI - Cross-platform GUI automation Python module for human beings.</li> <li>Tkinter Designer - Create Beautiful Tkinter GUIs by Drag and Drop.</li> <li>Textual - TUI (Text User Interface) framework for Python inspired by modern web development. (0.2 release) (Building TUIs with textual: first impressions)</li> <li>tuilwindcss - Like Tailwind, but for TUI frameworks in Textual.</li> <li>Briefcase - Tools to support converting a Python project into a standalone native application. (Briefcase macOS App Template)</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#graphics","title":"Graphics","text":"<ul> <li>pygmsh - Provides useful abstractions from Gmsh's own Python interface so you can create complex geometries more easily.</li> <li>PyQtGraph - Fast data visualization and GUI tools for scientific / engineering applications.</li> <li>mesh_to_sdf - Calculate signed distance fields for arbitrary meshes.</li> <li>Raylib-Python-CFFI - Python CFFI bindings for Raylib.</li> <li>drawbot-skia - Python package implementing a subset of the DrawBot API using Skia as a backend.</li> <li>pygfx - Python render engine running on wgpu.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#crypto","title":"Crypto","text":"<ul> <li>fastecdsa - Python library for fast elliptic curve crypto.</li> <li>PyCryptodome - Self-contained cryptographic library for Python.</li> <li>eciespy - Elliptic Curve Integrated Encryption Scheme for secp256k1 in Python.</li> <li>pyOpenSSL - Python wrapper around the OpenSSL library.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#graphql","title":"GraphQL","text":"<ul> <li>Graphique - GraphQL service for arrow tables and parquet data sets.</li> <li>Ariadne Code Generator - Generate fully typed Python client for any GraphQL API from schema, queries and mutations.</li> <li>Turms - Python implementation of the awesome graphql-codegen library, following a simliar extensible design.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#macos","title":"macOS","text":"<ul> <li>numbers-parser - Python module for parsing Apple Numbers .numbers files. (HN)</li> <li>Python Apple Support - Meta-package for building a version of Python that can be embedded into a macOS, iOS, tvOS or watchOS project.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#math","title":"Math","text":"<ul> <li>copt - Python library for mathematical optimization.</li> <li>GoodPoints - Python package for generating concise, high-quality summaries of a probability distribution.</li> <li>PyCircStat - Toolbox for circular statistics with Python.</li> <li>miceforest - Multiple Imputation with Random Forests in Python.</li> <li>PyStan - Python interface to Stan, a package for Bayesian inference.</li> <li>Statsmodels - Statistical modeling and econometrics in Python.</li> <li>TriMap - Large-scale Dimensionality Reduction Using Triplets.</li> <li>Metalibm - Code generation tool to generate mathematical libraries.</li> <li>Reals - Lightweight library for arithmetic with real numbers.</li> <li>Proximal Minimization - Solvers for constrained optimization problems.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#physics","title":"Physics","text":"<ul> <li>solid_dmft - Versatile python wrapper to perform DFT+DMFT calculations utilizing the TRIQS software library.</li> <li>scikit-ued - Collection of algorithms and routines for (ultrafast) electron diffraction and scattering.</li> <li>crystals - Data structures, algorithms, and parsing for crystallography.</li> <li>PyCBC - Software package used to explore astrophysical sources of gravitational waves.</li> <li>MPmorph - Collection of tools to run and analyze ab-initio molecular dynamics (AIMD) calculations run with VASP.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#linux","title":"Linux","text":"<ul> <li>packet - Provides access to Linux packet sockets (AF_PACKET).</li> <li>rsyscall - Process-independent interface to Linux system calls.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#test","title":"Test","text":"<ul> <li>scripttest - Library to help you test your interactive command-line applications.</li> <li>Coverage.py - Code coverage measurement for Python.</li> <li>pytest - Makes it easy to write small tests, yet scales to support complex functional testing.</li> <li>pytest-cookies - Pytest plugin for your Cookiecutter templates.</li> <li>pytest-plugins - Grab-bag of nifty pytest plugins.</li> <li>mutmut - Mutation testing system for Python, with a strong focus on ease of use.</li> <li>FreezeGun - Allows your Python tests to travel through time by mocking the datetime module.</li> <li>datatest - Test driven data-wrangling and data validation.</li> <li>Precisely - Better assertions for Python tests. (HN)</li> <li>Ward - Modern test framework for Python with a focus on productivity and readability.</li> <li>Pynguin \u2013 Generate Python unit tests automatically. (HN)</li> <li>Parameterized - Parameterized testing for nose, parameterized testing for py.test, parameterized testing for unittest.</li> <li>hyppo - Python package for multivariate hypothesis testing.</li> <li>pytest-instafail - Plugin for pytest that shows failures and errors instantly instead of waiting until the end of test session.</li> <li>pytest-mock - Thin-wrapper around the mock package for easier use with pytest.</li> <li>Responses - Utility for mocking out the Python Requests library.</li> <li>pytest-timeout - Time each test and terminate it when it takes too long.</li> <li>Syrupy - Sweeter pytest snapshot plugin.</li> <li>Pydantic-Factories - Pydantic based mock data generation.</li> <li>flake8-assertive - Flake8 unittest assert method checker.</li> <li>Klara - Automatic test case generation for python and static analysis library.</li> <li>detect-test-pollution - Tool to detect test pollution.</li> <li>pytest-cov - Coverage plugin for pytest.</li> <li>pytest-parallel - Pytest plugin for parallel and concurrent testing.</li> <li>pytest_httpserver - HTTP server for pytest.</li> <li>testing.postgresql - Automatically setups a postgresql instance in a temporary directory, and destroys it after testing.</li> <li>pytest-insta - Practical snapshot testing plugin for pytest.</li> <li>pytest-split - Pytest plugin which splits the test suite to equally sized \"sub suites\" based on test execution time.</li> <li>async-solipsism - Provide a Python asyncio event loop that does not interact with the outside world at all.</li> <li>pytest-docker-compose - Spin up Docker containers during your integration tests automatically.</li> <li>pytest-memray - Pytest plugin for easy integration of memray.</li> <li>marbles - Read better test failures.</li> <li>better-exceptions - Pretty and useful exceptions in Python, automatically.</li> <li>ReFrame - Powerful Python framework for writing and running portable regression tests and benchmarks for HPC systems.</li> <li>Pretend - Library to make stubbing with Python easier.</li> <li>Nox - Flexible test automation for Python.</li> <li>PyTruth - Assertion framework for Python unit tests.</li> <li>pytest-accept - Pytest plugin for automatically updating doctest outputs.</li> <li>RESPX - Mock HTTPX with awesome request patterns and response side effects.</li> <li>Pytest-parametrized - Pytest decorator for parametrizing tests with default iterables.</li> <li>pytestify - Automatically convert unittests to pytest.</li> <li>HypoFuzz - Adaptive fuzzing of Hypothesis tests.</li> <li>Cosmic Ray - Mutation testing for Python.</li> <li>time-machine - Travel through time in your tests.</li> <li>pytest-pretty - Pytest plugin for pretty printing the test summary.</li> <li>pytest-subtests - Unittest subTest() support and subtests fixture.</li> <li>pytypest - Testing framework that empowers pytest (with better fixtures and parametrization).</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#error","title":"Error","text":"<ul> <li>rescue - Type-safe exceptions for Python.</li> <li>python-tblib - Serialization library for Exceptions and Tracebacks.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#embedded","title":"Embedded","text":"<ul> <li>Atmel AVR - Development platform for PlatformIO.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#other","title":"Other","text":"<ul> <li>Click - Create beautiful command line interfaces in a composable way with as little code as necessary. (click-man - Create man pages for click applications) (Code) (Article)</li> <li>Hypertools - Python toolbox for gaining geometric insights into high-dimensional data.</li> <li>Flit - Simple way to put Python packages and modules on PyPI.</li> <li>Photon - Lightning fast web crawler which extracts URLs, files, intel &amp; endpoints from a target.</li> <li>Snowy - Tiny Python 3 module for manipulating and generating images.</li> <li>Trio - Pythonic async I/O for humans and snake people.</li> <li>Responder - Familiar HTTP Service Framework for Python.</li> <li>Loguru - Python logging made (stupidly) simple.</li> <li>Blaze - Translates a subset of modified NumPy and Pandas-like syntax to databases and other computing systems.</li> <li>Dash Table - First-Class Interactive DataTable for Dash.</li> <li>Kombu - Messaging library for Python.</li> <li>FastAPI - Modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints. (Modern APIs with FastAPI course) (FastAPI Code Generator) (FastAPI Auth) (Getting started with GraphQL in Python with FastAPI and Ariadne) (JWT Auth) (FastAPI Real World App) (MeiliSearch FastAPI)</li> <li>Starlette - Little ASGI framework that shines. (Docs)</li> <li>Poetry - Python dependency management and packaging made easy.</li> <li>POT: Python Optimal Transport - Provide several solvers for optimization problems related to Optimal Transport for signal, image processing and machine learning.</li> <li>Pampy - Pattern Matching for Python you always dreamed of.</li> <li>StrictYAML - Type-safe YAML parser and validator.</li> <li>coconut - Simple, elegant, Pythonic functional programming. (Web) (HN)</li> <li>Hydra - Framework for elegantly configuring complex applications.</li> <li>Toolz - Set of utility functions for iterators, functions, and dictionaries. (HN)</li> <li>PeachPy - x86-64 assembler embedded in Python.</li> <li>Peewee - Small, expressive orm -- supports postgresql, mysql and sqlite.</li> <li>Curio - Library for Python systems programming involving concurrent I/O with network sockets, files, subprocesses, and similar constructs.</li> <li>Hyperopt - Python library for serial and parallel optimization over awkward search spaces, which may include real-valued, discrete, and conditional dimensions.</li> <li>pyfolio - Python library for performance and risk analysis of financial portfolios.</li> <li>heartrate - Simple real time visualisation of the execution of a Python program.</li> <li>sorcery - Dark magic delights in Python.</li> <li>sktime - scikit-learn compatible Python toolbox for learning with time series and panel data.</li> <li>Incremental - Library for versioning your Python projects.</li> <li>Modin - Speed up your Pandas workflows by changing a single line of code.</li> <li>Thorn - Webhook framework for Python, focusing on flexibility and ease of use, both when getting started and when maintaining a production system.</li> <li>gevent - Coroutine-based concurrency library for Python. (How to use Flask with gevent (uWSGI and Gunicorn editions))</li> <li>Meshio - I/O for mesh files.</li> <li>Streamz - Real-time stream processing for python.</li> <li>Hypothesis - Powerful, flexible, and easy to use library for property-based testing. (How Hypothesis Works) (Web) (Lobsters)</li> <li>kombu - Messaging library for Python.</li> <li>GPUtil - Python module for getting the GPU status from NVIDA GPUs using nvidia-smi programmically in Python.</li> <li>anosql - Easy SQL in Python.</li> <li>Adaptive - Parallel active learning of mathematical functions.</li> <li>Cachew - Persistent cache/serialization powered by type hints.</li> <li>rq - Simple job queues for Python.</li> <li>ftfy - Fixes mojibake and other glitches in Unicode text, after the fact.</li> <li>CleverCSV - Python package for handling messy CSV files.</li> <li>Camelot - Python library to extract tabular data from PDFs.</li> <li>gif - Better way to build animated Matplotlib gifs.</li> <li>pynamical - Python package for modeling and visualizing discrete nonlinear dynamical systems, chaos, and fractals.</li> <li>Inline C - Effortlessly write inline C functions in Python.</li> <li>rst2pdf - Use a text editor. Make a PDF.</li> <li>schedule - Python job scheduling for humans.</li> <li>asyncpg - Fast PostgreSQL Database Client Library for Python/asyncio.</li> <li>Newspaper3k - News, full-text, and article metadata extraction in Python 3.</li> <li>orjson - Fast, correct JSON library for Python.</li> <li>daiquiri - Python logging setup helper.</li> <li>Pifpaf - Python fixtures and daemon managing tools for functional testing.</li> <li>einops - Deep learning operations reinvented (for pytorch, tensorflow, chainer, gluon and others).</li> <li>Python libraries for Google Colaboratory</li> <li>PandasVault - Advanced Pandas Functions and Code Snippets.</li> <li>returns - Make your functions return something meaningful, typed, and safe.</li> <li>Koda - Type-safe functional tools for Python. (HN)</li> <li>baikal - Graph-based functional API for building complex scikit-learn pipelines.</li> <li>missingno - Missing data visualization module for Python.</li> <li>STPyV8 - Allows interop between Python 3 and JavaScript running Google's V8 engine.</li> <li>LibCST - Concrete syntax tree parser and serializer library for Python that preserves many aspects of Python's abstract syntax tree.</li> <li>Matplotlib - Comprehensive library for creating static, animated, and interactive visualizations in Python. (Cheat Sheets) (Web) (Gallery)</li> <li>Jug - Parallel programming with Python.</li> <li>Pingouin - Open-source statistical package written in Python 3 and based mostly on Pandas and NumPy.</li> <li>rpy2 - Interface to use R from Python.</li> <li>Forbidden Fruit - Allows Python code to extend built-in types.</li> <li>PandaPy - Has the speed of NumPy and the usability of Pandas (10x to 50x faster).</li> <li>dramatiq - Fast and reliable background task processing library for Python 3.</li> <li>More Itertools - More routines for operating on iterables, beyond itertools.</li> <li>awkward-array - Manipulate arrays of complex data structures as easily as Numpy.</li> <li>Pydantic - Data parsing and validation using Python type hints. (Docs)</li> <li>Goodconf - Transparently load variables from environment or JSON/YAML file.</li> <li>graphene-pydantic - Integrate GraphQL with your Pydantic models.</li> <li>Python Sorted Containers - Sorted List, Sorted Dict, and Sorted Set.</li> <li>MacroPy3 - Provides a mechanism for user-defined functions (macros) to perform transformations on the abstract syntax tree (AST) of a Python program at import time.</li> <li>Joblib - Computing with Python functions. (Docs) (Tweet)</li> <li>Little Ball of Fur - NetworkX extension library for graph sampling. (HN)</li> <li>aiojobs - Jobs scheduler for managing background task (asyncio).</li> <li>sqlitedict - Persistent dict, backed-up by SQLite and pickle.</li> <li>gensim - Topic Modelling in Python.</li> <li>mistletoe - Fast, extensible and spec-compliant Markdown parser in pure Python.</li> <li>Pypeln - Concurrent data pipelines in Python.</li> <li>Science Plots - Matplotlib styles for scientific plotting.</li> <li>Typeshed - Collection of library stubs for Python, with static types.</li> <li>Dominate - Python library for creating and manipulating HTML documents using an elegant DOM API.</li> <li>Watchdog - Python API and shell utilities to monitor file system events.</li> <li>Rope - Python refactoring library.</li> <li>PyVISA - Python package with bindings to the \"Virtual Instrument Software Architecture\" VISA library, in order to control measurement devices and test equipment via GPIB, RS232, or USB.</li> <li>hyperjson - Hyper-fast Python module for reading/writing JSON data using Rust's serde-json.</li> <li>Invoke - Pythonic task management &amp; command execution.</li> <li>Invocations - Reusable Invoke tasks.</li> <li>Texthero - Python toolkit to work with text-based dataset quickly and effortlessly. (Web)</li> <li>Pymanopt - Python toolbox for optimization on manifolds, that computes gradients and Hessians automatically.</li> <li>Wily - Python application for tracking, reporting on timing and complexity in Python code.</li> <li>PyNaCl - Python binding to the Networking and Cryptography (NaCl) library.</li> <li>pyca/cryptography - Package designed to expose cryptographic primitives and recipes to Python developers.</li> <li>bcrypt - Modern(-ish) password hashing for your software and your servers.</li> <li>oscrypto - Compiler-free Python crypto library backed by the OS, supporting CPython and PyPy.</li> <li>flupy - Fluent data pipelines for python and your shell.</li> <li>fastcore - Python goodies to make your coding faster, easier, and more maintainable. (Article) (HN)</li> <li>cadCAD - Design, simulate, validate, and operate within complex systems.</li> <li>asyncio-buffered-pipeline - Parallelise pipelines of Python async iterables/generators. (HN)</li> <li>quickle - Fast and small serialization format for a subset of Python types. (Docs)</li> <li>Boltons - Set of over 230 pure-Python utilities.</li> <li>catalogue - Tiny, zero-dependencies library that makes it easy to add function (or object) registries to your code.</li> <li>Hask - Haskell language features and standard libraries in pure Python. (HN)</li> <li>Fabric - Simple, Pythonic remote execution and deployment.</li> <li>environs - Python library for parsing environment variables.</li> <li>Zappa - Serverless Python.</li> <li>Falkon - Python implementation of the Falkon algorithm for large-scale, approximate kernel ridge regression.</li> <li>tomotopy - Python extension of tomoto (Topic Modeling Tool) which is a Gibbs-sampling based topic model library written in C++.</li> <li>magicimport.py - Python code that fetches its dependencies without complaining. (HN)</li> <li>pymia - Python package for data handling and evaluation in deep learning-based medical image analysis.</li> <li>pyRiemann - Python package for covariance matrices manipulation and classification through riemannian geometry.</li> <li>DFTimewolf - Framework for orchestrating forensic collection, processing and data export.</li> <li>attrs - Python Classes Without Boilerplate. (Docs)</li> <li>Morfessor - Tool for unsupervised and semi-supervised morphological segmentation.</li> <li>Construct - Powerful declarative and symmetrical parser and builder for binary data.</li> <li>Python BigQuery - Python Client for Google BigQuery.</li> <li>halo - Beautiful spinners for terminal, IPython and Jupyter.</li> <li>Functions Framework for Python - FaaS (Function as a service) framework for writing portable Python functions.</li> <li>Cachier - Persistent, stale-free, local and cross-machine caching for Python functions.</li> <li>pdpipe - Easy pipelines for pandas DataFrames.</li> <li>Typing Inspect - Runtime inspection utilities for Python typing module.</li> <li>Scalpl - Lightweight wrapper to operate on nested dictionaries seamlessly.</li> <li>JSONStreams - Python library for writing JSON documents as streams.</li> <li>Transducers - Pure Python implementation of Clojure's transducers.</li> <li>TextDistance - Python library for comparing distance between two or more sequences by many algorithms.</li> <li>Deal - Design by contract for Python with many validators support.</li> <li>PFIO - Library to access various filesystems with unified API.</li> <li>Await, What? - Tells you what waits for what in an async/await program.</li> <li>rasterstats - Python module for summarizing geospatial raster datasets based on vector geometries.</li> <li>simanneal - Python module for Simulated Annealing optimization.</li> <li>jsonschema - Implementation of JSON Schema for Python.</li> <li>swifter - Package which efficiently applies any function to a pandas dataframe or series in the fastest available manner.</li> <li>marisa-trie - Static memory-efficient Trie-like structures for Python.</li> <li>DAWG - DAFSA-based dictionary-like read-only objects for Python.</li> <li>dataclassframe - Container for dataclasses with multi-indexing and bulk operations.</li> <li>klio - Smarter data pipelines for audio. (Docs)</li> <li>lambdas - Write short and fully-typed lambdas where you need them.</li> <li>classes - Smart, pythonic, ad-hoc, typed polymorphism for Python.</li> <li>pluggy - Minimalist production ready plugin system.</li> <li>crocs - Introduces the concept of yregex that is a mean of implementing regex patterns using pure python classes. There are python classes for regex operators, these classes are grouped together to form your desired pattern.</li> <li>pydash - Kitchen sink of Python utility libraries for doing \"stuff\" in a functional way. Based on the Lo-Dash JavaScript library.</li> <li>Googletrans - Free and unlimited python library that implemented Google Translate API.</li> <li>aiomisc - Miscellaneous utils for asyncio.</li> <li>Promise - Ultra-performant Promise implementation in Python.</li> <li>JSON Schema-powered type annotations</li> <li>Awkward Array - Manipulate JSON-like data with NumPy-like idioms.</li> <li>python-qrcode - Python QR Code image generator.</li> <li>Pathy - Path interface for local and cloud bucket storage.</li> <li>MetadataParser - Python module for pulling metadata out of web documents.</li> <li>PyWavelets - Wavelet Transforms in Python.</li> <li>Snowflake Connector for Python</li> <li>nested_lookup - Python functions for working with deeply nested documents (lists and dicts).</li> <li>jsons - Python lib for (de)serializing Python objects to/from JSON.</li> <li>aiosmtpd - Asyncio based SMTP server.</li> <li>Faker - Python package that generates fake data for you.</li> <li>Autoimport - Automatically fixes wrong import statements.</li> <li>Lcapy - Python package for linear circuit analysis. It uses SymPy for symbolic mathematics.</li> <li>Opytimizer - Nature-Inspired Python Optimizer.</li> <li>Futureproof - Bulletproof concurrent.futures.</li> <li>Delocate - Find and copy needed dynamic libraries into python wheels.</li> <li>Result - Simple Rust like Result type for Python 3. Fully type annotated.</li> <li>cu2qu - Cubic-to-quadratic bezier curve conversion.</li> <li>Microdict - High performance python hash table library that is generally faster and consumes significantly less memory than Python Dictionaries.</li> <li>Zarr - Implementation of chunked, compressed, N-dimensional arrays for Python.</li> <li>particles - Sequential Monte Carlo in python.</li> <li>entmax - PyTorch implementation of entmax and entmax losses: a sparse family of probability mappings and corresponding loss functions, generalizing softmax / cross-entropy.</li> <li>RxPY - Reactive Extensions for Python. (Docs)</li> <li>Frictionless - Framework to describe, extract, validate, and transform tabular data. (Web)</li> <li>huey - Little task queue for python.</li> <li>Tree - Library for working with nested data structures. (HN)</li> <li>uvloop - Ultra fast asyncio event loop.</li> <li>cachetools - Extensible memoizing collections and decorators.</li> <li>structlog - Structured Logging for Python.</li> <li>JMESPath.py - Declaratively specify how to extract elements from a JSON document.</li> <li>PrettyErrors - Prettifies Python exception output to make it legible.</li> <li>Alibi Detect - Algorithms for outlier and adversarial instance detection, concept drift and metrics.</li> <li>Shellingham - Tool to Detect Surrounding Shell.</li> <li>Nested-Diff.py - Recursive diff for nested python structures.</li> <li>greenlet - Lightweight in-process concurrent programming.</li> <li>awesome-pattern-matching - Pattern Matching for Python 3.8+ in a simple, yet powerful, extensible manner.</li> <li>OSlash - Functors, Applicatives, And Monads in Python.</li> <li>nodevectors - Implements fast/scalable node embedding algorithms.</li> <li>libpysal - Python Spatial Analysis Library.</li> <li>pandera - Light-weight, flexible, and expressive pandas data validation library.</li> <li>Dynamics and Control - Python library for solving textbook control problems.</li> <li>Plumbum - Shell Combinators.</li> <li>Gradient Free Optimizers - Collection of modern optimization methods in Python. (HN)</li> <li>demandimport - Lazy import python modules for low start-up time.</li> <li>Array - Better Python List. (HN)</li> <li>miditoolkit - Python package for working with MIDI data.</li> <li>bidict - Bidirectional mapping library for Python.</li> <li>Time Series Distances - Library for time series distances (e.g. Dynamic Time Warping).</li> <li>pyamgx - Python interface to NVIDIA's AMGX library.</li> <li>Finite State Machine - Lightweight, decorator-based Python implementation of a Finite State Machine.</li> <li>Spatial Math - Create, manipulate and convert representations of position and orientation in 2D or 3D using Python.</li> <li>Fugue - Unified interface for distributed computing that lets users execute Python, pandas, and SQL code on Spark and Dask without rewrites. (Docs)</li> <li>PyMesh - Geometry Processing Library for Python.</li> <li>Spylls - Pure Python spell-checker.</li> <li>Ring - Python cache interface with clean API and built-in memcache &amp; redis + asyncio support.</li> <li>CSRGraphs - Fast and memory efficient library for large read-only graphs.</li> <li>python-soundfile - Audio library based on libsndfile, CFFI, and NumPy.</li> <li>Luigi - Build complex pipelines of batch jobs in Python.</li> <li>FuzzyWuzzy - Fuzzy String Matching in Python.</li> <li>msgpack-python - MessagePack serializer implementation for Python.</li> <li>Fastmap - Drop-in replacement for map that makes arbitrary Python code run faster locally and in the cloud. (Web)</li> <li>OrderedSet - Mutable data structure that is a hybrid of a list and a set.</li> <li>gusty - Making DAG construction easier.</li> <li>IceCream - Never use print() to debug again.</li> <li>furl - Small Python library that makes parsing and manipulating URLs easy.</li> <li>DiskCache - Python disk-backed cache (Django-compatible). Faster than Redis and Memcached. Pure-Python.</li> <li>hitherdither - Dithering algorithms for arbitrary palettes in PIL.</li> <li>cache.py - Python memoization across program runs.</li> <li>nfcpy - Python module to read/write NFC tags or communicate with another NFC device.</li> <li>Ryven - Flow-based visual scripting for Python. (Web)</li> <li>Timeflake - 128-bit, roughly-ordered, URL-safe UUID.</li> <li>PythonVerbalExpressions - Python regular expressions made easy.</li> <li>AnyIO - High level compatibility layer for multiple asynchronous event loop implementations on Python.</li> <li>PySyncObj - Library for replicating your python class between multiple servers, based on raft protocol.</li> <li>tractor - Structured concurrent, async-native \"actor model\" built on trio and multiprocessing.</li> <li>Synr - Library that provides a stable Abstract Syntax Tree for Python.</li> <li>Classical Aerodynamics with Python</li> <li>forced-alignment-tools - Collection of links and notes on forced alignment tools.</li> <li>psutil - Cross-platform lib for process and system monitoring in Python.</li> <li>cattrs - Complex custom class converters for attrs.</li> <li>pdoc - Auto-generate API documentation for Python projects.</li> <li>arq - Fast job queuing and RPC in python with asyncio and redis.</li> <li>Import Linter - Allows you to define and enforce rules for the internal and external imports within your Python project.</li> <li>dacite - Simple creation of data classes from dictionaries.</li> <li>DataPrep - Lets you prepare your data using a single library with a few lines of code. (Web)</li> <li>Reloadr - Hot code reloading tool for Python.</li> <li>SimFin - Simple financial data for Python. (Web)</li> <li>pyment - Format and convert Python docstrings and generates patches.</li> <li>squema - Smarter data structures.</li> <li>traces - Python library for unevenly-spaced time series analysis.</li> <li>Succinct - Compact, and compressed data structures for data-intensive applications.</li> <li>Shared Memory Dict</li> <li>Arrow - Better dates &amp; times for Python. (HN)</li> <li>Distex - Distributed process pool for Python.</li> <li>nest_asyncio - Patch asyncio to allow nested event loops.</li> <li>eventkit - Event-driven data pipelines.</li> <li>pystatsd - Python client for statsd.</li> <li>AIOFile - Real asynchronous file operations with asyncio support.</li> <li>Langcodes - Python library for working with and comparing language codes.</li> <li>Python Control Systems - Python module that implements basic operations for analysis and design of feedback control systems.</li> <li>cysimdjson - Fast JSON parsing library for Python.</li> <li>QP Solvers for Python - Quadratic Programming solvers in Python with a unified API.</li> <li>talon - Mailgun library to extract message quotations and signatures.</li> <li>MatchPy - Library for pattern matching on symbolic expressions in Python.</li> <li>DPPy - Sampling Determinantal Point Processes with Python.</li> <li>python devtools - Dev tools for python.</li> <li>aiomultiprocess - Take a modern Python codebase to the next level of performance.</li> <li>xarray-dataclasses - xarray extension for typed DataArray and Dataset creation.</li> <li>printstack - Python package that adds stack trace links to the print function. (HN)</li> <li>DataFusion in Python - Python library that binds to Apache Arrow in-memory query engine DataFusion.</li> <li>Cerberus - Lightweight and extensible data validation library for Python.</li> <li>funcX - High Performance Function Serving for Science. (Web)</li> <li>Clumper - Small python library that can clump lists of data together.</li> <li>Opyrator - Turns your machine learning code into microservices with web API, interactive GUI, and more.</li> <li>Tenacity - Retrying library for Python.</li> <li>Klepto - Persistent caching to memory, disk, or database.</li> <li>Python MSS - Ultra fast cross-platform multiple screenshots module in pure Python using ctypes.</li> <li>rtoml - Better TOML library for python implemented in rust.</li> <li>cache_decorator - Simple decorator to cache the results of computationally heavy functions.</li> <li>Event Sourcing in Python</li> <li>Optimesh - Several mesh smoothing/optimization methods with one simple interface.</li> <li>pyeasyga - Simple and easy-to-use implementation of a Genetic Algorithm library in Python.</li> <li>mimic - Abusing Unicode to create tragedy.</li> <li>zxpy - Shell scripts made simple.</li> <li>polliwog - 2D and 3D computational geometry library which scales from prototyping to production.</li> <li>vg - Linear algebra for humans.</li> <li>soundata - Python library for loading &amp; working with sound datasets.</li> <li>QuickPotato - Profile and test to gain insights into the performance of your beautiful Python code.</li> <li>APScheduler - Task scheduling library for Python.</li> <li>cbor2 - Pure Python CBOR (de)serializer with extensive tag support.</li> <li>Entangle - Lightweight (serverless) native python parallel processing framework based on simple decorators and call graphs.</li> <li>TypeGuard - Run-time type checker for Python.</li> <li>Greykite - Flexible, intuitive and fast forecasting library.</li> <li>plydata - Grammar for data manipulation in Python.</li> <li>memoize - Caching library for asynchronous Python applications.</li> <li>Aesara - Python library that allows one to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays.</li> <li>ballet - Lightweight framework for collaborative, open-source data science projects through feature engineering.</li> <li>python-varname - Dark magics about variable names in python.</li> <li>pytransform3d - Python library for transformations in three dimensions.</li> <li>Jellyfish - Python library for doing approximate and phonetic matching of strings.</li> <li>CAC - Clustering Based Classification Algorithm.</li> <li>Lhotse - Python library aiming to make speech and audio data preparation flexible and accessible to a wider community.</li> <li>scikit-network - Python package for the analysis of large graphs.</li> <li>dynaconf - Configuration Management for Python. (Docs)</li> <li>Shillelagh - Making it easy to query APIs via SQL.</li> <li>Chemics - Python package for chemical reactor engineering.</li> <li>Mesa - Agent-based modeling framework in Python. (Docs)</li> <li>Borb - Library for creating and manipulating PDF files in python. (Web) (HN)</li> <li>Patsy - Describing statistical models in Python using symbolic formulas.</li> <li>Twisted - Event-driven networking engine written in Python.</li> <li>ASPIRE - Algorithms for Single Particle Reconstruction.</li> <li>ulid - Universally Unique Lexicographically Sortable Identifier (ULID) in Python 3.</li> <li>Bplustree - On-disk B+tree for Python 3.</li> <li>Hyperlink - Immutable, Pythonic, correct URLs.</li> <li>Paranoid Scientist - Runtime software verification and automated testing for scientific software in Python.</li> <li>xarray - N-D labeled arrays and datasets.</li> <li>pmdarima - Statistical library designed to fill the void in Python's time series analysis capabilities.</li> <li>perfplot - Performance analysis for Python.</li> <li>Bolt - Algorithm for compressing vectors of real-valued data and running mathematical operations directly on the compressed representations. (HN)</li> <li>MPIRE - Python package for easy multiprocessing, but faster than multiprocessing.</li> <li>Pint - Operate and manipulate physical quantities in Python. (Docs) (HN)</li> <li>Audiomentations - Python library for audio data augmentation.</li> <li>executing - Get information about what a Python frame is currently doing, particularly the AST node being executed.</li> <li>ETNA - Easy-to-use time series forecasting framework.</li> <li>Pedalboard - Spotify\u2019s Audio Effects Library for Python. (Article) (HN)</li> <li>Pypandoc - Provides a thin wrapper for pandoc, a universal document converter.</li> <li>Darts - Python library for easy manipulation and forecasting of time series.</li> <li>goto - Function decorator that rewrites the bytecode to enable goto in Python. (HN)</li> <li>Dora - Experiment management framework. It expresses grid searches as pure python files.</li> <li>Dependency Injector - Dependency injection framework for Python.</li> <li>word_cloud - Little word cloud generator in Python.</li> <li>PyCLA - Python Package for Portfolio Optimization using the Critical Line Algorithm.</li> <li>ArviZ - Exploratory analysis of Bayesian models with Python.</li> <li>Scikit-TDA - Topological Data Analysis for Python.</li> <li>petl - Python Extract Transform and Load Tables of Data.</li> <li>Numcodecs - Python package providing buffer compression and transformation codecs for use in data storage and communication applications.</li> <li>simplejson - Simple, fast, extensible JSON encoder/decoder for Python.</li> <li>Lightbus - RPC &amp; event framework for Python 3. (Docs)</li> <li>python-utils - Disorganized collection of useful functions for working with audio and images, especially in the context of machine learning.</li> <li>Runtype - Utilities for run-time type validation and multiple dispatch.</li> <li>YData Quality - Data Quality assessment with one line of code.</li> <li>Emukit - Highly adaptable Python toolkit for enriching decision making under uncertainty.</li> <li>PyContracts - Python package that allows to declare constraints on function parameters and return values.</li> <li>tsfresh - Automatic extraction of relevant features from time series.</li> <li>PyPermut - Python package for permutation tests, for statistics and machine learning.</li> <li>tabmat - Efficient matrix representations for working with tabular data.</li> <li>glum - High performance Python GLMs with all the features.</li> <li>fnn - Embed strange attractors using a regularizer for autoencoders.</li> <li>cloudpickle - Extended pickling support for Python objects.</li> <li>charset_normalizer - Helps you read text from an unknown charset encoding.</li> <li>timemachines - Continuously evaluated, functional, incremental, time-series forecasting.</li> <li>immutables - High-performance immutable mapping type for Python.</li> <li>pydicom - Read, modify and write DICOM files with python code.</li> <li>Hamilton - Micro-framework to create dataframes from functions.</li> <li>python-dbus-next - Next great DBus library for Python.</li> <li>keyring - Provides an easy way to access the system keyring service from python. Can be used in any application that needs safe password storage.</li> <li>Desktop Notifier - Python library for cross-platform desktop notifications.</li> <li>Pyro 5 - Python remote objects for modern python versions.</li> <li>PyNNDescent - Python nearest neighbor descent for approximate nearest neighbors.</li> <li>Boxes.py - Laser cutting boxes and more.</li> <li>Sklearn-pandas - Provides a bridge between Scikit-Learn's machine learning methods and pandas-style Data Frames.</li> <li>Mau - Lightweight markup language heavily inspired by AsciiDoc, Asciidoctor and Markdown.</li> <li>Formulaic - High-performance implementation of Wilkinson formulas for Python.</li> <li>spec_classes - Simple way to incrementally build type-checked specifications.</li> <li>Mensor - Graph-based computation engine for computing measures and metrics.</li> <li>dirty_cat - Encoding methods for dirty categorical variables. (Docs)</li> <li>XState Python</li> <li>construct-typing - Extension of the python package construct, which is a powerful declarative and symmetrical parser and builder for binary data.</li> <li>pyembc - Declarative library for for describing embedded C data types in python.</li> <li>backoff - Python library providing function decorators for configurable backoff and retry.</li> <li>stringparser - Easy to use pattern matching and information extraction for Python.</li> <li>pickle - Python object serialization.</li> <li>zlib - Compression compatible with gzip.</li> <li>Pyappcache - Library for application-level caching.</li> <li>redun - Expressive and efficient workflow framework.</li> <li>retworkx - High performance Python graph library implemented in Rust.</li> <li>ahocorasick_rs - Check for multiple patterns in a single string at the same time: a fast Aho-Corasick algorithm for Python.</li> <li>Eliot - Logging that tells you why it happened.</li> <li>Crochet - Use Twisted anywhere.</li> <li>pytimeparse - Small Python module to parse various kinds of time expressions.</li> <li>pandas-selectable - Adds a select accessor to pandas DataFrames and Series.</li> <li>TheFuzz - Fuzzy String Matching in Python.</li> <li>portion - Python library providing data structure and operations for intervals.</li> <li>TextDescriptives - Python library for calculating a large variety of statistics from text.</li> <li>ijson - Iterative JSON parser with Pythonic interfaces.</li> <li>Rusty results - Rust-inspired Option and Result types. Pattern matching ready.</li> <li>Astroid - Common base representation of python source code for pylint and other projects.</li> <li>Babel - Python library that provides an integrated collection of utilities that assist with internationalizing and localizing Python applications.</li> <li>snoop - Powerful set of Python debugging tools, based on PySnooper.</li> <li>Acoular - Library for acoustic beamforming.</li> <li>whey - Simple Python wheel builder for simple projects.</li> <li>zeus - Python implementation of the Ensemble Slice Sampling method.</li> <li>PyTraits - Traits for Python3. (HN)</li> <li>Transforms3d - 3 dimensional spatial transformations.</li> <li>dill - Extends python's pickle module for serializing and de-serializing python objects to the majority of the built-in python types.</li> <li>mashumaro - Fast and well tested serialization framework on top of dataclasses.</li> <li>msgspec - Fast and friendly MessagePack library for Python. (Docs)</li> <li>Cashews - Cache with async power.</li> <li>Injector - Python dependency injection framework, inspired by Guice.</li> <li>jMetalPy - Framework for single/multi-objective optimization with metaheuristics.</li> <li>Pygal - Dynamic SVG charting library written in python.</li> <li>json2html - Python module to convert JSON into a human readable HTML Table representation.</li> <li>parse - Parse strings using a specification based on the Python format() syntax.</li> <li>Pyserini - Python toolkit for reproducible information retrieval research with sparse and dense representations.</li> <li>Compai - Functional primitives for Python.</li> <li>mpi4jax - Zero-copy MPI communication of JAX arrays, for turbo-charged HPC applications in Python.</li> <li>Plum - Multiple Dispatch in Python.</li> <li>SceneGraphParser - Python toolkit for parsing sentences (in natural language) into scene graphs (as symbolic representation) based on the dependency parsing.</li> <li>python-json-patch - Applying JSON Patches in Python.</li> <li>Gin Config - Lightweight configuration framework for Python.</li> <li>scikit-lego - Extra blocks for scikit-learn pipelines.</li> <li>nanopq - Pure python implementation of product quantization for nearest neighbor search.</li> <li>Rank-BM25 - Collection of algorithms for querying a set of documents and returning the ones most relevant to the query.</li> <li>PyTables - Hierarchical datasets in Python.</li> <li>PyTerrier - Python framework for performing information retrieval experiments.</li> <li>Python-Multipart - Streaming multipart parser for Python.</li> <li>PyHamcrest - Framework for writing matcher objects, allowing you to declaratively define \"match\" rules.</li> <li>tqdm - Fast, Extensible Progress Bar for Python and CLI. (Docs) (HN)</li> <li>ItsDangerous - Safely pass trusted data to untrusted environments and back. (Docs) (HN)</li> <li>Pandaral\u00b7lel - Simple and efficient tool to parallelize Pandas operations on all available CPUs.</li> <li>dataklasses - Library that allows you to quickly define data classes using Python type hints. (Annotated explanation) (HN)</li> <li>anndata - Python package for handling annotated data matrices in memory and on disk, positioned between pandas and xarray.</li> <li>Fiber - Python decorator that enables arbitrarily-deep tail/non-tail recursion. (HN)</li> <li>Rikai - Parquet-based ML data format optimized for working with unstructured data.</li> <li>Recurrent - Natural language parsing of dates and recurring events.</li> <li>Simsity - Super Simple Similarities Service.</li> <li>Implements - Pythonic interfaces using decorators.</li> <li>Pipe - Enabling a sh like infix syntax (using pipes).</li> <li>stackprinter - Debugging-friendly exceptions for Python.</li> <li>outputformater - Python library to decorate and beautify strings.</li> <li>PyFunctional - Python library for creating data pipelines with chain functional programming. (Docs)</li> <li>Typical - Fast, simple, &amp; correct data-validation using Python 3 typing.</li> <li>contextfilter - Easy contextual information logging filter, using ContextVars.</li> <li>hydra-zen - Configurable, reproducible, and scalable workflows in Python, via Hydra.</li> <li>perde - Python serialization framework powered by Rust.</li> <li>climatecontrol - Python library for loading settings and config data from files and environment variables.</li> <li>typingx - Extend typing package functionalities.</li> <li>di - Pythonic dependency injection.</li> <li>TypeSystem - Data validation, serialization, deserialization &amp; form rendering.</li> <li>atomics - Lock-Free Atomics in Python.</li> <li>sketchbook - Template engine built for asyncio with async/await syntax support.</li> <li>quickmunge - Some utilities for manipulating lines of text, numbers, JSON, bencode, and HTML fragments. Intended for use in shell pipes.</li> <li>Iguanas - Fast, flexible and modular Python package for generating a Rules-Based System (RBS) for binary classification use cases.</li> <li>py-filelock - Platform-independent file lock for Python.</li> <li>pytypes - Typing-toolbox for Python 3.</li> <li>pipes - Elixir\u2013style pipes for Python.</li> <li>Lunr.py - Python implementation of Lunr.js.</li> <li>Asyncer - Asyncer, async and await, focused on developer experience. (Lobsters)</li> <li>MeiliSearch Python Async - Async Python client for the MeiliSearch API.</li> <li>Everett - Configuration library for python projects.</li> <li>mpi4py - Python bindings for MPI.</li> <li>DocArray - Library for nested, unstructured data such as text, image, audio, video, 3D mesh.</li> <li>Astro - Your new Airflow DAG writing experience.</li> <li>py-import-tree - Analyze the classes, functions, and the imports they use.</li> <li>GenMotion - Python library for making skeletal animations.</li> <li>celluloid - Matplotlib animations made easy.</li> <li>python-asynchronous-tasks - Asynchronous tasks in Python with Celery + RabbitMQ + Redis.</li> <li>CircuitBreaker - Python \"Circuit Breaker\" implementation.</li> <li>squarify - Pure Python implementation of the squarify treemap layout algorithm.</li> <li>bitarray - Efficient arrays of booleans.</li> <li>cached-property - Decorator for caching properties in classes.</li> <li>PyJulia - Python interface to Julia.</li> <li>pyhash - Python Non-cryptographic Hash Library.</li> <li>trycast - Parses JSON-like values whose shape is defined by TypedDicts and other standard Python type hints.</li> <li>Pyasmtools - Explores the python bytecode, provides some tools to access it.</li> <li>Pyrallis - Simple Configuration with Dataclasses.</li> <li>retrie - Efficient Trie-based regex unions for blacklist/whitelist filtering and one-pass mapping-based string replacing.</li> <li>PyHeck - Case conversion library (for converting strings to snake_case, camelCase etc). Thin wrapper around the Rust library heck.</li> <li>PipelineDP - Python framework for applying differentially private aggregations to large datasets using batch processing systems such as Apache Spark, Apache Beam, and more.</li> <li>Pooch - Friend to fetch your data files.</li> <li>Panflute - Pythonic Pandoc Filters.</li> <li>Visions - User defined data type systems. (HN)</li> <li>Loky - Reusable Process Pool Executor.</li> <li>python-tabulate - Pretty-print tabular data in Python, a library and a command-line utility.</li> <li>Pebble - Provides a neat API to manage threads and processes within an application.</li> <li>unsync - Unsynchronize asyncio by using an ambient event loop, or executing in separate threads or processes.</li> <li>quickadd - Natural language date &amp; time parser written in python.</li> <li>madbg - Fully-featured remote debugger for python.</li> <li>Class Resolver - Lookup classes and instantiate them with style.</li> <li>Notifiers - Easy way to send notifications.</li> <li>Crowd-Kit - Computational Quality Control for Crowdsourcing.</li> <li>sPyRMSD - Symmetry-corrected RMSD in Python.</li> <li>Bleak - Bluetooth Low Energy platform Agnostic Client for Python.</li> <li>Plost - Deceptively simple plotting library for Streamlit. (HN)</li> <li>pandocfilters - Python module for writing pandoc filters.</li> <li>watermark - IPython magic extension for printing date and time stamps, version numbers, and hardware information.</li> <li>intervaltree - Mutable, self-balancing interval tree. Queries may be by point, by range overlap, or by range containment.</li> <li>griffe - Signatures for entire Python programs.</li> <li>ZIO-py - ZIO for Python.</li> <li>Python TSP Solver - Simple library to solve Traveling Salesperson Problems with pure Python code.</li> <li>pyserde - Serialization library on top of dataclasses, inspired by serde-rs.</li> <li>aioapns - Library designed specifically for sending push-notifications to iOS devices via Apple Push Notification Service.</li> <li>shortuuid - Generator library for concise, unambiguous and URL-safe UUIDs.</li> <li>ThatLib - Faster pathlib for Python.</li> <li>pyvirtualcam - Send frames to a virtual camera from Python.</li> <li>decorator - Decorators for Humans.</li> <li>jsonrpcclient - Generate JSON-RPC requests and parse responses in Python.</li> <li>Python Asyncio Extensions - High performance functions to work with the async IO.</li> <li>humanize - Python humanize functions.</li> <li>OpenTelemetry Python - Observability framework for cloud-native software.</li> <li>AwesomeVersion - One version package to rule them all, One version package to find them, One version package to bring them all, and in the darkness bind them.</li> <li>Deepparse - State-of-the-art library for parsing multinational street addresses using deep learning.</li> <li>Panther - High performance python technical analysis library written in Rust and the Numpy C API.</li> <li>Parsimonious - Fastest arbitrary-lookahead parser written in pure Python.</li> <li>PyMatting - Python Library for Alpha Matting.</li> <li>better-partial - Better partial function application in Python. (HN)</li> <li>Parselmouth - Praat in Python, the Pythonic way.</li> <li>imageio - Python library for reading and writing image data.</li> <li>Fractional Indexing - Fractional indexing is a technique to create an ordering that can be used for Realtime Editing of Ordered Sequences.</li> <li>PyEMD - Python implementation of Empirical Mode Decompoisition (EMD) method.</li> <li>dirty-equals - Doing dirty (but extremely useful) things with equals.</li> <li>overrides - Decorator to automatically detect mismatch when overriding a method.</li> <li>Cachy - Simple yet effective caching library.</li> <li>matplotx - Some useful extensions for Matplotlib.</li> <li>drawSvg - Python 3 library for programmatically generating SVG images (vector drawings) and rendering them or displaying them in a Jupyter notebook.</li> <li>PandasSchema - Validation library for Pandas data frames using user-friendly schemas.</li> <li>pyntcloud - Python library for working with 3D point clouds.</li> <li>TNT - Simple tools for logging and visualizing, loading and training.</li> <li>pyfzf - Python wrapper for fzf.</li> <li>Fountain - 2-dimensional physics engine written in Cairo.</li> <li>Truststore - Verify certificates using OS trust stores.</li> <li>notify-send - Displays a notification suitable for the platform being run on.</li> <li>bytecode - Python module to generate and modify bytecode.</li> <li>dateutil - Useful extensions to the standard Python datetime features.</li> <li>Nurse - Thoughtful dependency injection framework.</li> <li>pangres - SQL upsert using pandas DataFrames for PostgreSQL, SQlite and MySQL with extra features.</li> <li>Automata - Python library for simulating finite automata, pushdown automata, and Turing machines.</li> <li>Visual Automata - Python 3 library built as a wrapper for the Automata library to add more visualization features.</li> <li>UltraDict - Sychronized, streaming Python dictionary that uses shared memory as a backend.</li> <li>Lasier - Sync/async circuit breaker implementation in Python.</li> <li>Tomli - TOML parser.</li> <li>skimpy - Light weight tool for creating summary statistics from dataframes.</li> <li>NoPdb - Non-interactive Python Debugger.</li> <li>Panel - High-level app and dashboarding solution for Python.</li> <li>wasabi - Lightweight console printing and formatting toolkit.</li> <li>pointers.py - Pointers and Memory Management in Python. (HN)</li> <li>transitions - Lightweight, object-oriented finite state machine implementation in Python with many extensions.</li> <li>nrt - Python package for near real time detection of change in spatio-temporal datasets.</li> <li>kLoop - Asyncio event loop using Linux io_uring and kTLS.</li> <li>Tributary - Streaming reactive and dataflow graphs in Python.</li> <li>Atomos - Atomic primitives for Python. (Docs)</li> <li>Jinja - Very fast and expressive template engine.</li> <li>watchfiles - Simple, modern and high performance file watching and code reload in python.</li> <li>Xeger - Library to generate random strings from regular expressions.</li> <li>Affine - Matrices describing affine transformation of the plane.</li> <li>Traits - Observable typed attributes for Python classes.</li> <li>clean-text - Python package for text cleaning.</li> <li>GetPy - Vectorized Python Dict/Set.</li> <li>H3-Pandas - Integration of H3 with GeoPandas and Pandas.</li> <li>Rainbow - Makes Unicorn traces. Generic Side-Channel and Fault Injection simulator.</li> <li>pySerialTransfer - Python package to transfer data in a fast, reliable, and packetized form.</li> <li>PyExifTool - Python library to communicate with an instance of Phil Harvey's excellent ExifTool command-line application.</li> <li>Large Image - Python modules to work with large, multiresolution images.</li> <li>Distributed faiss - Library for building and serving multi-node distributed faiss indices.</li> <li>aiometer - Python concurrency scheduling library, compatible with asyncio and trio.</li> <li>tune-sklearn - Drop-in replacement for Scikit-Learn\u2019s model selection module (GridSearchCV, RandomizedSearchCV) with cutting edge hyperparameter tuning techniques.</li> <li>python-dotenv - Get and set values in your .env file in local and production servers.</li> <li>PILKit - Utilities and processors built for, and on top of PIL.</li> <li>Instakit - Image processors and filters for use with ImageKit.</li> <li>async-stripe - Asynchronous wrapper around Stripe's official python library.</li> <li>lox - Threading and multiprocessing made easy.</li> <li>pydags - Simple, lightweight, extensible DAG framework for Python with a Kubeflow-like API.</li> <li>spaudiopy - Spatial Audio Python Package.</li> <li>Arroyo - Python library for working with streaming data.</li> <li>PyGOD - Python Library for Graph Outlier Detection (Anomaly Detection).</li> <li>deczoo - Zoo for decorators.</li> <li>fingerprints - Make it easier to compare and cross-reference the names of companies and people by applying strong normalisation.</li> <li>DataFusion in Python</li> <li>PrettyTable - Display tabular data in a visually appealing ASCII table format.</li> <li>holpy - Implementation of higher-order logic in Python.</li> <li>Quart-Trio - Extension for Quart to support the Trio event loop.</li> <li>Smart Cache - Python caching library that is persistent and uses bytecode analysis to determine re-evaluation.</li> <li>Squirrel Core - Share, load, and transform data in a collaborative, flexible, and efficient way.</li> <li>pyzbar - Read one-dimensional barcodes and QR codes from Python.</li> <li>Odak - Scientific computing library for optics, computer graphics and visual perception.</li> <li>embedding_reader - Efficiently read embedding in streaming from any filesystem.</li> <li>Parsing - Implements an LR(1) parser generator, as well as the runtime support for using a generated parser, via the Lr and Glr parser drivers.</li> <li>Dictdiffer - Module that helps you to diff and patch dictionaries.</li> <li>Norbert - Painless Wiener filters for audio separation.</li> <li>titus-isolate - Enables the isolated and efficient use of compute resources in a multi-tenant container environment.</li> <li>MDAnalysis - Python library to analyze molecular dynamics simulations.</li> <li>wrapt - Python module for decorators, wrappers and monkey patching.</li> <li>FstStr - Small library providing a string-oriented Python interface to OpenFST.</li> <li>FElupe - Finite Element Analysis.</li> <li>Point Cloud Utils (pcu) - Python library for common tasks on 3D point clouds.</li> <li>pynput - Allows you to control and monitor input devices.</li> <li>Reloadium - Advanced hot reloading for Python. (Web) (HN)</li> <li>Multiformats - Python implementation of multiformat protocols.</li> <li>colorlog - Colored formatter for the python logging module.</li> <li>pydantic-core - Core validation logic for pydantic written in rust.</li> <li>Concepts - Formal Concept Analysis with Python.</li> <li>PecanPy - Fast, parallelized, memory efficient, and cache-optimized Python implementation of node2vec.</li> <li>Phantom types - Help you make illegal states unrepresentable and avoid shotgun parsing by enabling you to practice \"Parse, don't validate\".</li> <li>Patito - Data modelling layer built on top of polars and pydantic.</li> <li>pyinspect - Find functions when you can't remember their name.</li> <li>fancylog - Fancier logging with python.</li> <li>Netgraph - Drawing utilities for publication quality plots of networks.</li> <li>Lithops - Python multi-cloud distributed computing framework.</li> <li>Barry - Fixed-memory serverless distributed N-dimensional array processing.</li> <li>CDB - Disk based Log Structured Hash Table Store. (Lobsters)</li> <li>lbst - Immutable Log-Balanced Search Tree.</li> <li>parsec.py - Universal Python parser combinator library inspired by Parsec library of Haskell.</li> <li>reparsec - Small parsec-like parser combinators library with semi-automatic error recovery.</li> <li>pydiagrams - Declarative drawing API in Python.</li> <li>ResolveLib - Resolve abstract dependencies into concrete ones.</li> <li>mmh3 - Python wrapper for MurmurHash (MurmurHash3), a set of fast and robust hash functions.</li> <li>Kymatio - Wavelet scattering transforms in Python with GPU acceleration.</li> <li>PrettyPrintTree - Python library to print trees.</li> <li>TypedDataFrame - Typed wrappers over pandas DataFrames with schema validation.</li> <li>timeseries-generator - Library to generate synthetic time series data by easy-to-use factors and generator.</li> <li>StrictYAML - Type-safe YAML parser and validator.</li> <li>gjson-py - Python package that provides a simple way to filter and extract data from JSON-like objects, using the GJSON syntax.</li> <li>thx - Simple, composable command runner for Python projects.</li> <li>m3u8 - Python m3u8 Parser for HTTP Live Streaming (HLS) Transmissions.</li> <li>aiocache - Asyncio cache manager for redis, memcached and memory.</li> <li>csvkit - Suite of utilities for converting to and working with CSV, the king of tabular file formats.</li> <li>Intake - Lightweight package for finding, investigating, loading and disseminating data.</li> <li>wikirepo - Python based Wikidata framework for easy dataframe extraction.</li> <li>tidypolars - Data frame library built on top of the blazingly fast polars library that gives access to methods and functions familiar to R tidyverse users.</li> <li>Markus - Python library for generating metrics.</li> <li>Orderbook - Fast L2/L3 orderbook data structure, in C, for Python.</li> <li>Flor - Bloom filter implementation in Python.</li> <li>QOI - Python wrapper around QOI (\"Quite OK Image\" image format).</li> <li>Proto Plus for Python - Beautiful, idiomatic protocol buffers in Python.</li> <li>Kuyruk - Simple task queue for Python.</li> <li>TreeValue - Tree-nested data structure.</li> <li>picologging - High-performance logging library for Python.</li> <li>Comma - Python CSV Library for Humans.</li> <li>numerizer - Python module to convert natural language numerics into ints and floats.</li> <li>compose - Classic compose, with all the Pythonic features.</li> <li>snake-egg - Python bindings for egg.</li> <li>Red Engine - Modern scheduling library for Python. (Docs) (HN)</li> <li>Pyslvs-UI - GUI-based (PyQt5) tool used to design 2D linkage mechanism.</li> <li>FlowKit - Intuitive Python toolkit for flow cytometry analysis and visualization, with full support for the GatingML 2.0 standard.</li> <li>Magniv - Python-decorator based job orchestration platform. Avoid responsibility handoffs by abstracting infra and DevOps.</li> <li>k-Medoids - Fast K-Medoids clustering in Python with FasterPAM.</li> <li>python-atomicwrites - Powerful Python library for atomic file writes.</li> <li>Simplemma - Simple multilingual lemmatizer for Python.</li> <li>Sparse - Sparse multi-dimensional arrays for the PyData ecosystem.</li> <li>PyCM - Multi-class confusion matrix library in Python.</li> <li>Pixie - Full-featured 2D graphics library for Python.</li> <li>pyTooling - Collection of arbitrary useful classes, decorators, meta-classes and exceptions.</li> <li>pyloudnorm - Flexible audio loudness meter in Python.</li> <li>datatree - Implementation of a tree-like hierarchical data structure for xarray.</li> <li>pint-xarray - Interface for using pint with xarray, providing convenience accessors.</li> <li>xgcm - General Circulation Model Postprocessing with xarray.</li> <li>addict - Python Dict that's better than heroin.</li> <li>Fast JSON schema - Fast JSON schema validator for Python.</li> <li>Nornir - Pluggable multi-threaded framework with inventory management to help operate collections of devices.</li> <li>MutatorMath - Python library for piecewise linear interpolation in multiple dimensions with multiple, arbitrarily placed, masters.</li> <li>Ubelt - Paths, Progress, Dicts, Downloads, Caching, Hashing.</li> <li>CyToolz - High performance utility functions for iterables, functions, and dictionaries.</li> <li>PyGeM - Python Geometrical Morphing.</li> <li>bdsim - Simulate dynamic systems expressed in block diagram form using Python.</li> <li>RDFLib - Python library for working with RDF, a simple yet powerful language for representing information.</li> <li>unzip-http - Extract individual files from .zip files over http without downloading the entire archive.</li> <li>ferret - Python package for benchmarking interpretability techniques.</li> <li>Etils - Collection of eclectic utils for python.</li> <li>Oxalis - Distributed async task/job queue, like Celery for asyncio world.</li> <li>Kink - Dependency injection container made for Python.</li> <li>Diffractsim - Diffraction simulator for exploring and visualizing physical optics.</li> <li>Laspy - Python library for reading, modifying and creating LAS LiDAR files.</li> <li>python-makefun - Dynamically create python functions with a proper signature.</li> <li>video2numpy - Optimized library for large-scale extraction of frames and audio from video.</li> <li>clip-video-encode - Easily compute clip embeddings from video frames.</li> <li>similaritymeasures - Quantify the difference between two arbitrary curves in space.</li> <li>annotated-types - Reusable constraint types to use with typing.Annotated.</li> <li>WakaQ - Distributed background task queue for Python backed by Redis, a super minimal Celery.</li> <li>Duct - Python library for running child processes.</li> <li>String Grouper - Super Fast String Matching in Python.</li> <li>HAX - Write compiled bytecode inline with pure Python.</li> <li>redframes - Python data manipulation library like dplyr. (Lobsters)</li> <li>Rocketry - Statement-based scheduling framework for Python. (HN)</li> <li>Fasteners - Cross-platform locks for threads and processes.</li> <li>CameraTransform - Python package which can be used to fit camera transformations and apply them to project points from the camera space to the world space and back.</li> <li>DataFusion in Python - Python library that binds to Apache Arrow in-memory query engine DataFusion.</li> <li>DeepForcedAligner - Create accurate text-audio alignments given a bunch of audio files and their transcription.</li> <li>fhir-py - Google's tools for working with FHIR data in Python.</li> <li>deptry - Command line utility to check for obsolete, missing and transitive dependencies in a Python project.</li> <li>Qdrant Client - Client library for the Qdrant vector search engine.</li> <li>Multimethod - Multiple argument dispatching.</li> <li>placeholder - Operator overloading for fast anonymous functions.</li> <li>Futured - Functional interface for concurrent futures, including asynchronous I/O.</li> <li>MMDA - Multimodal document analysis.</li> <li>PhyloDM - Efficient calculation of pairwise phylogenetic distance matrices.</li> <li>Spans - Pure Python implementation of PostgreSQL's range types.</li> <li>PyBluez - Allows Python code to access the host machine's Bluetooth resources.</li> <li>ASDF - Advanced Scientific Data Format. (HN)</li> <li>scheduler - Simple in-process python scheduler library with asyncio, threading and timezone support.</li> <li>python-daachorse - Fast implementation of the Aho-Corasick algorithm using the compact double-array data structure.</li> <li>Lenses - Python library that helps you to manipulate large data-structures without mutating them.</li> <li>pandas-stubs - Public type stubs for pandas.</li> <li>Puff - Batteries included \"deep stack\" for Python. Minimize the barrier between Python and Rust.</li> <li>AwesomeYaml - Utility library to help parsing, transforming and querying yaml-based configs.</li> <li>inflect - Correctly generate plurals, ordinals, indefinite articles; convert numbers to words.</li> <li>dank - Deterministic finite automata ranker.</li> <li>sparse_dot_topn - Python package to accelerate the sparse matrix multiplication and top-n similarity selection.</li> <li>dejavu - Audio fingerprinting and recognition in Python.</li> <li>SporTran - Code to estimate transport coefficients from the cepstral analysis of a (multi)variate current stationary time series.</li> <li>Pandas Flavor - Easy way to write your own flavor of Pandas.</li> <li>Koda Validate - Type safe, combinable validation for Python. (HN)</li> <li>PyDataset - Provides instant access to many datasets right from Python (in pandas DataFrame structure).</li> <li>STUMPY - Powerful and scalable Python library for modern time series analysis.</li> <li>aenum - Advanced Enumerations for Python.</li> <li>blist - List-like type with better asymptotic performance and similar performance on small lists.</li> <li>dbt-databend - Databend plugin for dbt (data build tool).</li> <li>filetype.py - Small, dependency-free, fast Python package to infer binary file types checking the magic numbers signature.</li> <li>Sonora - gRPC-Web implementation for Python.</li> <li>aiochan - CSP-style concurrency for Python.</li> <li>TLViz - Easy visualization and evaluation of matrix and tensor factorization models.</li> <li>MatCoupLy - Learning coupled matrix factorizations in Python.</li> <li>DynaPyt - Dynamic analysis framework for Python.</li> <li>Slice Map - Tiny package containing a dict-like data structure with numeric slices as keys.</li> <li>Discrete Optimization - Python library to ease the definition and re-use of discrete optimization problems and solvers.</li> <li>ducks - Indexes your Python objects for fast lookup by their attributes.</li> <li>bistring - Bidirectionally transformed strings.</li> <li>stqdm - Simplest way to handle a progress bar in streamlit app.</li> <li>mundipy - Python framework for spatial data manipulation.</li> <li>Slicerator - Lazy-loading, fancy-slicable iterable.</li> <li>jschon - Pythonic, extensible JSON Schema implementation.</li> <li>Taskiq - Asynchronous distributed task queue for python. (Docs)</li> <li>aspectlib - Aspect-oriented programming, monkey-patch and decorators library.</li> <li>zaml - Fast YAML 1.2 parsing library for Python 3. Written in Zig.</li> <li>Madmom - Python audio and music signal processing library.</li> <li>ormsgpack - Msgpack serialization/deserialization library for Python, written in Rust using PyO3 and rust-msgpack.</li> <li>FFX - Fast Function Extraction.</li> <li>StaticFrame - Immutable and grow-only Pandas-like DataFrames with a more explicit and consistent interface.</li> <li>langdetect - Port of Google's language-detection library to Python.</li> <li>PyAV - Pythonic bindings for FFmpeg's libraries.</li> <li>PEX - Library and tool for generating .pex (Python EXecutable) files.</li> <li>pretty_midi - Utility functions for handling MIDI data in a nice/intuitive way.</li> <li>matplotlib-pyodide - HTML5 backends for Matplotlib compatible with Pyodide.</li> <li>TrueCase - Language independent, statistical, language modeling based tool in Python that restores case information for text.</li> <li>Graph Force - Python library for embedding large graphs (Written in Rust). (HN)</li> <li>Femwell - Mode solver for photonic/electric waveguides based on scikit-fem.</li> <li>Random Graph Generator</li> <li>AutoFaiss - Automatically create Faiss knn indices with the most optimal similarity search parameters.</li> <li>Laplace - Laplace approximations for Deep Learning.</li> <li>PSYDAC - Python Library for isogeometric analysis.</li> <li>CommonRegex Improved - Faster and expanded implementation of common regular expressions library in Python.</li> <li>pixelhouse - Minimalist drawing library for making beautiful animations.</li> <li>MPyC - Multiparty Computation in Python.</li> <li>Dapr SDK for Python</li> <li>Subgrounds - Pythonic data access layer for applications querying data from The Graph Network.</li> <li>PyExcelerate - Accelerated Excel XLSX Writing Library for Python.</li> <li>Pyrsistent - Persistent/Immutable/Functional data structures for Python.</li> <li>bstruct - Simple and efficient binary (de)serialization using regular type annotations.</li> <li>dbt utils - Utility functions for dbt projects.</li> <li>UltraJSON - Ultra fast JSON decoder and encoder written in C with Python bindings.</li> <li>python-benedict - Dict subclass with keylist/keypath support, I/O shortcuts and many utilities.</li> <li>Matchering - Audio Matching and Mastering.</li> <li>python-magic - Python wrapper for libmagic.</li> <li>HiPart - Hierarchical divisive clustering algorithm execution, visualization and Interactive visualization.</li> <li>audio-offset-finder - Find the offset of an audio file within another audio file.</li> <li>fastplotlib - Fast plotting library built using the pygfx render engine utilizing Vulkan via WGPU.</li> <li>Jobflow - Library for writing computational workflows.</li> <li>SurfinPy - Thermodynamic Phase Diagram Generator.</li> <li>scikit-fem - Simple finite element assemblers.</li> <li>validators - Python data validation for Humans.</li> <li>Python State Machine - Intuitive and powerful state machine framework designed for a great developer experience.</li> <li>identify - File identification library for Python.</li> <li>py-factorgraph - Factor graphs and loopy belief propagation implemented in Python.</li> <li>SmartNoise SDK - Tools for Differential Privacy on Tabular Data.</li> <li>hffs - File system interface to Hub.</li> <li>ProgressiVis - Progressive Analytics and Visualization.</li> <li>pca - Python Package for Principal Component Analysis.</li> <li>cppimport - Import C++ directly from Python.</li> <li>Grandalf - Graph and drawing algorithms framework.</li> <li>chemcoord - Python module for manipulating cartesian and internal coordinates.</li> <li>bcpandas - High-level wrapper around BCP for high performance data transfers between pandas and SQL Server.</li> <li>routingpy - Python library to access all public routing, isochrones and matrix APIs in a consistent manner.</li> <li>rele - Easy to use Google Pub/Sub.</li> <li>tsflex - Flexible time series feature extraction &amp; processing.</li> <li>dyvider - Dynamic programming algorithms for exact linear clustering in networks.</li> <li>rBloom - Fast, simple and lightweight Bloom filter library for Python, fully implemented in Rust.</li> <li>beetrace - Trace your python process line by line with low overhead.</li> <li>OpenGraph - Python module to parse the Open Graph Protocol.</li> <li>icalendar - Internet Calendaring and Scheduling (iCalendar) for Python.</li> <li>path - Object-oriented file system path manipulation.</li> <li>Python Decouple - Strict separation of settings from code.</li> <li>Spherely - Python library for manipulation and analysis of geometric objects on the sphere.</li> <li>PySwarms - Research toolkit for particle swarm optimization in Python.</li> <li>maml - Python for Materials Machine Learning, Materials Descriptors, Machine Learning Force Fields, Deep Learning, etc.</li> <li>PyGlove - General-purpose library for Python object manipulation.</li> <li>RQ Scheduler - Lightweight library that adds job scheduling capabilities to RQ (Redis Queue).</li> <li>fuego - Interface for running code in the cloud.</li> <li>tantivy-py - Python bindings for Tantivy the full-text search engine library written in Rust.</li> <li>S3FS - S3 file system.</li> <li>Llama Hub - Library of data loaders for LLMs made by the community -- to be used with GPT Index and/or LangChain.</li> <li>lumos - Scalable accelerated optimal control.</li> <li>Param - Make your Python code clearer and more reliable by declaring Parameters.</li> <li>pybool_ir - Toolkit for domain-specific information retrieval experimentation.</li> <li>Logbook - Nice logging replacement.</li> <li>Funcy - Fancy and practical functional tools.</li> <li>Fickling - Decompiler, static analyzer, and bytecode rewriter for Python pickle object serializations.</li> <li>MakeELF - ELF reader-writer library for Python3.</li> <li>Sushi - Library that allows you to run functions from other languages without needing to translate the code.</li> <li>scikit-build-core - Next generation Python CMake adaptor and Python API for plugins.</li> <li>Pillow - Python Imaging Library.</li> <li>demcmc - Differential Emission Measure estimation using MCMC methods.</li> <li>insight - Metrics &amp; Monitoring of Datasets.</li> <li>pgvector-python</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#notes","title":"Notes","text":"<ul> <li>But Pandas clicked for me when I realized that Pandas methods output is usually either a pd.Series or a pd.DataFrame . Then, it's just a matter of integrating Pandas code with the wider Python ecosystem.</li> </ul>"},{"location":"notes/programming-languages/python/python-libraries/python-libraries/#links","title":"Links","text":"<ul> <li>PyPi - Repository of software for the Python programming language. (Code)</li> <li>Twine - Utilities for interacting with PyPI.</li> <li>staged-recipes - Place to submit conda recipes before they become fully fledged conda-forge feedstocks.</li> <li>All of the python 3.9 standard library - Organized and hyperlinked index to every module, function, and class in the Python standard library.</li> <li>pdocs - Simple program and library to auto generate API documentation for Python modules.</li> <li>wemake-python-package - Bleeding edge cookiecutter template to create new python packages.</li> <li>Dry-Python - Set of libraries for pluggable business logic components. (GitHub)</li> <li>PePy - PyPI Download Stats. (Code)</li> <li>pipdeptree - Command line utility to display dependency tree of the installed Python packages.</li> <li>pip - Python Package Installer. (Docs)</li> <li>Best of Python - Ranked list of awesome Python open-source libraries &amp; tools.</li> <li>Best of Web Development with Python - Ranked list of awesome python libraries for web development.</li> <li>Serverless Python Requirements - Serverless plugin to bundle Python packages.</li> <li>pydeps - Python module dependency visualization.</li> <li>pdoc - Auto-generate API documentation for Python projects. (Code) (HN)</li> <li>awesome-asgi - Curated list of awesome ASGI servers, frameworks, apps, libraries, and other resources.</li> <li>conda-press - Press conda packages into wheels.</li> <li>cibuildwheel - Build Python wheels for all the platforms on CI with minimal configuration.</li> <li>How to make an awesome Python package in 2021 (HN)</li> <li>PDM - Modern Python package manager with PEP 582 support. (Docs) (HN)</li> <li>Python Wheel Standard</li> <li>Python Packaging Authority (GitHub)</li> <li>Python Packages Project Generator</li> <li>The State of Python Packaging in 2021 (Lobsters)</li> <li>Python 3 Module of the Week - Articles written by Doug Hellmann to demonstrate how to use the modules of the Python 3 standard library.</li> <li>conda-devenv - Conda tool to work with multiple projects in development mode.</li> <li>luddite - Checks for out-of-date package versions.</li> <li>Awesome Scientific Computing - Useful resources for scientific computing and numerical analysis.</li> <li>Grayskull - Recipe generator for Conda.</li> <li>Cooperative Package Management for Python (2021) (HN)</li> <li>Mypyc - Compile type annotated Python to fast C extensions.</li> <li>Python Packages - Open source book about making Python packages. (Code)</li> <li>cookiecutter-pylibrary - Enhanced cookiecutter template for Python libraries.</li> <li>Writing Python Extensions in Assembly (2020) (HN)</li> <li>Pip vs Conda: an in-depth comparison of Python\u2019s two packaging systems (2021)</li> <li>packaging - Core utilities for Python packages. (Docs)</li> <li>virtualenv - Virtual Python Environment builder. (Docs)</li> <li>PyPI Data - Mostly up-to-date data about almost every package on PyPI.</li> <li>Python libraries to make your code readable, reliable and maintainable (2020)</li> <li>Pyflow - Installation and dependency system for Python.</li> <li>davos - Import packages in Python, even if they aren't installed.</li> <li>Speed up your Conda installs with Mamba (2021)</li> <li>pip-tools - Set of tools to keep your pinned Python dependencies fresh.</li> <li>devpi - PyPI server and packaging/testing/release tool.</li> <li>Python Semantic Release - Automatic semantic versioning for python projects.</li> <li>Blueprint/Boilerplate For Python Projects</li> <li>Customize Python dependency resolution with machine learning (2021)</li> <li>requirements-tools - Scripts for working with Python requirements, primarily in applications.</li> <li>Writing and publishing a Python module in Rust (2020) (HN)</li> <li>setuptools - Python Packaging.</li> <li>objprint - Library that can print Python objects in human readable format.</li> <li>Python array API standard - Common API for array and tensor Python libraries. (GitHub)</li> <li>Array API standard</li> <li>Top Python libraries of 2021 you should know about (Reddit)</li> <li>Ask HN: Good Python projects to read for modern Python? (2021)</li> <li>import attrs (2021)</li> <li>Nine Rules for Writing Python Extensions in Rust (2022) (Reddit)</li> <li>pip-audit - Audits Python environments and dependency trees for known vulnerabilities.</li> <li>Python Type Hints - How to Handle Optional Imports (2021) (HN)</li> <li>Problems with testing Python pre-releases and pip caching (2022)</li> <li>karlicoss's python template</li> <li>Semantic Python Overview - Overview of projects which are related both to python and semantic technologies (RDF, OWL, Reasoning, ...). (HN)</li> <li>usort - Safe, minimal import sorting for Python projects.</li> <li>blacken-docs - Run <code>black</code> on python code blocks in documentation files.</li> <li>Conda-Pack - Package conda environments for redistribution.</li> <li>conda-build - Commands and tools for building conda packages.</li> <li>absolufy-imports - Tool and pre-commit hook to automatically convert relative imports to absolute.</li> <li>lazydocs - Generate markdown API documentation for Google-style Python docstring.</li> <li>crossenv - Cross-compiling virtualenv for Python.</li> <li>Nitpick - Enforce the same settings on multiple projects.</li> <li>SSort - Tool for sorting top level statements in python files.</li> <li>bump2version - Version-bump your software with a single command.</li> <li>Faster Python calculations with Numba: 2 lines of code, 13\u00d7 speed-up (2022)</li> <li>uhashring - Consistent hashing in pure Python.</li> <li>pypistats - Command-line interface to PyPI Stats API to get download stats for Python packages.</li> <li>Python Project Setup \u2013 Virtual Environments and Package Management (2022)</li> <li>Python on Nix - Extensive collection of Python projects from PyPI, for Nix.</li> <li>Python template for nix flakes - Simple and straight-forward way to create python environments using PyPi in nix. (Reddit)</li> <li>Sphinx - Python Documentation Generator. (Code)</li> <li>Python Context Managers in 10 Minutes \u2014 using the \u2018with\u2019 keyword (2022)</li> <li>Sphinx, MyST, and Python Docs in 2022</li> <li>Quetz - Open-Source Server for Conda Packages.</li> <li>Python Packaging User Guide (Code)</li> <li>PyPI Cloud - S3-backed PyPI server implementation.</li> <li>A Gentle Introduction to Testing with PyTest</li> <li>flake8-comprehensions - flake8 plugin to help you write better list/set/dict comprehensions.</li> <li>Python Project Template - Low dependency and really simple to start project template for Python Projects.</li> <li>virtualenv-tools3 - Tools for dealing with virtualenvs for code deployments.</li> <li>Cookiecutter PyPackage - Cookiecutter template for a Python package.</li> <li>py-tiny-pkg - Tiny packaging example that only have a pyproject.toml w/setuptools.</li> <li>pycrunch-trace - Time Travel Debugging for Python.</li> <li>GenPy - AST for Python code generation, in Python.</li> <li>Python finally offloads some batteries (2022) (HN)</li> <li>MicroPython Samples</li> <li>filesystem_spec - Specification for pythonic filesystems.</li> <li>ranx - Blazing-Fast Python Library for Ranking Evaluation and Comparison.</li> <li>pyproject-fmt - Apply a consistent format to pyproject.toml files.</li> <li>seqeval - Python framework for sequence labeling evaluation(named-entity recognition, pos tagging, etc...).</li> <li>Pre-allocated lists in Python (2022) (HN)</li> <li>Python Package Template</li> <li>GDB dashboard - Modular visual interface for GDB in Python.</li> <li>Pallets Projects - Collection of Python web development libraries. (GitHub)</li> <li>Example application code for the python architecture book</li> <li>Python f-strings Are More Powerful Than You Might Think (2022)</li> <li>Py-Pkgs-Cookiecutter - Cookiecutter template for Python packages.</li> <li>pygrep-hooks - Collection of fast, cheap, regex based pre-commit hooks.</li> <li>atoti Project Template - Template from which atoti projects intending to go into production can start.</li> <li>package-stats - Download statistics for my PyPI packages.</li> <li>pypi-to-sqlite - Load data about Python packages from PyPI into SQLite.</li> <li>docstr-coverage - Docstring coverage analysis and rating for Python.</li> <li>Python f-string guide</li> <li>pylint_runner - Python module that recursively runs pylint on python files in current directory and any sub-directories.</li> <li>Generate Python extensions using Nim language (HN)</li> <li>conda-tree - Conda dependency tree helper.</li> <li>pycodestyle - Simple Python style checker in one Python file.</li> <li>autoflake8 - Removes unused imports and unused variables from Python code.</li> <li>\u00b5Pipenv - Lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry lock files or converting them to pip-tools compatible output.</li> <li>pypi-deps-db - Dependency database for python packages on pypi.</li> <li>pydocstyle - Static analysis tool for checking compliance with Python docstring conventions.</li> <li>Python\u2019s \u201cType Hints\u201d are a bit of a disappointment to me (2022) (HN)</li> <li>desugar - Unravelling Python's syntactic sugar source code.</li> <li>Slipcover - Near Zero-Overhead Python Code Coverage.</li> <li>Sourcepy - Source python scripts natively inside your shell.</li> <li>Caching slow functions in Python</li> <li>Cookiecutter Poetry - Cookiecutter template for poetry managed python projects.</li> <li>Hatch - Modern, extensible Python project management. (HN)</li> <li>cruft - Allows you to maintain all the necessary boilerplate for packaging and building projects separate from the code you intentionally write.</li> <li>sigstore-python - Codesigning tool for Python packages. (Article)</li> <li>Python Monorepo - Example of scaffolding and tooling for a Python based monorepo.</li> <li>typing_copilot - Helper for starting to type-hint large codebases with mypy.</li> <li>Dataclasses JSON - Easily serialize Data Classes to and from JSON.</li> <li>flake8-pie - Flake8 extension that implements misc. lints.</li> <li>Example pybind11 module built with a CMake-based build system</li> <li>Sphinx-Gallery - Sphinx extension that builds an HTML version of any Python script and puts it into an examples gallery.</li> <li>Speed up your Python using Rust</li> <li>Multiple assignment and tuple unpacking improve Python code readability (2018) (HN)</li> <li>Python documentation search (HN)</li> <li>JSON to Pydantic - Tool that lets you convert JSON objects into Pydantic models. (Code)</li> <li>Python Asyncio tips</li> <li>Boring Python: dependency management (2022) (Lobsters)</li> <li>mypy-protobuf - Generate mypy stub files from protobuf specs.</li> <li>Python Standard Library changes in recent years (HN)</li> <li>The unreasonable effectiveness of f-strings and re.verbose (2022) (HN)</li> <li>Writing Python modules in Zig</li> <li>Import Tracker - Python utility for tracking third party dependencies within a library. (HN)</li> <li>Pyroma - Rate your Python packages package friendliness.</li> <li>Pyan3 - Python module that performs static analysis of Python code to determine a call dependency graph between functions and methods.</li> <li>dumb-pypi - PyPI generator, backed entirely by static files.</li> <li>Bundling binary tools in Python wheels (2022) (HN)</li> <li>onepm - Picks the right Python package manager for you.</li> <li>Mapping the world of Python package management (2022) (HN)</li> <li>Logging in Python Like a Pro (HN)</li> <li>PyScaffold - Project generator for bootstrapping high-quality Python packages. (Code)</li> <li>unearth - Utility to fetch and download python packages.</li> <li>promypy - Progressive type annotation without regression.</li> <li>PoetryUp - Updates dependencies and bumps their version in both poetry.lock as well as in pyproject.toml file.</li> <li>Python for Scientists</li> <li>Python toolkits (2022)</li> <li>Freezing requirements with pip-tools (2022)</li> <li>How to create a Python package in 2022 (HN)</li> <li>PyPI Download Stats - Most downloaded PyPI packages.</li> <li>Emscripten forge - Build WASM / emscripten packages with conda/mamba/boa.</li> <li>Choose the Right Python Concurrency API</li> <li>How to Handle Large Datasets in Python (2022)</li> <li>Python F-Strings Number Formatting Cheat Sheet by BrianAllan (2022)</li> <li>Condax - Install and run applications packaged with conda in isolated environments.</li> <li>Poetry Plugin: Export - Poetry plugin to export the dependencies to various formats.</li> <li>py.wtf - Autogenerated reference docs for PyPI packages.</li> <li>Ask HN: Why is Python package management still a dumpster fire? (2022)</li> <li>huak - Python package manager written in Rust. The Cargo for Python.</li> <li>not-a-package-manager - Utilities to facilitate working with codebases that don't ascribe to normal package management paradigms, e.g. ML research code that can be cloned but not installed.</li> <li>Hatch-Fancy-PyPI-readme - Hatch metadata plugin for everyone who cares about the first impression of their project\u2019s PyPI landing page.</li> <li>Isolate - Managed isolated environments for Python.</li> <li>Python Type Hints: How to Gradually Add Types for Third Party Packages (2022)</li> <li>Python dependency management difficulty is an unhelpful meme (2022) (Lobsters)</li> <li>Musings on Python Type Hints (2022)</li> <li>How to set up Python in 2022</li> <li>nox-poetry - Use Poetry inside Nox sessions.</li> <li>conda-store - Serve identical conda environments in as many ways as possible to users and services.</li> <li>Devpy - Developer tool for scientific Python libraries.</li> <li>Typing Extensions - Backported and experimental type hints for Python.</li> <li>rustimport - Import Rust source files directly from Python.</li> <li>ABI compatibility in Python: How hard could it be? (2022)</li> <li>PyCAPI - Over 600 fast Python bindings to the CPython C API.</li> <li>optpy - Transpiler to generate a Rust file from a Python file.</li> <li>template.py - Create new Python template with Poetry, VSCode DevContainers setup.</li> <li>Rusty docs - Simple documentation generator for Python code.</li> <li>infer-types - CLI tool to automatically add type annotations into Python code.</li> <li>Dynamic versioning plugin for Poetry</li> <li>Jedi Language Server</li> <li>Python Magic Methods You Haven't Heard About (2022)</li> <li>Why I moved away from Poetry for Python (2022) (HN) (Lobsters)</li> <li>Boring Python: dependency management (2022)</li> <li>Bazel rules for creating Python virtual environments</li> <li>Five semesters of linear algebra and all I do is solve Python dependency problems - Tim Hopper (2022)</li> <li>The hand-picked selection of the best Python libraries and tools of 2022</li> <li>How we extended the River stats module with Rust using PyO3 (2022)</li> <li>mousebender - Produce/consume dependency lock files for Python.</li> <li>Classifying Python virtual environment workflows (2023) (Lobsters)</li> <li>Binary wheels for PyPy - PyPy binary wheels for some popular packages.</li> <li>Underappreciated challenges with Python packaging (Code) (HN)</li> <li>autotyping - Automatically adds types and inserts the right annotations.</li> <li>com2ann - Tool for translation type comments to type annotations in Python.</li> <li>How to improve Python packaging (2023) (HN) (Lobsters)</li> <li>Getting Started with Property-Based Testing in Python with Hypothesis and Pytest (2023)</li> <li>Thoughts on the Python packaging ecosystem (2023) (HN)</li> <li>Sample Python Extension in Zig</li> <li>Caching a lot of methods in Python (2023)</li> <li>Data Classification: Does Python still have a need for class without dataclass? (HN)</li> <li>One does not simply 'pip install' (2023) (HN)</li> <li>lazy_loader - Makes it easy to load subpackages and functions on demand.</li> <li>Awesome pyproject.toml</li> <li>Swift Python Cookiecutter - Python package template intended for low maintenance and quick package development.</li> <li>JSON Schema generate Python types - Tools to generate Python types based on TypedDict from a JSON schema.</li> <li>FawltyDeps - Dependency checker for Python. (Article)</li> <li>Pytest Tips and Tricks (2023) (HN)</li> <li>Setuptools plugin for Rust extensions</li> <li>Why not tell people to \u201csimply\u201d use pyenv, poetry or anaconda (2023) (HN)</li> <li>pydoctor - API documentation generator that works by static analysis.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/","title":"Zig libraries","text":"<p>Original content by: Nikita</p>"},{"location":"notes/programming-languages/zig/zig-libraries/#cli","title":"CLI","text":"<ul> <li>SimArgs - Simple, opinionated, struct-based argument parser in Zig.</li> <li>parg - Lightweight argument parser for Zig.</li> <li>zig-clap - Simple command line argument parsing library.</li> <li>Zig Argument Parser - Simple-to-use argument parser with struct-based config.</li> <li>mibu - Pure Zig library for low-level terminal manipulation.</li> <li>zig-cli - Simple package for building command line apps in Zig.</li> <li>zig-arg - clap-rs inspired arg parser library for zig that supports both subcommand, nested subcommand and flag.</li> <li>ansi-term - Zig library for dealing with ANSI terminals.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#web","title":"Web","text":"<ul> <li>h11 - HTTP/1.1 parser for Zig.</li> <li>Routez - HTTP server for Zig.</li> <li>Apple Pie - Basic HTTP server implementation in Zig.</li> <li>ZHP - HTTP server written in Zig.</li> <li>Zig Network - Small network abstraction layer around TCP &amp; UDP.</li> <li>zig-serve - Server implementations for several protocols in Zig. Includes http(s), gemini and gopher.</li> <li>rem - HTML parsing library, written in Zig.</li> <li>zfetch - HTTP request library for Zig with HTTPS support.</li> <li>HTTP - HTTP core types for Zig.</li> <li>Zelda - Simple HTTP client library for Zig.</li> <li>ziget - Zig library/tool to request network assets.</li> <li>Zap - Blazingly fast backends in zig.</li> <li>Kobold - Easy declarative web interfaces.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#db","title":"DB","text":"<ul> <li>OkRedis - Zero-allocation Client for Redis 6+.</li> <li>lmdb-zig - Lightweight, fully-featured, idiomatic cross-platform Zig bindings to Lightning Memory-Mapped Database (LMDB).</li> <li>zig-sqlite - Thin wrapper around SQLite's C API. (How I built zig-sqlite) (HN)</li> <li>zig-prometheus - Prometheus/VictoriaMetrics client library for Zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#crypto","title":"Crypto","text":"<ul> <li>charm - Zig version of the Charm crypto library.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#graphics","title":"Graphics","text":"<ul> <li>zgt - Zig GUI Toolkit.</li> <li>tvg - Tiny Vector Graphics.</li> <li>zig-cairo - Thin wrapper for the cairo 2D graphics library.</li> <li>ZGL - Zig OpenGL Bindings.</li> <li>brucelib - Monorepo of modules for programming cross-platform games, simulations, engines and editors.</li> <li>Phyz - 2D game physics for Zig.</li> <li>glTF parser - glTF 2.0 parser written in Zig, aiming to replace the use of some C/C++ libraries.</li> <li>GUI - Zig native GUI toolkit for whole applications or extra debugging windows in an existing application.</li> <li>ZIGCV - Zig bindings for OpenCV4.</li> <li>Zero Graphics - Minimal OpenGL ES 2.0 library for Zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#wasm","title":"WASM","text":"<ul> <li>zee_alloc - Tiny Zig allocator primarily targeting WebAssembly.</li> <li>wasmtime-zig - Zig embedding of Wasmtime.</li> <li>wasmer-zig - Zig bindings for the Wasmer WebAssembly runtime.</li> <li>zig-wasm3 - Zig bindings (and build system integration) for Wasm3.</li> <li>wasm4-zig-runtime</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#games","title":"Games","text":"<ul> <li>Cupcake - App framework for making small and delicious games.</li> <li>zig-flecs - Zig wrapper over fast entity component system library.</li> <li>jok - Minimal 2d/3d game framework.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#macos","title":"macOS","text":"<ul> <li>ZigKit - Native Zig bindings for low-level macOS frameworks.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#math","title":"Math","text":"<ul> <li>VecFns - Automatic Vector Math Functions In Zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#linux","title":"Linux","text":"<ul> <li>AsyncIOUring - Event loop in Zig using io_uring and coroutines.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#embedded","title":"Embedded","text":"<ul> <li>regz - Zig code generator for microcontrollers.</li> <li>MicroZig - Unified abstraction layer and HAL for several microcontrollers.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#test","title":"Test","text":"<ul> <li>Marble - Metamorphic testing library for Zig.</li> <li>proptest.zig - Property testing library for zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#ios","title":"iOS","text":"<ul> <li>Zig Deploy - Deploy your iOS apps written with Zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#other","title":"Other","text":"<ul> <li>Zig ECS</li> <li>Upaya - Zig-based framework for creating game tools and helper apps.</li> <li>zalgebra - Linear algebra library for games and computer graphics.</li> <li>zld - Zig's lld drop-in replacement.</li> <li>Mecha - Parser combinator library.</li> <li>Dida - Differential dataflow for mere mortals.</li> <li>zang - Audio synthesis.</li> <li>zig-protobuf - protobuf 3 implementation.</li> <li>zap - Asynchronous runtime with a focus on performance and resource efficiency.</li> <li>Zig itertools - Improved rewrite of the python itertools library to Zig.</li> <li>ziglyph - Unicode text processing.</li> <li>Zigstr - UTF-8 string type.</li> <li>Zig Interfaces - Dynamic dispatch for zig made easy.</li> <li>hyperia - Playground of Zig async code.</li> <li>zigimg - Create, process, read and write different image formats with Zig.</li> <li>simdjzon - Port of simdjson, a high performance JSON parser.</li> <li>zig-nodejs-example - Node.js Native Module written in Zig.</li> <li>sokol-zig - Auto-generated Zig bindings for the sokol headers.</li> <li>known-folders - Provides access to well-known folders across several operating systems.</li> <li>zig-graph - Directed graph data structure for Zig.</li> <li>ish - Sketches for Zig.</li> <li>zig-libgc - Implements a Zig allocator that uses the Boehm-Demers-Weiser conservative Garbage Collector (libgc, bdwgc, boehm-gc).</li> <li>Cosmic - Single binary tool for building graphical and cli apps in JavaScript/TS.</li> <li>zjson - Minimal JSON library with zero allocations.</li> <li>Zig Generator - Async generator type for Zig.</li> <li>ctregex.zig - Compile time regular expressions in zig.</li> <li>zoltan - Sol-inspired minimalist Lua binding for Zig. (Article)</li> <li>zzz - Simple and boring human readable data format for Zig.</li> <li>ctradix - Comptime radix tree in Zig.</li> <li>protozig - Complete implementation of protobuf in Zig.</li> <li>HeaderGen - Automatically generate headers/bindings for other languages from Zig code.</li> <li>zig-libgit2 - Zig bindings to libgit2.</li> <li>Adma - General purpose, multithreaded capable slab allocator for Zig.</li> <li>Getty - Serialization framework for Zig.</li> <li>json - Serialization library for JSON.</li> <li>Concepts - Compile-time validation of type constraints.</li> <li>hzzp - I/O agnostic HTTP/1.1 parser and encoder for Zig.</li> <li>zig-yaml - YAML parser for Zig.</li> <li>inon - Data serialization format in Zig.</li> <li>nats.zig - Zig Client for NATS.</li> <li>s2s - Zig binary serialization format and library.</li> <li>uuid6-zig - UUIDv6 implemented in Zig.</li> <li>zig-docker - Zig bindings for the Docker Engine API.</li> <li>zlog - Zero-allocation log library for Zig.</li> <li>mustache-zig - Logic-less templates for Zig.</li> <li>Cuckoo Filter - Production-ready Cuckoo Filters for any C ABI compatible target.</li> <li>Zort - Implementation of 13 sorting algorithms in Zig.</li> <li>audiometa - Audio metadata/tag reading library written in Zig.</li> <li>Metron - Zig library for writing micro-benchmarks.</li> <li>Vortex - Structured concurrency in Zig.</li> <li>any-pointer - Type erasure library for Zig.</li> <li>zig-deque - Double-ended queue implementation in Zig.</li> <li>Zig-TOML - TOML parser written in Zig.</li> <li>Zig-Validate - Type validation library for writing a zero-cost, declarative, understandable, generic code.</li> <li>Zig-LibreSSL - LibreSSL stream wrappers for Zig.</li> <li>zigmkv - Matroska/webm (mkv) parser in Zig.</li> <li>protobruh - Protobuf for Zig.</li> <li>ziguid - GUIDs for Zig.</li> <li>BYOL - Bring Your Own Loop -- A memory-efficient, straggler-avoiding, cache-friendly scheduler.</li> <li>zcirc - Dynamic circular buffer allocator for zig.</li> <li>poolalloc - Arena allocator with object re-use.</li> <li>zig-js - Access the JS host environment from Zig compiled to WebAssembly.</li> <li>zble - Bluetooth in Zig.</li> <li>Zorrow - Borrowchecker in Zig.</li> <li>pegzi - PEG (parsing expression grammar) parser in zig.</li> <li>Composable allocators</li> <li>zubench - Micro-benchmarking package for Zig.</li> <li>zasp - Streaming parser.</li> <li>zig-csv - Low-level CSV parser library for Zig.</li> <li>libpcre.zig - Zig bindings to libpcre.</li> <li>zigpb - Simple Protobuf encoder and decoder in Zig.</li> <li>Zig Tree Formattar - Colored tree-like formatter for Zig.</li> <li>libxev - Cross-platform event loop. libxev provides a unified event loop abstraction for non-blocking IO, timers, signals, events.</li> <li>funzig - Functional Zig features.</li> <li>protobuf-zig - Protocol buffers implementation in zig.</li> <li>coyote-ecs - Fast and simple zig native ECS.</li> <li>wave - Tiny WAV encoder/decoder for Zig.</li> <li>zig-diff - Text diffing in zig.</li> <li>Zig String - UTF-8 String Library.</li> <li>zig-wfc - Implementation of the wave function collapse algorithm in Zig.</li> <li>tres - ValueTree-based JSON parser.</li> <li>okra - Pseudo-random deterministic merkle tree built on LMDB.</li> <li>fastfilter - Binary fuse &amp; xor filters for Zig.</li> <li>zig-bench - Simple benchmarking lib in Zig.</li> </ul>"},{"location":"notes/programming-languages/zig/zig-libraries/#links","title":"Links","text":"<ul> <li>zigmod - Package manager for the Zig programming language.</li> <li>gyro - Zig package manager with an index, build runner, and build dependencies. (Web)</li> <li>zigpkgs - Collection of zig packages built with Nix.</li> <li>Aquila - Federated package index and CI system for Zig. (Web)</li> <li>Deps.zig - Dependency manager for Zig.</li> <li>Zig Package Repository - Community-maintained repository of zig packages. (Code)</li> <li>zig-build-repos - Enables build.zig files to depend on git repositories.</li> <li>Zig Async Demo - Comparing concurrent code example programs between other languages and Zig.</li> <li>Minimal Web Assembly example using Zig's build system (Web) (HN)</li> <li>ABI Zig \\&lt;&gt; TypeScript - Passing strings between Zig and TypeScript.</li> <li>What's the 'ziggy' way to pass a readable stream to a function? (2022)</li> <li>mach/wasmserve - Small web server specifically for serving Zig WASM applications in development.</li> <li>zig-fetch - Dependency management solution for zig projects.</li> </ul>"},{"location":"notes/programming-languages/zig/zig/","title":"Zig","text":"<p>Original content by: Nikita</p> <p>Ziglings is nice for learning.</p> <p>TigerBeetle &amp; Bun have great Zig code to study.</p> <p>This talk was great for tips on writing performant Zig code that minimizes allocations.</p>"},{"location":"notes/programming-languages/zig/zig/#oss-zig-gui-apps","title":"OSS Zig GUI apps","text":"<ul> <li>Pixi - Cross-platform open-source pixel art editor and animation editor.</li> </ul>"},{"location":"notes/programming-languages/zig/zig/#notes","title":"Notes","text":"<ul> <li>Zig compiler pipeline is: tokenize -&gt; parse -&gt; astgen -&gt; sema -&gt; codegen</li> <li>Automatic error unions, required error handling, errdefer, and the try keyword really give Zig my favorite error handling feel of any language.</li> <li>Types are values in zig, this means that to create generic functions you pass the type as an argument and change the function logic based on that. This is also possible thanks to another feature, running code at compile time with comptime.</li> <li>Zig has good \"surface area minimalism\". comptime is just one keyword, but it replaces the entire C preprocessor (well, mostly), a template/generics system, type reflection, and probably a few more things. Same with the build system: I don't need to learn a separate language to describe builds, instead the build system is (mostly) just a stdlib module. It's true that the Zig's error handling, tagged unions, slices, etc... are \"less minimalistic\" than C, but those things exist to fix obvious problems of C in a way that would be hard to do in libraries, and because of this they are justified.</li> <li>Most significant optimization that zig enables is stack backed allocators. Allocators being passed around in function calls, a third party library that allocates stuff doesn't have to know where the data is allocated. It's up to the client code to chose what allocator they provide, effectively allowing stack-only allocations, even in third-party code.</li> </ul>"},{"location":"notes/programming-languages/zig/zig/#links","title":"Links","text":"<ul> <li>Zig Learn (Code) (Code)</li> <li>The Road to Zig 1.0 - Andrew Kelley (2019)</li> <li>Pluto - Hobby x86 kernel written in Zig.</li> <li>Hobby x86 kernel written with Zig (HN)</li> <li>Zig Compiler Internals (2020)</li> <li>bootstrap-zig - Start with minimum system dependencies and end with a fully operational Zig compiler for any target.</li> <li>Zig 0.6.0 Release Notes (HN)</li> <li>PBUI Project - Standard library toolsets in the Zig programming language. (Code)</li> <li>A Brief Exploration of Zig (2020)</li> <li>zls - Zig LSP implementation + Zig Language Server.</li> <li>zls: A Zig Language Server - Alex Naskos &amp; Auguste Rame (2020)</li> <li>Why Zig When There is Already CPP, D, and Rust? (Lobsters)</li> <li>Zig: a great fit for emulators - Benjamin Feng (2020) (Lobsters)</li> <li>What is Zig's \u201cColorblind\u201d Async/Await? (2020) (Lobsters)</li> <li>Zig Showtime - Show where members of the Zig community share code and ideas.</li> <li>Announcing the Zig Software Foundation (2020) (HN)</li> <li>Zig Live Coding: Self-Hosted Incremental Compilation Debug Info + LLVM 11 Upgrade (2020)</li> <li>Awesome Zig</li> <li>Awesome Zig 2</li> <li>Zig Learning &amp; Usage Guide</li> <li>Interview with Zig language creator Andrew Kelley (2020) (HN)</li> <li>What is Zig's Comptime? (2019)</li> <li>Zig's New Relationship with LLVM (2020) (HN) (Lobsters)</li> <li>Zig Compiler September Update &amp; Hot Code Swapping Brainstorming (2020)</li> <li>Advanced Hello World in Zig - Loris Cro (2020)</li> <li>Zig heading toward a self-hosting compiler (2020)</li> <li>Assorted thoughts on zig (and rust) (2020) (Lobsters) (HN)</li> <li>Is Zig the Long Awaited C Replacement? (2020) (Lobsters)</li> <li>zigup - Download and manage zig compilers.</li> <li>Zig Spec</li> <li>Pirates of Apple Silicon - Jakub Konka, Frank Denis, Andrew Kelley (2020)</li> <li>Zig in 30 Minutes (HN)</li> <li>Extending C with Zig</li> <li>Why Zig when there is already C++, D, and Rust? (HN)</li> <li>Zig Makes Go Cross Compilation Just Work (2021) (Lobsters)</li> <li>Ziglings - Learn the Zig programming language by fixing tiny broken programs. (HN) (Stream doing Ziglings)</li> <li>Zig Docs</li> <li>Zig Roadmap 2021 (Lobsters)</li> <li>Why I rewrote my Rust keyboard firmware in Zig: consistency, mastery, and fun (2021) (Lobsters)</li> <li>Memory-mapped IO registers in zig (2021) (Lobsters)</li> <li>Zig, Parser Combinators - and Why They're Awesome (2021)</li> <li>How (memory) safe is Zig? (2022) (Lobsters) (HN) (HN) (Lobsters)</li> <li>Zig Playground - Online Zig compiler inspired by Go and Rust. (Code)</li> <li>zigdoc - zig -&gt; docs.</li> <li>zig.run - Run and play with Zig source code. (Code)</li> <li>An intro to Zig's integer casting for C programmers (HN)</li> <li>Performance Tracking for Zig</li> <li>Building an efficient and portable programming language with Zig (2021) (Lobsters)</li> <li>Zig Makes Rust Cross-compilation Just Work (2021) (HN) (Lobsters)</li> <li>setup-zig - Use the Zig compiler in your Github Actions workflows.</li> <li>Corecursive: Andrew Kelly Built Zig (2021) (Reddit) (HN)</li> <li>Zig wrinkles (2021) (Lobsters)</li> <li>Zig pathtracer (2021) (HN)</li> <li>Async engines in C++20, Rust, &amp; Zig (2021)</li> <li>Android Apps in Zig - Contains a example on how to create a minimal Android app in Zig.</li> <li>Looking into Odin and Zig (2021) (HN)</li> <li>Maintain It with Zig (2021) (HN) (Lobsters)</li> <li>ziglint - Linting suite for Zig.</li> <li>Resource efficient Thread Pools with Zig (2021) (HN)</li> <li>Zig News</li> <li>Code Coverage for Zig with Callgrind (2021)</li> <li>Fuzzing Zig Code Using AFL++ (2021) (HN)</li> <li>Building gamedev ecosystem for Zig</li> <li>Asserting function signatures at compile time in Zig (2021)</li> <li>Mach Engine: The Future of Graphics (With Zig) (2021) (HN) (Code)</li> <li>Andrew Kelley, Lead Developer &amp; President of the Zig Software Foundation (2021)</li> <li>zig-snapshots - Preview Zig's incremental linker state in interactive HTML.</li> <li>Zig LSP - LSP implemented in Zig.</li> <li>Perfecting GLFW for Zig, and finding lurking undefined behavior that went unnot (2021) (HN)</li> <li>Zig monthly - Once-a-month publication where I curate all things Zig.</li> <li>zig build explained (2021)</li> <li>A Practical Guide to Applying Data-Oriented Design - Andrew Kelley (2021) (Lobsters)</li> <li>The ZLD Linker (2021)</li> <li>Interfacing with Zig, a BDFL-run project (2021)</li> <li>Nix flake for Zig</li> <li>Zig Compiler Internals</li> <li>Allocgate: Restructuring how allocators work in Zig (2021) (HN)</li> <li>List of Zig Gamedev Projects</li> <li>Minimal build.zig for targeting iOS</li> <li>Zig 0.9.0 (HN)</li> <li>What do you think about Zig? (2021)</li> <li>A Review of the Zig Programming Language (Using Advent of Code 2021) (HN)</li> <li>A Comparison of Rust and Zig (HN)</li> <li>Analysis of the overhead of a minimal Zig program (2022) (Lobsters)</li> <li>Zig Strings in 5 minutes (Lobsters)</li> <li>Failing to Learn Zig via Advent of Code (2022) (HN) (Lobsters)</li> <li>Let's build an Entity Component System from scratch in Zig (2022)</li> <li>Using Zig to Build Native Lua Scripts (2022)</li> <li>Zig by Example (Code)</li> <li>Zig Compiler Internals (HN)</li> <li>Is Zig faster than Rust?</li> <li>Why use Zig over Rust/Go (2022)</li> <li>ziglibc - Exploration on creating a libc implementation in Zig.</li> <li>Using Zig as cross-platform C toolchain (2022) (HN)</li> <li>ZigSelf: An implementation of Self in Zig (Lobsters)</li> <li>zigtool - Go tool of the zig compiler automatically compiles different targets according to the GOOS GOARCH environment variable.</li> <li>Hot-code reloading on macOS/arm64 with Zig (2022) (HN)</li> <li>wazm - Web Assembly Zig Machine.</li> <li>Looking at Zig Programming Language (2022) (HN)</li> <li>I Believe Zig Has Function Colors (2022) (Lobsters) (HN)</li> <li>Zig Bit Twiddling Hacks</li> <li>Zig self-hosted compiler can now build itself (2022) (HN) (Lobsters)</li> <li>Zig interpreter written in TypeScript</li> <li>Zig Web Code</li> <li>Getting Started with Zig on the Raspberry Pi Pico</li> <li>Minimal example showing how HTML5's canvas, WASM memory and Zig can interact</li> <li>Uber Uses Zig (2022) (HN) (Lobsters)</li> <li>Zig PyPI distribution - Zig programming language, packaged for PyPI. Lets you run Zig code from Python easily. (Tweet)</li> <li>Mixins in Zig (HN)</li> <li>Learn Zig by examples (Code)</li> <li>Paid Zig Stream (2022)</li> <li>Testing Zig for embedded development (2022)</li> <li>An Intro to Zig's checkAllAllocationFailures (2022)</li> <li>Zig Common Tasks - Collection of Zig code snippets for some of the most common tasks.</li> <li>How to get started with Zig? (2022)</li> <li>Zig is becoming more production-worthy (2022)</li> <li>Zig Language Server (zls) for VSCode</li> <li>Some Thoughts on Zig (2022) (HN)</li> <li>Makin' wavs with Zig (2022) (Lobsters)</li> <li>Running Zig with WASI on Cloudflare Workers (2022) (HN)</li> <li>Self Hosted Compiler Upgrade Guide (Tweet)</li> <li>Packed structs in Zig make bit/flag sets trivial (2022) (HN) (Lobsters)</li> <li>A Practical Guide to Compile Time Evaluation - Alex Naskos (2022)</li> <li>Revisiting the design approach to Zig (2022) (HN)</li> <li>Zig, the Small Language (2022) (HN)</li> <li>Tree Sitter For Zig - Zig's Tree Sitter based on Zig Spec Official.</li> <li>Building a Tiny Mutex (2022)</li> <li>Virtual tables with zig-sqlite (2022)</li> <li>Nix Flake for Zig</li> <li>What Makes the Zig Programming Language Unique? (2022) (HN)</li> <li>Zig-style generics are not well-suited for most languages (2022) (Tweet) (HN) (Lobsters)</li> <li>List of Zig Gamedev Projects</li> <li>That Time I Tried Porting Zig to SerenityOS (2022) (Lobsters)</li> <li>Mach engine &amp; core examples</li> <li>Ziglibc: Sweeping out the rug from underneath C - Jonathan Marler (2022)</li> <li>Zig Is Self-Hosted Now, What's Next? (2022) (Lobsters) (HN)</li> <li>Zig's I/O and Concurrency Story - King Protty (2022)</li> <li>Distributed Zig with Elixir and Zigler - Riccardo Binetti (2022)</li> <li>A minimal RocksDB example with Zig (2022)</li> <li>Zig 0.10.0 Release Notes (HN) (Lobsters)</li> <li>Simple Scalable Unbounded Queue (2022)</li> <li>Easy Interfaces with Zig 0.10.0 (2022) (HN)</li> <li>Goodbye to the C++ Implementation of Zig (2022) (HN) (Lobsters)</li> <li>Using Zig for Advent of Code (2022)</li> <li>What I learn by implementing argparser in Zig (2022)</li> <li>Zig Aarch64 Disassembler</li> <li>zdb - Simple debugger in Zig for Zig.</li> <li>A Zig Diary (2023)</li> <li>Thoughts on Zig (2023)</li> <li>3 things you might like about Zig (2023)</li> <li>Why a linker author had to write a YAML parser in Zig (2022)</li> <li>Zig Meta Programming (2023)</li> <li>How a Zig IDE Could Work (2023) (HN)</li> <li>nix-zig-stdenv - Zig based cross-compiling toolchain.</li> <li>Zig Bits: Returning slices from functions (2023)</li> <li>Multi-Object For Loops + Struct-Of-Arrays (2023)</li> <li>Smoking Hot Binary Search In Zig (2023)</li> <li>Prime Reacts: Is This New Language Better Than Rust? C++? (Zig First Impressions) (2023)</li> <li>Zig's Curious Multi-Sequence For Loops (2023) (HN)</li> <li>When Zig is safer and faster than Rust (2023) (Lobsters) (Reddit)</li> <li>All Algorithms implemented in Zig</li> <li>Zig: The modern alternative to C (2023) (HN)</li> <li>Writing JSON to a custom output in Zig (2023)</li> <li>The curious case of a memory leak in a Zig program (2023) (HN)</li> <li>Errors and Zig (2023) (HN)</li> <li>Zig is FASTER and SAFER than Rust | Prime Reacts (2023)</li> <li>Zig Quirks (2023) (HN)</li> <li>Zig And Rust (2023) (Lobsters) (Reddit)</li> </ul>"},{"location":"tests/hello/","title":"Hello, world!","text":"<p>This is a <code>hello, world</code> test.</p>"},{"location":"tests/test2/","title":"Test 2","text":""}]}